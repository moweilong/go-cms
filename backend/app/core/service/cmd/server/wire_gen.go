// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/tx7do/kratos-bootstrap/api/gen/go/conf/v1"
	"go-cms/app/core/service/internal/data"
	"go-cms/app/core/service/internal/server"
	"go-cms/app/core/service/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(logger log.Logger, registrar registry.Registrar, bootstrap *v1.Bootstrap) (*kratos.App, func(), error) {
	entClient := data.NewEntClient(bootstrap, logger)
	client := data.NewRedisClient(bootstrap, logger)
	dataData, cleanup, err := data.NewData(entClient, client, logger)
	if err != nil {
		return nil, nil, err
	}
	commentRepo := data.NewCommentRepo(dataData, logger)
	commentService := service.NewCommentService(logger, commentRepo)
	postRepo := data.NewPostRepo(dataData, logger)
	postService := service.NewPostService(logger, postRepo)
	linkRepo := data.NewLinkRepo(dataData, logger)
	linkService := service.NewLinkService(logger, linkRepo)
	categoryRepo := data.NewCategoryRepo(dataData, logger)
	categoryService := service.NewCategoryService(logger, categoryRepo)
	tagRepo := data.NewTagRepo(dataData, logger)
	tagService := service.NewTagService(logger, tagRepo)
	attachmentRepo := data.NewAttachmentRepo(dataData, logger)
	attachmentService := service.NewAttachmentService(logger, attachmentRepo)
	minIOClient := data.NewMinIoClient(bootstrap, logger)
	fileService := service.NewFileService(logger, minIOClient)
	userRepo := data.NewUserRepo(dataData, logger)
	userService := service.NewUserService(logger, userRepo)
	grpcServer := server.NewGRPCServer(bootstrap, logger, commentService, postService, linkService, categoryService, tagService, attachmentService, fileService, userService)
	app := newApp(logger, registrar, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
