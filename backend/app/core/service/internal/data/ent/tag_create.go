// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TagCreate is the builder for creating a Tag entity.
type TagCreate struct {
	config
	mutation *TagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tc *TagCreate) SetCreateTime(i int64) *TagCreate {
	tc.mutation.SetCreateTime(i)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TagCreate) SetNillableCreateTime(i *int64) *TagCreate {
	if i != nil {
		tc.SetCreateTime(*i)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TagCreate) SetUpdateTime(i int64) *TagCreate {
	tc.mutation.SetUpdateTime(i)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TagCreate) SetNillableUpdateTime(i *int64) *TagCreate {
	if i != nil {
		tc.SetUpdateTime(*i)
	}
	return tc
}

// SetDeleteTime sets the "delete_time" field.
func (tc *TagCreate) SetDeleteTime(i int64) *TagCreate {
	tc.mutation.SetDeleteTime(i)
	return tc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tc *TagCreate) SetNillableDeleteTime(i *int64) *TagCreate {
	if i != nil {
		tc.SetDeleteTime(*i)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TagCreate) SetName(s string) *TagCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TagCreate) SetNillableName(s *string) *TagCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetColor sets the "color" field.
func (tc *TagCreate) SetColor(s string) *TagCreate {
	tc.mutation.SetColor(s)
	return tc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (tc *TagCreate) SetNillableColor(s *string) *TagCreate {
	if s != nil {
		tc.SetColor(*s)
	}
	return tc
}

// SetThumbnail sets the "thumbnail" field.
func (tc *TagCreate) SetThumbnail(s string) *TagCreate {
	tc.mutation.SetThumbnail(s)
	return tc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (tc *TagCreate) SetNillableThumbnail(s *string) *TagCreate {
	if s != nil {
		tc.SetThumbnail(*s)
	}
	return tc
}

// SetSlug sets the "slug" field.
func (tc *TagCreate) SetSlug(s string) *TagCreate {
	tc.mutation.SetSlug(s)
	return tc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tc *TagCreate) SetNillableSlug(s *string) *TagCreate {
	if s != nil {
		tc.SetSlug(*s)
	}
	return tc
}

// SetSlugName sets the "slug_name" field.
func (tc *TagCreate) SetSlugName(s string) *TagCreate {
	tc.mutation.SetSlugName(s)
	return tc
}

// SetNillableSlugName sets the "slug_name" field if the given value is not nil.
func (tc *TagCreate) SetNillableSlugName(s *string) *TagCreate {
	if s != nil {
		tc.SetSlugName(*s)
	}
	return tc
}

// SetPostCount sets the "post_count" field.
func (tc *TagCreate) SetPostCount(u uint32) *TagCreate {
	tc.mutation.SetPostCount(u)
	return tc
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (tc *TagCreate) SetNillablePostCount(u *uint32) *TagCreate {
	if u != nil {
		tc.SetPostCount(*u)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TagCreate) SetID(u uint32) *TagCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TagMutation object of the builder.
func (tc *TagCreate) Mutation() *TagMutation {
	return tc.mutation
}

// Save creates the Tag in the database.
func (tc *TagCreate) Save(ctx context.Context) (*Tag, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TagCreate) SaveX(ctx context.Context) *Tag {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TagCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TagCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TagCreate) defaults() {
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := tag.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TagCreate) check() error {
	if v, ok := tc.mutation.Name(); ok {
		if err := tag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tag.name": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := tag.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Tag.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TagCreate) sqlSave(ctx context.Context) (*Tag, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TagCreate) createSpec() (*Tag, *sqlgraph.CreateSpec) {
	var (
		_node = &Tag{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tag.Table, sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(tag.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(tag.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := tc.mutation.DeleteTime(); ok {
		_spec.SetField(tag.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tag.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := tc.mutation.Color(); ok {
		_spec.SetField(tag.FieldColor, field.TypeString, value)
		_node.Color = &value
	}
	if value, ok := tc.mutation.Thumbnail(); ok {
		_spec.SetField(tag.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = &value
	}
	if value, ok := tc.mutation.Slug(); ok {
		_spec.SetField(tag.FieldSlug, field.TypeString, value)
		_node.Slug = &value
	}
	if value, ok := tc.mutation.SlugName(); ok {
		_spec.SetField(tag.FieldSlugName, field.TypeString, value)
		_node.SlugName = &value
	}
	if value, ok := tc.mutation.PostCount(); ok {
		_spec.SetField(tag.FieldPostCount, field.TypeUint32, value)
		_node.PostCount = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tag.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tc *TagCreate) OnConflict(opts ...sql.ConflictOption) *TagUpsertOne {
	tc.conflict = opts
	return &TagUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TagCreate) OnConflictColumns(columns ...string) *TagUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TagUpsertOne{
		create: tc,
	}
}

type (
	// TagUpsertOne is the builder for "upsert"-ing
	//  one Tag node.
	TagUpsertOne struct {
		create *TagCreate
	}

	// TagUpsert is the "OnConflict" setter.
	TagUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TagUpsert) SetUpdateTime(v int64) *TagUpsert {
	u.Set(tag.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TagUpsert) UpdateUpdateTime() *TagUpsert {
	u.SetExcluded(tag.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *TagUpsert) AddUpdateTime(v int64) *TagUpsert {
	u.Add(tag.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TagUpsert) ClearUpdateTime() *TagUpsert {
	u.SetNull(tag.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *TagUpsert) SetDeleteTime(v int64) *TagUpsert {
	u.Set(tag.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TagUpsert) UpdateDeleteTime() *TagUpsert {
	u.SetExcluded(tag.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *TagUpsert) AddDeleteTime(v int64) *TagUpsert {
	u.Add(tag.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TagUpsert) ClearDeleteTime() *TagUpsert {
	u.SetNull(tag.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *TagUpsert) SetName(v string) *TagUpsert {
	u.Set(tag.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TagUpsert) UpdateName() *TagUpsert {
	u.SetExcluded(tag.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TagUpsert) ClearName() *TagUpsert {
	u.SetNull(tag.FieldName)
	return u
}

// SetColor sets the "color" field.
func (u *TagUpsert) SetColor(v string) *TagUpsert {
	u.Set(tag.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *TagUpsert) UpdateColor() *TagUpsert {
	u.SetExcluded(tag.FieldColor)
	return u
}

// ClearColor clears the value of the "color" field.
func (u *TagUpsert) ClearColor() *TagUpsert {
	u.SetNull(tag.FieldColor)
	return u
}

// SetThumbnail sets the "thumbnail" field.
func (u *TagUpsert) SetThumbnail(v string) *TagUpsert {
	u.Set(tag.FieldThumbnail, v)
	return u
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *TagUpsert) UpdateThumbnail() *TagUpsert {
	u.SetExcluded(tag.FieldThumbnail)
	return u
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *TagUpsert) ClearThumbnail() *TagUpsert {
	u.SetNull(tag.FieldThumbnail)
	return u
}

// SetSlug sets the "slug" field.
func (u *TagUpsert) SetSlug(v string) *TagUpsert {
	u.Set(tag.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *TagUpsert) UpdateSlug() *TagUpsert {
	u.SetExcluded(tag.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *TagUpsert) ClearSlug() *TagUpsert {
	u.SetNull(tag.FieldSlug)
	return u
}

// SetSlugName sets the "slug_name" field.
func (u *TagUpsert) SetSlugName(v string) *TagUpsert {
	u.Set(tag.FieldSlugName, v)
	return u
}

// UpdateSlugName sets the "slug_name" field to the value that was provided on create.
func (u *TagUpsert) UpdateSlugName() *TagUpsert {
	u.SetExcluded(tag.FieldSlugName)
	return u
}

// ClearSlugName clears the value of the "slug_name" field.
func (u *TagUpsert) ClearSlugName() *TagUpsert {
	u.SetNull(tag.FieldSlugName)
	return u
}

// SetPostCount sets the "post_count" field.
func (u *TagUpsert) SetPostCount(v uint32) *TagUpsert {
	u.Set(tag.FieldPostCount, v)
	return u
}

// UpdatePostCount sets the "post_count" field to the value that was provided on create.
func (u *TagUpsert) UpdatePostCount() *TagUpsert {
	u.SetExcluded(tag.FieldPostCount)
	return u
}

// AddPostCount adds v to the "post_count" field.
func (u *TagUpsert) AddPostCount(v uint32) *TagUpsert {
	u.Add(tag.FieldPostCount, v)
	return u
}

// ClearPostCount clears the value of the "post_count" field.
func (u *TagUpsert) ClearPostCount() *TagUpsert {
	u.SetNull(tag.FieldPostCount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagUpsertOne) UpdateNewValues() *TagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tag.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(tag.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TagUpsertOne) Ignore() *TagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagUpsertOne) DoNothing() *TagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagCreate.OnConflict
// documentation for more info.
func (u *TagUpsertOne) Update(set func(*TagUpsert)) *TagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TagUpsertOne) SetUpdateTime(v int64) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *TagUpsertOne) AddUpdateTime(v int64) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateUpdateTime() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TagUpsertOne) ClearUpdateTime() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TagUpsertOne) SetDeleteTime(v int64) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *TagUpsertOne) AddDeleteTime(v int64) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateDeleteTime() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TagUpsertOne) ClearDeleteTime() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *TagUpsertOne) SetName(v string) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateName() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TagUpsertOne) ClearName() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearName()
	})
}

// SetColor sets the "color" field.
func (u *TagUpsertOne) SetColor(v string) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateColor() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *TagUpsertOne) ClearColor() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearColor()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *TagUpsertOne) SetThumbnail(v string) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateThumbnail() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *TagUpsertOne) ClearThumbnail() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearThumbnail()
	})
}

// SetSlug sets the "slug" field.
func (u *TagUpsertOne) SetSlug(v string) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateSlug() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *TagUpsertOne) ClearSlug() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearSlug()
	})
}

// SetSlugName sets the "slug_name" field.
func (u *TagUpsertOne) SetSlugName(v string) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetSlugName(v)
	})
}

// UpdateSlugName sets the "slug_name" field to the value that was provided on create.
func (u *TagUpsertOne) UpdateSlugName() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdateSlugName()
	})
}

// ClearSlugName clears the value of the "slug_name" field.
func (u *TagUpsertOne) ClearSlugName() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearSlugName()
	})
}

// SetPostCount sets the "post_count" field.
func (u *TagUpsertOne) SetPostCount(v uint32) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.SetPostCount(v)
	})
}

// AddPostCount adds v to the "post_count" field.
func (u *TagUpsertOne) AddPostCount(v uint32) *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.AddPostCount(v)
	})
}

// UpdatePostCount sets the "post_count" field to the value that was provided on create.
func (u *TagUpsertOne) UpdatePostCount() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.UpdatePostCount()
	})
}

// ClearPostCount clears the value of the "post_count" field.
func (u *TagUpsertOne) ClearPostCount() *TagUpsertOne {
	return u.Update(func(s *TagUpsert) {
		s.ClearPostCount()
	})
}

// Exec executes the query.
func (u *TagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TagUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TagUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TagCreateBulk is the builder for creating many Tag entities in bulk.
type TagCreateBulk struct {
	config
	err      error
	builders []*TagCreate
	conflict []sql.ConflictOption
}

// Save creates the Tag entities in the database.
func (tcb *TagCreateBulk) Save(ctx context.Context) ([]*Tag, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tag, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TagCreateBulk) SaveX(ctx context.Context) []*Tag {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TagCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TagCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tcb *TagCreateBulk) OnConflict(opts ...sql.ConflictOption) *TagUpsertBulk {
	tcb.conflict = opts
	return &TagUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TagCreateBulk) OnConflictColumns(columns ...string) *TagUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TagUpsertBulk{
		create: tcb,
	}
}

// TagUpsertBulk is the builder for "upsert"-ing
// a bulk of Tag nodes.
type TagUpsertBulk struct {
	create *TagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagUpsertBulk) UpdateNewValues() *TagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tag.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(tag.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TagUpsertBulk) Ignore() *TagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagUpsertBulk) DoNothing() *TagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagCreateBulk.OnConflict
// documentation for more info.
func (u *TagUpsertBulk) Update(set func(*TagUpsert)) *TagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TagUpsertBulk) SetUpdateTime(v int64) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *TagUpsertBulk) AddUpdateTime(v int64) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateUpdateTime() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TagUpsertBulk) ClearUpdateTime() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TagUpsertBulk) SetDeleteTime(v int64) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *TagUpsertBulk) AddDeleteTime(v int64) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateDeleteTime() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TagUpsertBulk) ClearDeleteTime() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *TagUpsertBulk) SetName(v string) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateName() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TagUpsertBulk) ClearName() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearName()
	})
}

// SetColor sets the "color" field.
func (u *TagUpsertBulk) SetColor(v string) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateColor() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *TagUpsertBulk) ClearColor() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearColor()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *TagUpsertBulk) SetThumbnail(v string) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateThumbnail() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *TagUpsertBulk) ClearThumbnail() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearThumbnail()
	})
}

// SetSlug sets the "slug" field.
func (u *TagUpsertBulk) SetSlug(v string) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateSlug() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *TagUpsertBulk) ClearSlug() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearSlug()
	})
}

// SetSlugName sets the "slug_name" field.
func (u *TagUpsertBulk) SetSlugName(v string) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetSlugName(v)
	})
}

// UpdateSlugName sets the "slug_name" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdateSlugName() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdateSlugName()
	})
}

// ClearSlugName clears the value of the "slug_name" field.
func (u *TagUpsertBulk) ClearSlugName() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearSlugName()
	})
}

// SetPostCount sets the "post_count" field.
func (u *TagUpsertBulk) SetPostCount(v uint32) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.SetPostCount(v)
	})
}

// AddPostCount adds v to the "post_count" field.
func (u *TagUpsertBulk) AddPostCount(v uint32) *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.AddPostCount(v)
	})
}

// UpdatePostCount sets the "post_count" field to the value that was provided on create.
func (u *TagUpsertBulk) UpdatePostCount() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.UpdatePostCount()
	})
}

// ClearPostCount clears the value of the "post_count" field.
func (u *TagUpsertBulk) ClearPostCount() *TagUpsertBulk {
	return u.Update(func(s *TagUpsert) {
		s.ClearPostCount()
	})
}

// Exec executes the query.
func (u *TagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
