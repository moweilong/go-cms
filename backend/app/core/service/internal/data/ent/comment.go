// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-cms/app/core/service/internal/data/ent/comment"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *int64 `json:"delete_time,omitempty"`
	// 作者
	Author *string `json:"author,omitempty"`
	// 邮箱地址
	Email *string `json:"email,omitempty"`
	// IP地址
	IPAddress *string `json:"ip_address,omitempty"`
	// 作者链接
	AuthorURL *string `json:"author_url,omitempty"`
	// MD5
	GravatarMd5 *string `json:"gravatar_md5,omitempty"`
	// 内容
	Content *string `json:"content,omitempty"`
	// 用户浏览器信息
	UserAgent *string `json:"user_agent,omitempty"`
	// 头像
	Avatar *string `json:"avatar,omitempty"`
	// 父评论ID
	ParentID *uint32 `json:"parent_id,omitempty"`
	// 状态
	Status *uint32 `json:"status,omitempty"`
	// 是否管理员
	IsAdmin *bool `json:"is_admin,omitempty"`
	// 允许通知
	AllowNotification *bool `json:"allow_notification,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldIsAdmin, comment.FieldAllowNotification:
			values[i] = new(sql.NullBool)
		case comment.FieldID, comment.FieldCreateTime, comment.FieldUpdateTime, comment.FieldDeleteTime, comment.FieldParentID, comment.FieldStatus:
			values[i] = new(sql.NullInt64)
		case comment.FieldAuthor, comment.FieldEmail, comment.FieldIPAddress, comment.FieldAuthorURL, comment.FieldGravatarMd5, comment.FieldContent, comment.FieldUserAgent, comment.FieldAvatar:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint32(value.Int64)
		case comment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = new(int64)
				*c.CreateTime = value.Int64
			}
		case comment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = new(int64)
				*c.UpdateTime = value.Int64
			}
		case comment.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				c.DeleteTime = new(int64)
				*c.DeleteTime = value.Int64
			}
		case comment.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				c.Author = new(string)
				*c.Author = value.String
			}
		case comment.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = new(string)
				*c.Email = value.String
			}
		case comment.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				c.IPAddress = new(string)
				*c.IPAddress = value.String
			}
		case comment.FieldAuthorURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_url", values[i])
			} else if value.Valid {
				c.AuthorURL = new(string)
				*c.AuthorURL = value.String
			}
		case comment.FieldGravatarMd5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gravatar_md5", values[i])
			} else if value.Valid {
				c.GravatarMd5 = new(string)
				*c.GravatarMd5 = value.String
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = new(string)
				*c.Content = value.String
			}
		case comment.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				c.UserAgent = new(string)
				*c.UserAgent = value.String
			}
		case comment.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				c.Avatar = new(string)
				*c.Avatar = value.String
			}
		case comment.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				c.ParentID = new(uint32)
				*c.ParentID = uint32(value.Int64)
			}
		case comment.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = new(uint32)
				*c.Status = uint32(value.Int64)
			}
		case comment.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				c.IsAdmin = new(bool)
				*c.IsAdmin = value.Bool
			}
		case comment.FieldAllowNotification:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_notification", values[i])
			} else if value.Valid {
				c.AllowNotification = new(bool)
				*c.AllowNotification = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Author; v != nil {
		builder.WriteString("author=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.IPAddress; v != nil {
		builder.WriteString("ip_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.AuthorURL; v != nil {
		builder.WriteString("author_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.GravatarMd5; v != nil {
		builder.WriteString("gravatar_md5=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Content; v != nil {
		builder.WriteString("content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.UserAgent; v != nil {
		builder.WriteString("user_agent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Avatar; v != nil {
		builder.WriteString("avatar=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.IsAdmin; v != nil {
		builder.WriteString("is_admin=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.AllowNotification; v != nil {
		builder.WriteString("allow_notification=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
