// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/photo"
	"go-cms/app/core/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotoUpdate is the builder for updating Photo entities.
type PhotoUpdate struct {
	config
	hooks     []Hook
	mutation  *PhotoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PhotoUpdate builder.
func (pu *PhotoUpdate) Where(ps ...predicate.Photo) *PhotoUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PhotoUpdate) SetUpdateTime(i int64) *PhotoUpdate {
	pu.mutation.ResetUpdateTime()
	pu.mutation.SetUpdateTime(i)
	return pu
}

// AddUpdateTime adds i to the "update_time" field.
func (pu *PhotoUpdate) AddUpdateTime(i int64) *PhotoUpdate {
	pu.mutation.AddUpdateTime(i)
	return pu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (pu *PhotoUpdate) ClearUpdateTime() *PhotoUpdate {
	pu.mutation.ClearUpdateTime()
	return pu
}

// SetDeleteTime sets the "delete_time" field.
func (pu *PhotoUpdate) SetDeleteTime(i int64) *PhotoUpdate {
	pu.mutation.ResetDeleteTime()
	pu.mutation.SetDeleteTime(i)
	return pu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableDeleteTime(i *int64) *PhotoUpdate {
	if i != nil {
		pu.SetDeleteTime(*i)
	}
	return pu
}

// AddDeleteTime adds i to the "delete_time" field.
func (pu *PhotoUpdate) AddDeleteTime(i int64) *PhotoUpdate {
	pu.mutation.AddDeleteTime(i)
	return pu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (pu *PhotoUpdate) ClearDeleteTime() *PhotoUpdate {
	pu.mutation.ClearDeleteTime()
	return pu
}

// SetName sets the "name" field.
func (pu *PhotoUpdate) SetName(s string) *PhotoUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableName(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PhotoUpdate) ClearName() *PhotoUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetThumbnail sets the "thumbnail" field.
func (pu *PhotoUpdate) SetThumbnail(s string) *PhotoUpdate {
	pu.mutation.SetThumbnail(s)
	return pu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableThumbnail(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetThumbnail(*s)
	}
	return pu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (pu *PhotoUpdate) ClearThumbnail() *PhotoUpdate {
	pu.mutation.ClearThumbnail()
	return pu
}

// SetTakeTime sets the "take_time" field.
func (pu *PhotoUpdate) SetTakeTime(i int64) *PhotoUpdate {
	pu.mutation.ResetTakeTime()
	pu.mutation.SetTakeTime(i)
	return pu
}

// SetNillableTakeTime sets the "take_time" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableTakeTime(i *int64) *PhotoUpdate {
	if i != nil {
		pu.SetTakeTime(*i)
	}
	return pu
}

// AddTakeTime adds i to the "take_time" field.
func (pu *PhotoUpdate) AddTakeTime(i int64) *PhotoUpdate {
	pu.mutation.AddTakeTime(i)
	return pu
}

// ClearTakeTime clears the value of the "take_time" field.
func (pu *PhotoUpdate) ClearTakeTime() *PhotoUpdate {
	pu.mutation.ClearTakeTime()
	return pu
}

// SetURL sets the "url" field.
func (pu *PhotoUpdate) SetURL(s string) *PhotoUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableURL(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetURL(*s)
	}
	return pu
}

// ClearURL clears the value of the "url" field.
func (pu *PhotoUpdate) ClearURL() *PhotoUpdate {
	pu.mutation.ClearURL()
	return pu
}

// SetTeam sets the "team" field.
func (pu *PhotoUpdate) SetTeam(s string) *PhotoUpdate {
	pu.mutation.SetTeam(s)
	return pu
}

// SetNillableTeam sets the "team" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableTeam(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetTeam(*s)
	}
	return pu
}

// ClearTeam clears the value of the "team" field.
func (pu *PhotoUpdate) ClearTeam() *PhotoUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// SetLocation sets the "location" field.
func (pu *PhotoUpdate) SetLocation(s string) *PhotoUpdate {
	pu.mutation.SetLocation(s)
	return pu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableLocation(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetLocation(*s)
	}
	return pu
}

// ClearLocation clears the value of the "location" field.
func (pu *PhotoUpdate) ClearLocation() *PhotoUpdate {
	pu.mutation.ClearLocation()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PhotoUpdate) SetDescription(s string) *PhotoUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableDescription(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PhotoUpdate) ClearDescription() *PhotoUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetLikes sets the "likes" field.
func (pu *PhotoUpdate) SetLikes(i int32) *PhotoUpdate {
	pu.mutation.ResetLikes()
	pu.mutation.SetLikes(i)
	return pu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableLikes(i *int32) *PhotoUpdate {
	if i != nil {
		pu.SetLikes(*i)
	}
	return pu
}

// AddLikes adds i to the "likes" field.
func (pu *PhotoUpdate) AddLikes(i int32) *PhotoUpdate {
	pu.mutation.AddLikes(i)
	return pu
}

// ClearLikes clears the value of the "likes" field.
func (pu *PhotoUpdate) ClearLikes() *PhotoUpdate {
	pu.mutation.ClearLikes()
	return pu
}

// Mutation returns the PhotoMutation object of the builder.
func (pu *PhotoUpdate) Mutation() *PhotoMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PhotoUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PhotoUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PhotoUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PhotoUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PhotoUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok && !pu.mutation.UpdateTimeCleared() {
		v := photo.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PhotoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PhotoUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PhotoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(photo.Table, photo.Columns, sqlgraph.NewFieldSpec(photo.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreateTimeCleared() {
		_spec.ClearField(photo.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(photo.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(photo.FieldUpdateTime, field.TypeInt64, value)
	}
	if pu.mutation.UpdateTimeCleared() {
		_spec.ClearField(photo.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.DeleteTime(); ok {
		_spec.SetField(photo.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(photo.FieldDeleteTime, field.TypeInt64, value)
	}
	if pu.mutation.DeleteTimeCleared() {
		_spec.ClearField(photo.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(photo.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(photo.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Thumbnail(); ok {
		_spec.SetField(photo.FieldThumbnail, field.TypeString, value)
	}
	if pu.mutation.ThumbnailCleared() {
		_spec.ClearField(photo.FieldThumbnail, field.TypeString)
	}
	if value, ok := pu.mutation.TakeTime(); ok {
		_spec.SetField(photo.FieldTakeTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedTakeTime(); ok {
		_spec.AddField(photo.FieldTakeTime, field.TypeInt64, value)
	}
	if pu.mutation.TakeTimeCleared() {
		_spec.ClearField(photo.FieldTakeTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(photo.FieldURL, field.TypeString, value)
	}
	if pu.mutation.URLCleared() {
		_spec.ClearField(photo.FieldURL, field.TypeString)
	}
	if value, ok := pu.mutation.Team(); ok {
		_spec.SetField(photo.FieldTeam, field.TypeString, value)
	}
	if pu.mutation.TeamCleared() {
		_spec.ClearField(photo.FieldTeam, field.TypeString)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(photo.FieldLocation, field.TypeString, value)
	}
	if pu.mutation.LocationCleared() {
		_spec.ClearField(photo.FieldLocation, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(photo.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(photo.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Likes(); ok {
		_spec.SetField(photo.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedLikes(); ok {
		_spec.AddField(photo.FieldLikes, field.TypeInt32, value)
	}
	if pu.mutation.LikesCleared() {
		_spec.ClearField(photo.FieldLikes, field.TypeInt32)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PhotoUpdateOne is the builder for updating a single Photo entity.
type PhotoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PhotoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (puo *PhotoUpdateOne) SetUpdateTime(i int64) *PhotoUpdateOne {
	puo.mutation.ResetUpdateTime()
	puo.mutation.SetUpdateTime(i)
	return puo
}

// AddUpdateTime adds i to the "update_time" field.
func (puo *PhotoUpdateOne) AddUpdateTime(i int64) *PhotoUpdateOne {
	puo.mutation.AddUpdateTime(i)
	return puo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (puo *PhotoUpdateOne) ClearUpdateTime() *PhotoUpdateOne {
	puo.mutation.ClearUpdateTime()
	return puo
}

// SetDeleteTime sets the "delete_time" field.
func (puo *PhotoUpdateOne) SetDeleteTime(i int64) *PhotoUpdateOne {
	puo.mutation.ResetDeleteTime()
	puo.mutation.SetDeleteTime(i)
	return puo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableDeleteTime(i *int64) *PhotoUpdateOne {
	if i != nil {
		puo.SetDeleteTime(*i)
	}
	return puo
}

// AddDeleteTime adds i to the "delete_time" field.
func (puo *PhotoUpdateOne) AddDeleteTime(i int64) *PhotoUpdateOne {
	puo.mutation.AddDeleteTime(i)
	return puo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (puo *PhotoUpdateOne) ClearDeleteTime() *PhotoUpdateOne {
	puo.mutation.ClearDeleteTime()
	return puo
}

// SetName sets the "name" field.
func (puo *PhotoUpdateOne) SetName(s string) *PhotoUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableName(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PhotoUpdateOne) ClearName() *PhotoUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetThumbnail sets the "thumbnail" field.
func (puo *PhotoUpdateOne) SetThumbnail(s string) *PhotoUpdateOne {
	puo.mutation.SetThumbnail(s)
	return puo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableThumbnail(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetThumbnail(*s)
	}
	return puo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (puo *PhotoUpdateOne) ClearThumbnail() *PhotoUpdateOne {
	puo.mutation.ClearThumbnail()
	return puo
}

// SetTakeTime sets the "take_time" field.
func (puo *PhotoUpdateOne) SetTakeTime(i int64) *PhotoUpdateOne {
	puo.mutation.ResetTakeTime()
	puo.mutation.SetTakeTime(i)
	return puo
}

// SetNillableTakeTime sets the "take_time" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableTakeTime(i *int64) *PhotoUpdateOne {
	if i != nil {
		puo.SetTakeTime(*i)
	}
	return puo
}

// AddTakeTime adds i to the "take_time" field.
func (puo *PhotoUpdateOne) AddTakeTime(i int64) *PhotoUpdateOne {
	puo.mutation.AddTakeTime(i)
	return puo
}

// ClearTakeTime clears the value of the "take_time" field.
func (puo *PhotoUpdateOne) ClearTakeTime() *PhotoUpdateOne {
	puo.mutation.ClearTakeTime()
	return puo
}

// SetURL sets the "url" field.
func (puo *PhotoUpdateOne) SetURL(s string) *PhotoUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableURL(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetURL(*s)
	}
	return puo
}

// ClearURL clears the value of the "url" field.
func (puo *PhotoUpdateOne) ClearURL() *PhotoUpdateOne {
	puo.mutation.ClearURL()
	return puo
}

// SetTeam sets the "team" field.
func (puo *PhotoUpdateOne) SetTeam(s string) *PhotoUpdateOne {
	puo.mutation.SetTeam(s)
	return puo
}

// SetNillableTeam sets the "team" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableTeam(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetTeam(*s)
	}
	return puo
}

// ClearTeam clears the value of the "team" field.
func (puo *PhotoUpdateOne) ClearTeam() *PhotoUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// SetLocation sets the "location" field.
func (puo *PhotoUpdateOne) SetLocation(s string) *PhotoUpdateOne {
	puo.mutation.SetLocation(s)
	return puo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableLocation(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetLocation(*s)
	}
	return puo
}

// ClearLocation clears the value of the "location" field.
func (puo *PhotoUpdateOne) ClearLocation() *PhotoUpdateOne {
	puo.mutation.ClearLocation()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PhotoUpdateOne) SetDescription(s string) *PhotoUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableDescription(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PhotoUpdateOne) ClearDescription() *PhotoUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetLikes sets the "likes" field.
func (puo *PhotoUpdateOne) SetLikes(i int32) *PhotoUpdateOne {
	puo.mutation.ResetLikes()
	puo.mutation.SetLikes(i)
	return puo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableLikes(i *int32) *PhotoUpdateOne {
	if i != nil {
		puo.SetLikes(*i)
	}
	return puo
}

// AddLikes adds i to the "likes" field.
func (puo *PhotoUpdateOne) AddLikes(i int32) *PhotoUpdateOne {
	puo.mutation.AddLikes(i)
	return puo
}

// ClearLikes clears the value of the "likes" field.
func (puo *PhotoUpdateOne) ClearLikes() *PhotoUpdateOne {
	puo.mutation.ClearLikes()
	return puo
}

// Mutation returns the PhotoMutation object of the builder.
func (puo *PhotoUpdateOne) Mutation() *PhotoMutation {
	return puo.mutation
}

// Where appends a list predicates to the PhotoUpdate builder.
func (puo *PhotoUpdateOne) Where(ps ...predicate.Photo) *PhotoUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PhotoUpdateOne) Select(field string, fields ...string) *PhotoUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Photo entity.
func (puo *PhotoUpdateOne) Save(ctx context.Context) (*Photo, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PhotoUpdateOne) SaveX(ctx context.Context) *Photo {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PhotoUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PhotoUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PhotoUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok && !puo.mutation.UpdateTimeCleared() {
		v := photo.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PhotoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PhotoUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PhotoUpdateOne) sqlSave(ctx context.Context) (_node *Photo, err error) {
	_spec := sqlgraph.NewUpdateSpec(photo.Table, photo.Columns, sqlgraph.NewFieldSpec(photo.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Photo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photo.FieldID)
		for _, f := range fields {
			if !photo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != photo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreateTimeCleared() {
		_spec.ClearField(photo.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(photo.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(photo.FieldUpdateTime, field.TypeInt64, value)
	}
	if puo.mutation.UpdateTimeCleared() {
		_spec.ClearField(photo.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.DeleteTime(); ok {
		_spec.SetField(photo.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(photo.FieldDeleteTime, field.TypeInt64, value)
	}
	if puo.mutation.DeleteTimeCleared() {
		_spec.ClearField(photo.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(photo.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(photo.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Thumbnail(); ok {
		_spec.SetField(photo.FieldThumbnail, field.TypeString, value)
	}
	if puo.mutation.ThumbnailCleared() {
		_spec.ClearField(photo.FieldThumbnail, field.TypeString)
	}
	if value, ok := puo.mutation.TakeTime(); ok {
		_spec.SetField(photo.FieldTakeTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedTakeTime(); ok {
		_spec.AddField(photo.FieldTakeTime, field.TypeInt64, value)
	}
	if puo.mutation.TakeTimeCleared() {
		_spec.ClearField(photo.FieldTakeTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(photo.FieldURL, field.TypeString, value)
	}
	if puo.mutation.URLCleared() {
		_spec.ClearField(photo.FieldURL, field.TypeString)
	}
	if value, ok := puo.mutation.Team(); ok {
		_spec.SetField(photo.FieldTeam, field.TypeString, value)
	}
	if puo.mutation.TeamCleared() {
		_spec.ClearField(photo.FieldTeam, field.TypeString)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(photo.FieldLocation, field.TypeString, value)
	}
	if puo.mutation.LocationCleared() {
		_spec.ClearField(photo.FieldLocation, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(photo.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(photo.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Likes(); ok {
		_spec.SetField(photo.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedLikes(); ok {
		_spec.AddField(photo.FieldLikes, field.TypeInt32, value)
	}
	if puo.mutation.LikesCleared() {
		_spec.ClearField(photo.FieldLikes, field.TypeInt32)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Photo{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
