// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/post"
	"go-cms/app/core/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PostUpdate) SetUpdateTime(i int64) *PostUpdate {
	pu.mutation.ResetUpdateTime()
	pu.mutation.SetUpdateTime(i)
	return pu
}

// AddUpdateTime adds i to the "update_time" field.
func (pu *PostUpdate) AddUpdateTime(i int64) *PostUpdate {
	pu.mutation.AddUpdateTime(i)
	return pu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (pu *PostUpdate) ClearUpdateTime() *PostUpdate {
	pu.mutation.ClearUpdateTime()
	return pu
}

// SetDeleteTime sets the "delete_time" field.
func (pu *PostUpdate) SetDeleteTime(i int64) *PostUpdate {
	pu.mutation.ResetDeleteTime()
	pu.mutation.SetDeleteTime(i)
	return pu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDeleteTime(i *int64) *PostUpdate {
	if i != nil {
		pu.SetDeleteTime(*i)
	}
	return pu
}

// AddDeleteTime adds i to the "delete_time" field.
func (pu *PostUpdate) AddDeleteTime(i int64) *PostUpdate {
	pu.mutation.AddDeleteTime(i)
	return pu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (pu *PostUpdate) ClearDeleteTime() *PostUpdate {
	pu.mutation.ClearDeleteTime()
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// ClearTitle clears the value of the "title" field.
func (pu *PostUpdate) ClearTitle() *PostUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetSlug sets the "slug" field.
func (pu *PostUpdate) SetSlug(s string) *PostUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *PostUpdate) SetNillableSlug(s *string) *PostUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// ClearSlug clears the value of the "slug" field.
func (pu *PostUpdate) ClearSlug() *PostUpdate {
	pu.mutation.ClearSlug()
	return pu
}

// SetMetaKeywords sets the "meta_keywords" field.
func (pu *PostUpdate) SetMetaKeywords(s string) *PostUpdate {
	pu.mutation.SetMetaKeywords(s)
	return pu
}

// SetNillableMetaKeywords sets the "meta_keywords" field if the given value is not nil.
func (pu *PostUpdate) SetNillableMetaKeywords(s *string) *PostUpdate {
	if s != nil {
		pu.SetMetaKeywords(*s)
	}
	return pu
}

// ClearMetaKeywords clears the value of the "meta_keywords" field.
func (pu *PostUpdate) ClearMetaKeywords() *PostUpdate {
	pu.mutation.ClearMetaKeywords()
	return pu
}

// SetMetaDescription sets the "meta_description" field.
func (pu *PostUpdate) SetMetaDescription(s string) *PostUpdate {
	pu.mutation.SetMetaDescription(s)
	return pu
}

// SetNillableMetaDescription sets the "meta_description" field if the given value is not nil.
func (pu *PostUpdate) SetNillableMetaDescription(s *string) *PostUpdate {
	if s != nil {
		pu.SetMetaDescription(*s)
	}
	return pu
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (pu *PostUpdate) ClearMetaDescription() *PostUpdate {
	pu.mutation.ClearMetaDescription()
	return pu
}

// SetFullPath sets the "full_path" field.
func (pu *PostUpdate) SetFullPath(s string) *PostUpdate {
	pu.mutation.SetFullPath(s)
	return pu
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (pu *PostUpdate) SetNillableFullPath(s *string) *PostUpdate {
	if s != nil {
		pu.SetFullPath(*s)
	}
	return pu
}

// ClearFullPath clears the value of the "full_path" field.
func (pu *PostUpdate) ClearFullPath() *PostUpdate {
	pu.mutation.ClearFullPath()
	return pu
}

// SetOriginalContent sets the "original_content" field.
func (pu *PostUpdate) SetOriginalContent(s string) *PostUpdate {
	pu.mutation.SetOriginalContent(s)
	return pu
}

// SetNillableOriginalContent sets the "original_content" field if the given value is not nil.
func (pu *PostUpdate) SetNillableOriginalContent(s *string) *PostUpdate {
	if s != nil {
		pu.SetOriginalContent(*s)
	}
	return pu
}

// ClearOriginalContent clears the value of the "original_content" field.
func (pu *PostUpdate) ClearOriginalContent() *PostUpdate {
	pu.mutation.ClearOriginalContent()
	return pu
}

// SetContent sets the "content" field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PostUpdate) SetNillableContent(s *string) *PostUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// ClearContent clears the value of the "content" field.
func (pu *PostUpdate) ClearContent() *PostUpdate {
	pu.mutation.ClearContent()
	return pu
}

// SetSummary sets the "summary" field.
func (pu *PostUpdate) SetSummary(s string) *PostUpdate {
	pu.mutation.SetSummary(s)
	return pu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (pu *PostUpdate) SetNillableSummary(s *string) *PostUpdate {
	if s != nil {
		pu.SetSummary(*s)
	}
	return pu
}

// ClearSummary clears the value of the "summary" field.
func (pu *PostUpdate) ClearSummary() *PostUpdate {
	pu.mutation.ClearSummary()
	return pu
}

// SetThumbnail sets the "thumbnail" field.
func (pu *PostUpdate) SetThumbnail(s string) *PostUpdate {
	pu.mutation.SetThumbnail(s)
	return pu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (pu *PostUpdate) SetNillableThumbnail(s *string) *PostUpdate {
	if s != nil {
		pu.SetThumbnail(*s)
	}
	return pu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (pu *PostUpdate) ClearThumbnail() *PostUpdate {
	pu.mutation.ClearThumbnail()
	return pu
}

// SetPassword sets the "password" field.
func (pu *PostUpdate) SetPassword(s string) *PostUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePassword(s *string) *PostUpdate {
	if s != nil {
		pu.SetPassword(*s)
	}
	return pu
}

// ClearPassword clears the value of the "password" field.
func (pu *PostUpdate) ClearPassword() *PostUpdate {
	pu.mutation.ClearPassword()
	return pu
}

// SetTemplate sets the "template" field.
func (pu *PostUpdate) SetTemplate(s string) *PostUpdate {
	pu.mutation.SetTemplate(s)
	return pu
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTemplate(s *string) *PostUpdate {
	if s != nil {
		pu.SetTemplate(*s)
	}
	return pu
}

// ClearTemplate clears the value of the "template" field.
func (pu *PostUpdate) ClearTemplate() *PostUpdate {
	pu.mutation.ClearTemplate()
	return pu
}

// SetCommentCount sets the "comment_count" field.
func (pu *PostUpdate) SetCommentCount(i int32) *PostUpdate {
	pu.mutation.ResetCommentCount()
	pu.mutation.SetCommentCount(i)
	return pu
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCommentCount(i *int32) *PostUpdate {
	if i != nil {
		pu.SetCommentCount(*i)
	}
	return pu
}

// AddCommentCount adds i to the "comment_count" field.
func (pu *PostUpdate) AddCommentCount(i int32) *PostUpdate {
	pu.mutation.AddCommentCount(i)
	return pu
}

// ClearCommentCount clears the value of the "comment_count" field.
func (pu *PostUpdate) ClearCommentCount() *PostUpdate {
	pu.mutation.ClearCommentCount()
	return pu
}

// SetVisits sets the "visits" field.
func (pu *PostUpdate) SetVisits(i int32) *PostUpdate {
	pu.mutation.ResetVisits()
	pu.mutation.SetVisits(i)
	return pu
}

// SetNillableVisits sets the "visits" field if the given value is not nil.
func (pu *PostUpdate) SetNillableVisits(i *int32) *PostUpdate {
	if i != nil {
		pu.SetVisits(*i)
	}
	return pu
}

// AddVisits adds i to the "visits" field.
func (pu *PostUpdate) AddVisits(i int32) *PostUpdate {
	pu.mutation.AddVisits(i)
	return pu
}

// ClearVisits clears the value of the "visits" field.
func (pu *PostUpdate) ClearVisits() *PostUpdate {
	pu.mutation.ClearVisits()
	return pu
}

// SetLikes sets the "likes" field.
func (pu *PostUpdate) SetLikes(i int32) *PostUpdate {
	pu.mutation.ResetLikes()
	pu.mutation.SetLikes(i)
	return pu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikes(i *int32) *PostUpdate {
	if i != nil {
		pu.SetLikes(*i)
	}
	return pu
}

// AddLikes adds i to the "likes" field.
func (pu *PostUpdate) AddLikes(i int32) *PostUpdate {
	pu.mutation.AddLikes(i)
	return pu
}

// ClearLikes clears the value of the "likes" field.
func (pu *PostUpdate) ClearLikes() *PostUpdate {
	pu.mutation.ClearLikes()
	return pu
}

// SetWordCount sets the "word_count" field.
func (pu *PostUpdate) SetWordCount(i int32) *PostUpdate {
	pu.mutation.ResetWordCount()
	pu.mutation.SetWordCount(i)
	return pu
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableWordCount(i *int32) *PostUpdate {
	if i != nil {
		pu.SetWordCount(*i)
	}
	return pu
}

// AddWordCount adds i to the "word_count" field.
func (pu *PostUpdate) AddWordCount(i int32) *PostUpdate {
	pu.mutation.AddWordCount(i)
	return pu
}

// ClearWordCount clears the value of the "word_count" field.
func (pu *PostUpdate) ClearWordCount() *PostUpdate {
	pu.mutation.ClearWordCount()
	return pu
}

// SetTopPriority sets the "top_priority" field.
func (pu *PostUpdate) SetTopPriority(i int32) *PostUpdate {
	pu.mutation.ResetTopPriority()
	pu.mutation.SetTopPriority(i)
	return pu
}

// SetNillableTopPriority sets the "top_priority" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTopPriority(i *int32) *PostUpdate {
	if i != nil {
		pu.SetTopPriority(*i)
	}
	return pu
}

// AddTopPriority adds i to the "top_priority" field.
func (pu *PostUpdate) AddTopPriority(i int32) *PostUpdate {
	pu.mutation.AddTopPriority(i)
	return pu
}

// ClearTopPriority clears the value of the "top_priority" field.
func (pu *PostUpdate) ClearTopPriority() *PostUpdate {
	pu.mutation.ClearTopPriority()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PostUpdate) SetStatus(i int32) *PostUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PostUpdate) SetNillableStatus(i *int32) *PostUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PostUpdate) AddStatus(i int32) *PostUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *PostUpdate) ClearStatus() *PostUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetEditorType sets the "editor_type" field.
func (pu *PostUpdate) SetEditorType(i int32) *PostUpdate {
	pu.mutation.ResetEditorType()
	pu.mutation.SetEditorType(i)
	return pu
}

// SetNillableEditorType sets the "editor_type" field if the given value is not nil.
func (pu *PostUpdate) SetNillableEditorType(i *int32) *PostUpdate {
	if i != nil {
		pu.SetEditorType(*i)
	}
	return pu
}

// AddEditorType adds i to the "editor_type" field.
func (pu *PostUpdate) AddEditorType(i int32) *PostUpdate {
	pu.mutation.AddEditorType(i)
	return pu
}

// ClearEditorType clears the value of the "editor_type" field.
func (pu *PostUpdate) ClearEditorType() *PostUpdate {
	pu.mutation.ClearEditorType()
	return pu
}

// SetEditTime sets the "edit_time" field.
func (pu *PostUpdate) SetEditTime(i int64) *PostUpdate {
	pu.mutation.ResetEditTime()
	pu.mutation.SetEditTime(i)
	return pu
}

// SetNillableEditTime sets the "edit_time" field if the given value is not nil.
func (pu *PostUpdate) SetNillableEditTime(i *int64) *PostUpdate {
	if i != nil {
		pu.SetEditTime(*i)
	}
	return pu
}

// AddEditTime adds i to the "edit_time" field.
func (pu *PostUpdate) AddEditTime(i int64) *PostUpdate {
	pu.mutation.AddEditTime(i)
	return pu
}

// ClearEditTime clears the value of the "edit_time" field.
func (pu *PostUpdate) ClearEditTime() *PostUpdate {
	pu.mutation.ClearEditTime()
	return pu
}

// SetDisallowComment sets the "disallow_comment" field.
func (pu *PostUpdate) SetDisallowComment(b bool) *PostUpdate {
	pu.mutation.SetDisallowComment(b)
	return pu
}

// SetNillableDisallowComment sets the "disallow_comment" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDisallowComment(b *bool) *PostUpdate {
	if b != nil {
		pu.SetDisallowComment(*b)
	}
	return pu
}

// ClearDisallowComment clears the value of the "disallow_comment" field.
func (pu *PostUpdate) ClearDisallowComment() *PostUpdate {
	pu.mutation.ClearDisallowComment()
	return pu
}

// SetInProgress sets the "in_progress" field.
func (pu *PostUpdate) SetInProgress(b bool) *PostUpdate {
	pu.mutation.SetInProgress(b)
	return pu
}

// SetNillableInProgress sets the "in_progress" field if the given value is not nil.
func (pu *PostUpdate) SetNillableInProgress(b *bool) *PostUpdate {
	if b != nil {
		pu.SetInProgress(*b)
	}
	return pu
}

// ClearInProgress clears the value of the "in_progress" field.
func (pu *PostUpdate) ClearInProgress() *PostUpdate {
	pu.mutation.ClearInProgress()
	return pu
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok && !pu.mutation.UpdateTimeCleared() {
		v := post.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreateTimeCleared() {
		_spec.ClearField(post.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(post.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(post.FieldUpdateTime, field.TypeInt64, value)
	}
	if pu.mutation.UpdateTimeCleared() {
		_spec.ClearField(post.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.DeleteTime(); ok {
		_spec.SetField(post.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(post.FieldDeleteTime, field.TypeInt64, value)
	}
	if pu.mutation.DeleteTimeCleared() {
		_spec.ClearField(post.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if pu.mutation.TitleCleared() {
		_spec.ClearField(post.FieldTitle, field.TypeString)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(post.FieldSlug, field.TypeString, value)
	}
	if pu.mutation.SlugCleared() {
		_spec.ClearField(post.FieldSlug, field.TypeString)
	}
	if value, ok := pu.mutation.MetaKeywords(); ok {
		_spec.SetField(post.FieldMetaKeywords, field.TypeString, value)
	}
	if pu.mutation.MetaKeywordsCleared() {
		_spec.ClearField(post.FieldMetaKeywords, field.TypeString)
	}
	if value, ok := pu.mutation.MetaDescription(); ok {
		_spec.SetField(post.FieldMetaDescription, field.TypeString, value)
	}
	if pu.mutation.MetaDescriptionCleared() {
		_spec.ClearField(post.FieldMetaDescription, field.TypeString)
	}
	if value, ok := pu.mutation.FullPath(); ok {
		_spec.SetField(post.FieldFullPath, field.TypeString, value)
	}
	if pu.mutation.FullPathCleared() {
		_spec.ClearField(post.FieldFullPath, field.TypeString)
	}
	if value, ok := pu.mutation.OriginalContent(); ok {
		_spec.SetField(post.FieldOriginalContent, field.TypeString, value)
	}
	if pu.mutation.OriginalContentCleared() {
		_spec.ClearField(post.FieldOriginalContent, field.TypeString)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if pu.mutation.ContentCleared() {
		_spec.ClearField(post.FieldContent, field.TypeString)
	}
	if value, ok := pu.mutation.Summary(); ok {
		_spec.SetField(post.FieldSummary, field.TypeString, value)
	}
	if pu.mutation.SummaryCleared() {
		_spec.ClearField(post.FieldSummary, field.TypeString)
	}
	if value, ok := pu.mutation.Thumbnail(); ok {
		_spec.SetField(post.FieldThumbnail, field.TypeString, value)
	}
	if pu.mutation.ThumbnailCleared() {
		_spec.ClearField(post.FieldThumbnail, field.TypeString)
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.SetField(post.FieldPassword, field.TypeString, value)
	}
	if pu.mutation.PasswordCleared() {
		_spec.ClearField(post.FieldPassword, field.TypeString)
	}
	if value, ok := pu.mutation.Template(); ok {
		_spec.SetField(post.FieldTemplate, field.TypeString, value)
	}
	if pu.mutation.TemplateCleared() {
		_spec.ClearField(post.FieldTemplate, field.TypeString)
	}
	if value, ok := pu.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedCommentCount(); ok {
		_spec.AddField(post.FieldCommentCount, field.TypeInt32, value)
	}
	if pu.mutation.CommentCountCleared() {
		_spec.ClearField(post.FieldCommentCount, field.TypeInt32)
	}
	if value, ok := pu.mutation.Visits(); ok {
		_spec.SetField(post.FieldVisits, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedVisits(); ok {
		_spec.AddField(post.FieldVisits, field.TypeInt32, value)
	}
	if pu.mutation.VisitsCleared() {
		_spec.ClearField(post.FieldVisits, field.TypeInt32)
	}
	if value, ok := pu.mutation.Likes(); ok {
		_spec.SetField(post.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedLikes(); ok {
		_spec.AddField(post.FieldLikes, field.TypeInt32, value)
	}
	if pu.mutation.LikesCleared() {
		_spec.ClearField(post.FieldLikes, field.TypeInt32)
	}
	if value, ok := pu.mutation.WordCount(); ok {
		_spec.SetField(post.FieldWordCount, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedWordCount(); ok {
		_spec.AddField(post.FieldWordCount, field.TypeInt32, value)
	}
	if pu.mutation.WordCountCleared() {
		_spec.ClearField(post.FieldWordCount, field.TypeInt32)
	}
	if value, ok := pu.mutation.TopPriority(); ok {
		_spec.SetField(post.FieldTopPriority, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedTopPriority(); ok {
		_spec.AddField(post.FieldTopPriority, field.TypeInt32, value)
	}
	if pu.mutation.TopPriorityCleared() {
		_spec.ClearField(post.FieldTopPriority, field.TypeInt32)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(post.FieldStatus, field.TypeInt32, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(post.FieldStatus, field.TypeInt32)
	}
	if value, ok := pu.mutation.EditorType(); ok {
		_spec.SetField(post.FieldEditorType, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedEditorType(); ok {
		_spec.AddField(post.FieldEditorType, field.TypeInt32, value)
	}
	if pu.mutation.EditorTypeCleared() {
		_spec.ClearField(post.FieldEditorType, field.TypeInt32)
	}
	if value, ok := pu.mutation.EditTime(); ok {
		_spec.SetField(post.FieldEditTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedEditTime(); ok {
		_spec.AddField(post.FieldEditTime, field.TypeInt64, value)
	}
	if pu.mutation.EditTimeCleared() {
		_spec.ClearField(post.FieldEditTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.DisallowComment(); ok {
		_spec.SetField(post.FieldDisallowComment, field.TypeBool, value)
	}
	if pu.mutation.DisallowCommentCleared() {
		_spec.ClearField(post.FieldDisallowComment, field.TypeBool)
	}
	if value, ok := pu.mutation.InProgress(); ok {
		_spec.SetField(post.FieldInProgress, field.TypeBool, value)
	}
	if pu.mutation.InProgressCleared() {
		_spec.ClearField(post.FieldInProgress, field.TypeBool)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (puo *PostUpdateOne) SetUpdateTime(i int64) *PostUpdateOne {
	puo.mutation.ResetUpdateTime()
	puo.mutation.SetUpdateTime(i)
	return puo
}

// AddUpdateTime adds i to the "update_time" field.
func (puo *PostUpdateOne) AddUpdateTime(i int64) *PostUpdateOne {
	puo.mutation.AddUpdateTime(i)
	return puo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (puo *PostUpdateOne) ClearUpdateTime() *PostUpdateOne {
	puo.mutation.ClearUpdateTime()
	return puo
}

// SetDeleteTime sets the "delete_time" field.
func (puo *PostUpdateOne) SetDeleteTime(i int64) *PostUpdateOne {
	puo.mutation.ResetDeleteTime()
	puo.mutation.SetDeleteTime(i)
	return puo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDeleteTime(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetDeleteTime(*i)
	}
	return puo
}

// AddDeleteTime adds i to the "delete_time" field.
func (puo *PostUpdateOne) AddDeleteTime(i int64) *PostUpdateOne {
	puo.mutation.AddDeleteTime(i)
	return puo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (puo *PostUpdateOne) ClearDeleteTime() *PostUpdateOne {
	puo.mutation.ClearDeleteTime()
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// ClearTitle clears the value of the "title" field.
func (puo *PostUpdateOne) ClearTitle() *PostUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetSlug sets the "slug" field.
func (puo *PostUpdateOne) SetSlug(s string) *PostUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSlug(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// ClearSlug clears the value of the "slug" field.
func (puo *PostUpdateOne) ClearSlug() *PostUpdateOne {
	puo.mutation.ClearSlug()
	return puo
}

// SetMetaKeywords sets the "meta_keywords" field.
func (puo *PostUpdateOne) SetMetaKeywords(s string) *PostUpdateOne {
	puo.mutation.SetMetaKeywords(s)
	return puo
}

// SetNillableMetaKeywords sets the "meta_keywords" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableMetaKeywords(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetMetaKeywords(*s)
	}
	return puo
}

// ClearMetaKeywords clears the value of the "meta_keywords" field.
func (puo *PostUpdateOne) ClearMetaKeywords() *PostUpdateOne {
	puo.mutation.ClearMetaKeywords()
	return puo
}

// SetMetaDescription sets the "meta_description" field.
func (puo *PostUpdateOne) SetMetaDescription(s string) *PostUpdateOne {
	puo.mutation.SetMetaDescription(s)
	return puo
}

// SetNillableMetaDescription sets the "meta_description" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableMetaDescription(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetMetaDescription(*s)
	}
	return puo
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (puo *PostUpdateOne) ClearMetaDescription() *PostUpdateOne {
	puo.mutation.ClearMetaDescription()
	return puo
}

// SetFullPath sets the "full_path" field.
func (puo *PostUpdateOne) SetFullPath(s string) *PostUpdateOne {
	puo.mutation.SetFullPath(s)
	return puo
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableFullPath(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetFullPath(*s)
	}
	return puo
}

// ClearFullPath clears the value of the "full_path" field.
func (puo *PostUpdateOne) ClearFullPath() *PostUpdateOne {
	puo.mutation.ClearFullPath()
	return puo
}

// SetOriginalContent sets the "original_content" field.
func (puo *PostUpdateOne) SetOriginalContent(s string) *PostUpdateOne {
	puo.mutation.SetOriginalContent(s)
	return puo
}

// SetNillableOriginalContent sets the "original_content" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableOriginalContent(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetOriginalContent(*s)
	}
	return puo
}

// ClearOriginalContent clears the value of the "original_content" field.
func (puo *PostUpdateOne) ClearOriginalContent() *PostUpdateOne {
	puo.mutation.ClearOriginalContent()
	return puo
}

// SetContent sets the "content" field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableContent(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// ClearContent clears the value of the "content" field.
func (puo *PostUpdateOne) ClearContent() *PostUpdateOne {
	puo.mutation.ClearContent()
	return puo
}

// SetSummary sets the "summary" field.
func (puo *PostUpdateOne) SetSummary(s string) *PostUpdateOne {
	puo.mutation.SetSummary(s)
	return puo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSummary(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetSummary(*s)
	}
	return puo
}

// ClearSummary clears the value of the "summary" field.
func (puo *PostUpdateOne) ClearSummary() *PostUpdateOne {
	puo.mutation.ClearSummary()
	return puo
}

// SetThumbnail sets the "thumbnail" field.
func (puo *PostUpdateOne) SetThumbnail(s string) *PostUpdateOne {
	puo.mutation.SetThumbnail(s)
	return puo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableThumbnail(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetThumbnail(*s)
	}
	return puo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (puo *PostUpdateOne) ClearThumbnail() *PostUpdateOne {
	puo.mutation.ClearThumbnail()
	return puo
}

// SetPassword sets the "password" field.
func (puo *PostUpdateOne) SetPassword(s string) *PostUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePassword(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetPassword(*s)
	}
	return puo
}

// ClearPassword clears the value of the "password" field.
func (puo *PostUpdateOne) ClearPassword() *PostUpdateOne {
	puo.mutation.ClearPassword()
	return puo
}

// SetTemplate sets the "template" field.
func (puo *PostUpdateOne) SetTemplate(s string) *PostUpdateOne {
	puo.mutation.SetTemplate(s)
	return puo
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTemplate(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTemplate(*s)
	}
	return puo
}

// ClearTemplate clears the value of the "template" field.
func (puo *PostUpdateOne) ClearTemplate() *PostUpdateOne {
	puo.mutation.ClearTemplate()
	return puo
}

// SetCommentCount sets the "comment_count" field.
func (puo *PostUpdateOne) SetCommentCount(i int32) *PostUpdateOne {
	puo.mutation.ResetCommentCount()
	puo.mutation.SetCommentCount(i)
	return puo
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCommentCount(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetCommentCount(*i)
	}
	return puo
}

// AddCommentCount adds i to the "comment_count" field.
func (puo *PostUpdateOne) AddCommentCount(i int32) *PostUpdateOne {
	puo.mutation.AddCommentCount(i)
	return puo
}

// ClearCommentCount clears the value of the "comment_count" field.
func (puo *PostUpdateOne) ClearCommentCount() *PostUpdateOne {
	puo.mutation.ClearCommentCount()
	return puo
}

// SetVisits sets the "visits" field.
func (puo *PostUpdateOne) SetVisits(i int32) *PostUpdateOne {
	puo.mutation.ResetVisits()
	puo.mutation.SetVisits(i)
	return puo
}

// SetNillableVisits sets the "visits" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableVisits(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetVisits(*i)
	}
	return puo
}

// AddVisits adds i to the "visits" field.
func (puo *PostUpdateOne) AddVisits(i int32) *PostUpdateOne {
	puo.mutation.AddVisits(i)
	return puo
}

// ClearVisits clears the value of the "visits" field.
func (puo *PostUpdateOne) ClearVisits() *PostUpdateOne {
	puo.mutation.ClearVisits()
	return puo
}

// SetLikes sets the "likes" field.
func (puo *PostUpdateOne) SetLikes(i int32) *PostUpdateOne {
	puo.mutation.ResetLikes()
	puo.mutation.SetLikes(i)
	return puo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikes(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetLikes(*i)
	}
	return puo
}

// AddLikes adds i to the "likes" field.
func (puo *PostUpdateOne) AddLikes(i int32) *PostUpdateOne {
	puo.mutation.AddLikes(i)
	return puo
}

// ClearLikes clears the value of the "likes" field.
func (puo *PostUpdateOne) ClearLikes() *PostUpdateOne {
	puo.mutation.ClearLikes()
	return puo
}

// SetWordCount sets the "word_count" field.
func (puo *PostUpdateOne) SetWordCount(i int32) *PostUpdateOne {
	puo.mutation.ResetWordCount()
	puo.mutation.SetWordCount(i)
	return puo
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableWordCount(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetWordCount(*i)
	}
	return puo
}

// AddWordCount adds i to the "word_count" field.
func (puo *PostUpdateOne) AddWordCount(i int32) *PostUpdateOne {
	puo.mutation.AddWordCount(i)
	return puo
}

// ClearWordCount clears the value of the "word_count" field.
func (puo *PostUpdateOne) ClearWordCount() *PostUpdateOne {
	puo.mutation.ClearWordCount()
	return puo
}

// SetTopPriority sets the "top_priority" field.
func (puo *PostUpdateOne) SetTopPriority(i int32) *PostUpdateOne {
	puo.mutation.ResetTopPriority()
	puo.mutation.SetTopPriority(i)
	return puo
}

// SetNillableTopPriority sets the "top_priority" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTopPriority(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetTopPriority(*i)
	}
	return puo
}

// AddTopPriority adds i to the "top_priority" field.
func (puo *PostUpdateOne) AddTopPriority(i int32) *PostUpdateOne {
	puo.mutation.AddTopPriority(i)
	return puo
}

// ClearTopPriority clears the value of the "top_priority" field.
func (puo *PostUpdateOne) ClearTopPriority() *PostUpdateOne {
	puo.mutation.ClearTopPriority()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PostUpdateOne) SetStatus(i int32) *PostUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableStatus(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PostUpdateOne) AddStatus(i int32) *PostUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *PostUpdateOne) ClearStatus() *PostUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetEditorType sets the "editor_type" field.
func (puo *PostUpdateOne) SetEditorType(i int32) *PostUpdateOne {
	puo.mutation.ResetEditorType()
	puo.mutation.SetEditorType(i)
	return puo
}

// SetNillableEditorType sets the "editor_type" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableEditorType(i *int32) *PostUpdateOne {
	if i != nil {
		puo.SetEditorType(*i)
	}
	return puo
}

// AddEditorType adds i to the "editor_type" field.
func (puo *PostUpdateOne) AddEditorType(i int32) *PostUpdateOne {
	puo.mutation.AddEditorType(i)
	return puo
}

// ClearEditorType clears the value of the "editor_type" field.
func (puo *PostUpdateOne) ClearEditorType() *PostUpdateOne {
	puo.mutation.ClearEditorType()
	return puo
}

// SetEditTime sets the "edit_time" field.
func (puo *PostUpdateOne) SetEditTime(i int64) *PostUpdateOne {
	puo.mutation.ResetEditTime()
	puo.mutation.SetEditTime(i)
	return puo
}

// SetNillableEditTime sets the "edit_time" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableEditTime(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetEditTime(*i)
	}
	return puo
}

// AddEditTime adds i to the "edit_time" field.
func (puo *PostUpdateOne) AddEditTime(i int64) *PostUpdateOne {
	puo.mutation.AddEditTime(i)
	return puo
}

// ClearEditTime clears the value of the "edit_time" field.
func (puo *PostUpdateOne) ClearEditTime() *PostUpdateOne {
	puo.mutation.ClearEditTime()
	return puo
}

// SetDisallowComment sets the "disallow_comment" field.
func (puo *PostUpdateOne) SetDisallowComment(b bool) *PostUpdateOne {
	puo.mutation.SetDisallowComment(b)
	return puo
}

// SetNillableDisallowComment sets the "disallow_comment" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDisallowComment(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetDisallowComment(*b)
	}
	return puo
}

// ClearDisallowComment clears the value of the "disallow_comment" field.
func (puo *PostUpdateOne) ClearDisallowComment() *PostUpdateOne {
	puo.mutation.ClearDisallowComment()
	return puo
}

// SetInProgress sets the "in_progress" field.
func (puo *PostUpdateOne) SetInProgress(b bool) *PostUpdateOne {
	puo.mutation.SetInProgress(b)
	return puo
}

// SetNillableInProgress sets the "in_progress" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableInProgress(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetInProgress(*b)
	}
	return puo
}

// ClearInProgress clears the value of the "in_progress" field.
func (puo *PostUpdateOne) ClearInProgress() *PostUpdateOne {
	puo.mutation.ClearInProgress()
	return puo
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok && !puo.mutation.UpdateTimeCleared() {
		v := post.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreateTimeCleared() {
		_spec.ClearField(post.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(post.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(post.FieldUpdateTime, field.TypeInt64, value)
	}
	if puo.mutation.UpdateTimeCleared() {
		_spec.ClearField(post.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.DeleteTime(); ok {
		_spec.SetField(post.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(post.FieldDeleteTime, field.TypeInt64, value)
	}
	if puo.mutation.DeleteTimeCleared() {
		_spec.ClearField(post.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if puo.mutation.TitleCleared() {
		_spec.ClearField(post.FieldTitle, field.TypeString)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(post.FieldSlug, field.TypeString, value)
	}
	if puo.mutation.SlugCleared() {
		_spec.ClearField(post.FieldSlug, field.TypeString)
	}
	if value, ok := puo.mutation.MetaKeywords(); ok {
		_spec.SetField(post.FieldMetaKeywords, field.TypeString, value)
	}
	if puo.mutation.MetaKeywordsCleared() {
		_spec.ClearField(post.FieldMetaKeywords, field.TypeString)
	}
	if value, ok := puo.mutation.MetaDescription(); ok {
		_spec.SetField(post.FieldMetaDescription, field.TypeString, value)
	}
	if puo.mutation.MetaDescriptionCleared() {
		_spec.ClearField(post.FieldMetaDescription, field.TypeString)
	}
	if value, ok := puo.mutation.FullPath(); ok {
		_spec.SetField(post.FieldFullPath, field.TypeString, value)
	}
	if puo.mutation.FullPathCleared() {
		_spec.ClearField(post.FieldFullPath, field.TypeString)
	}
	if value, ok := puo.mutation.OriginalContent(); ok {
		_spec.SetField(post.FieldOriginalContent, field.TypeString, value)
	}
	if puo.mutation.OriginalContentCleared() {
		_spec.ClearField(post.FieldOriginalContent, field.TypeString)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if puo.mutation.ContentCleared() {
		_spec.ClearField(post.FieldContent, field.TypeString)
	}
	if value, ok := puo.mutation.Summary(); ok {
		_spec.SetField(post.FieldSummary, field.TypeString, value)
	}
	if puo.mutation.SummaryCleared() {
		_spec.ClearField(post.FieldSummary, field.TypeString)
	}
	if value, ok := puo.mutation.Thumbnail(); ok {
		_spec.SetField(post.FieldThumbnail, field.TypeString, value)
	}
	if puo.mutation.ThumbnailCleared() {
		_spec.ClearField(post.FieldThumbnail, field.TypeString)
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.SetField(post.FieldPassword, field.TypeString, value)
	}
	if puo.mutation.PasswordCleared() {
		_spec.ClearField(post.FieldPassword, field.TypeString)
	}
	if value, ok := puo.mutation.Template(); ok {
		_spec.SetField(post.FieldTemplate, field.TypeString, value)
	}
	if puo.mutation.TemplateCleared() {
		_spec.ClearField(post.FieldTemplate, field.TypeString)
	}
	if value, ok := puo.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedCommentCount(); ok {
		_spec.AddField(post.FieldCommentCount, field.TypeInt32, value)
	}
	if puo.mutation.CommentCountCleared() {
		_spec.ClearField(post.FieldCommentCount, field.TypeInt32)
	}
	if value, ok := puo.mutation.Visits(); ok {
		_spec.SetField(post.FieldVisits, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedVisits(); ok {
		_spec.AddField(post.FieldVisits, field.TypeInt32, value)
	}
	if puo.mutation.VisitsCleared() {
		_spec.ClearField(post.FieldVisits, field.TypeInt32)
	}
	if value, ok := puo.mutation.Likes(); ok {
		_spec.SetField(post.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedLikes(); ok {
		_spec.AddField(post.FieldLikes, field.TypeInt32, value)
	}
	if puo.mutation.LikesCleared() {
		_spec.ClearField(post.FieldLikes, field.TypeInt32)
	}
	if value, ok := puo.mutation.WordCount(); ok {
		_spec.SetField(post.FieldWordCount, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedWordCount(); ok {
		_spec.AddField(post.FieldWordCount, field.TypeInt32, value)
	}
	if puo.mutation.WordCountCleared() {
		_spec.ClearField(post.FieldWordCount, field.TypeInt32)
	}
	if value, ok := puo.mutation.TopPriority(); ok {
		_spec.SetField(post.FieldTopPriority, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedTopPriority(); ok {
		_spec.AddField(post.FieldTopPriority, field.TypeInt32, value)
	}
	if puo.mutation.TopPriorityCleared() {
		_spec.ClearField(post.FieldTopPriority, field.TypeInt32)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(post.FieldStatus, field.TypeInt32, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(post.FieldStatus, field.TypeInt32)
	}
	if value, ok := puo.mutation.EditorType(); ok {
		_spec.SetField(post.FieldEditorType, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedEditorType(); ok {
		_spec.AddField(post.FieldEditorType, field.TypeInt32, value)
	}
	if puo.mutation.EditorTypeCleared() {
		_spec.ClearField(post.FieldEditorType, field.TypeInt32)
	}
	if value, ok := puo.mutation.EditTime(); ok {
		_spec.SetField(post.FieldEditTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedEditTime(); ok {
		_spec.AddField(post.FieldEditTime, field.TypeInt64, value)
	}
	if puo.mutation.EditTimeCleared() {
		_spec.ClearField(post.FieldEditTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.DisallowComment(); ok {
		_spec.SetField(post.FieldDisallowComment, field.TypeBool, value)
	}
	if puo.mutation.DisallowCommentCleared() {
		_spec.ClearField(post.FieldDisallowComment, field.TypeBool)
	}
	if value, ok := puo.mutation.InProgress(); ok {
		_spec.SetField(post.FieldInProgress, field.TypeBool, value)
	}
	if puo.mutation.InProgressCleared() {
		_spec.ClearField(post.FieldInProgress, field.TypeBool)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
