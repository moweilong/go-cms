// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/attachment"
	"go-cms/app/core/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks     []Hook
	mutation  *AttachmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (au *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AttachmentUpdate) SetUpdateTime(i int64) *AttachmentUpdate {
	au.mutation.ResetUpdateTime()
	au.mutation.SetUpdateTime(i)
	return au
}

// AddUpdateTime adds i to the "update_time" field.
func (au *AttachmentUpdate) AddUpdateTime(i int64) *AttachmentUpdate {
	au.mutation.AddUpdateTime(i)
	return au
}

// ClearUpdateTime clears the value of the "update_time" field.
func (au *AttachmentUpdate) ClearUpdateTime() *AttachmentUpdate {
	au.mutation.ClearUpdateTime()
	return au
}

// SetDeleteTime sets the "delete_time" field.
func (au *AttachmentUpdate) SetDeleteTime(i int64) *AttachmentUpdate {
	au.mutation.ResetDeleteTime()
	au.mutation.SetDeleteTime(i)
	return au
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableDeleteTime(i *int64) *AttachmentUpdate {
	if i != nil {
		au.SetDeleteTime(*i)
	}
	return au
}

// AddDeleteTime adds i to the "delete_time" field.
func (au *AttachmentUpdate) AddDeleteTime(i int64) *AttachmentUpdate {
	au.mutation.AddDeleteTime(i)
	return au
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (au *AttachmentUpdate) ClearDeleteTime() *AttachmentUpdate {
	au.mutation.ClearDeleteTime()
	return au
}

// SetName sets the "name" field.
func (au *AttachmentUpdate) SetName(s string) *AttachmentUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableName(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AttachmentUpdate) ClearName() *AttachmentUpdate {
	au.mutation.ClearName()
	return au
}

// SetPath sets the "path" field.
func (au *AttachmentUpdate) SetPath(s string) *AttachmentUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillablePath(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetPath(*s)
	}
	return au
}

// ClearPath clears the value of the "path" field.
func (au *AttachmentUpdate) ClearPath() *AttachmentUpdate {
	au.mutation.ClearPath()
	return au
}

// SetFileKey sets the "file_key" field.
func (au *AttachmentUpdate) SetFileKey(s string) *AttachmentUpdate {
	au.mutation.SetFileKey(s)
	return au
}

// SetNillableFileKey sets the "file_key" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableFileKey(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetFileKey(*s)
	}
	return au
}

// ClearFileKey clears the value of the "file_key" field.
func (au *AttachmentUpdate) ClearFileKey() *AttachmentUpdate {
	au.mutation.ClearFileKey()
	return au
}

// SetThumbnail sets the "thumbnail" field.
func (au *AttachmentUpdate) SetThumbnail(s string) *AttachmentUpdate {
	au.mutation.SetThumbnail(s)
	return au
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableThumbnail(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetThumbnail(*s)
	}
	return au
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (au *AttachmentUpdate) ClearThumbnail() *AttachmentUpdate {
	au.mutation.ClearThumbnail()
	return au
}

// SetMediaType sets the "media_type" field.
func (au *AttachmentUpdate) SetMediaType(s string) *AttachmentUpdate {
	au.mutation.SetMediaType(s)
	return au
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableMediaType(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetMediaType(*s)
	}
	return au
}

// ClearMediaType clears the value of the "media_type" field.
func (au *AttachmentUpdate) ClearMediaType() *AttachmentUpdate {
	au.mutation.ClearMediaType()
	return au
}

// SetSuffix sets the "suffix" field.
func (au *AttachmentUpdate) SetSuffix(s string) *AttachmentUpdate {
	au.mutation.SetSuffix(s)
	return au
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableSuffix(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetSuffix(*s)
	}
	return au
}

// ClearSuffix clears the value of the "suffix" field.
func (au *AttachmentUpdate) ClearSuffix() *AttachmentUpdate {
	au.mutation.ClearSuffix()
	return au
}

// SetWidth sets the "width" field.
func (au *AttachmentUpdate) SetWidth(i int32) *AttachmentUpdate {
	au.mutation.ResetWidth()
	au.mutation.SetWidth(i)
	return au
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableWidth(i *int32) *AttachmentUpdate {
	if i != nil {
		au.SetWidth(*i)
	}
	return au
}

// AddWidth adds i to the "width" field.
func (au *AttachmentUpdate) AddWidth(i int32) *AttachmentUpdate {
	au.mutation.AddWidth(i)
	return au
}

// ClearWidth clears the value of the "width" field.
func (au *AttachmentUpdate) ClearWidth() *AttachmentUpdate {
	au.mutation.ClearWidth()
	return au
}

// SetHeight sets the "height" field.
func (au *AttachmentUpdate) SetHeight(i int32) *AttachmentUpdate {
	au.mutation.ResetHeight()
	au.mutation.SetHeight(i)
	return au
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableHeight(i *int32) *AttachmentUpdate {
	if i != nil {
		au.SetHeight(*i)
	}
	return au
}

// AddHeight adds i to the "height" field.
func (au *AttachmentUpdate) AddHeight(i int32) *AttachmentUpdate {
	au.mutation.AddHeight(i)
	return au
}

// ClearHeight clears the value of the "height" field.
func (au *AttachmentUpdate) ClearHeight() *AttachmentUpdate {
	au.mutation.ClearHeight()
	return au
}

// SetSize sets the "Size" field.
func (au *AttachmentUpdate) SetSize(u uint64) *AttachmentUpdate {
	au.mutation.ResetSize()
	au.mutation.SetSize(u)
	return au
}

// SetNillableSize sets the "Size" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableSize(u *uint64) *AttachmentUpdate {
	if u != nil {
		au.SetSize(*u)
	}
	return au
}

// AddSize adds u to the "Size" field.
func (au *AttachmentUpdate) AddSize(u int64) *AttachmentUpdate {
	au.mutation.AddSize(u)
	return au
}

// ClearSize clears the value of the "Size" field.
func (au *AttachmentUpdate) ClearSize() *AttachmentUpdate {
	au.mutation.ClearSize()
	return au
}

// SetType sets the "type" field.
func (au *AttachmentUpdate) SetType(i int32) *AttachmentUpdate {
	au.mutation.ResetType()
	au.mutation.SetType(i)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableType(i *int32) *AttachmentUpdate {
	if i != nil {
		au.SetType(*i)
	}
	return au
}

// AddType adds i to the "type" field.
func (au *AttachmentUpdate) AddType(i int32) *AttachmentUpdate {
	au.mutation.AddType(i)
	return au
}

// ClearType clears the value of the "type" field.
func (au *AttachmentUpdate) ClearType() *AttachmentUpdate {
	au.mutation.ClearType()
	return au
}

// Mutation returns the AttachmentMutation object of the builder.
func (au *AttachmentUpdate) Mutation() *AttachmentMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AttachmentUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok && !au.mutation.UpdateTimeCleared() {
		v := attachment.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttachmentUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := attachment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attachment.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.FileKey(); ok {
		if err := attachment.FileKeyValidator(v); err != nil {
			return &ValidationError{Name: "file_key", err: fmt.Errorf(`ent: validator failed for field "Attachment.file_key": %w`, err)}
		}
	}
	if v, ok := au.mutation.Thumbnail(); ok {
		if err := attachment.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Attachment.thumbnail": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AttachmentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttachmentUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreateTimeCleared() {
		_spec.ClearField(attachment.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(attachment.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedUpdateTime(); ok {
		_spec.AddField(attachment.FieldUpdateTime, field.TypeInt64, value)
	}
	if au.mutation.UpdateTimeCleared() {
		_spec.ClearField(attachment.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := au.mutation.DeleteTime(); ok {
		_spec.SetField(attachment.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedDeleteTime(); ok {
		_spec.AddField(attachment.FieldDeleteTime, field.TypeInt64, value)
	}
	if au.mutation.DeleteTimeCleared() {
		_spec.ClearField(attachment.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(attachment.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(attachment.FieldName, field.TypeString)
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
	}
	if au.mutation.PathCleared() {
		_spec.ClearField(attachment.FieldPath, field.TypeString)
	}
	if value, ok := au.mutation.FileKey(); ok {
		_spec.SetField(attachment.FieldFileKey, field.TypeString, value)
	}
	if au.mutation.FileKeyCleared() {
		_spec.ClearField(attachment.FieldFileKey, field.TypeString)
	}
	if value, ok := au.mutation.Thumbnail(); ok {
		_spec.SetField(attachment.FieldThumbnail, field.TypeString, value)
	}
	if au.mutation.ThumbnailCleared() {
		_spec.ClearField(attachment.FieldThumbnail, field.TypeString)
	}
	if value, ok := au.mutation.MediaType(); ok {
		_spec.SetField(attachment.FieldMediaType, field.TypeString, value)
	}
	if au.mutation.MediaTypeCleared() {
		_spec.ClearField(attachment.FieldMediaType, field.TypeString)
	}
	if value, ok := au.mutation.Suffix(); ok {
		_spec.SetField(attachment.FieldSuffix, field.TypeString, value)
	}
	if au.mutation.SuffixCleared() {
		_spec.ClearField(attachment.FieldSuffix, field.TypeString)
	}
	if value, ok := au.mutation.Width(); ok {
		_spec.SetField(attachment.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedWidth(); ok {
		_spec.AddField(attachment.FieldWidth, field.TypeInt32, value)
	}
	if au.mutation.WidthCleared() {
		_spec.ClearField(attachment.FieldWidth, field.TypeInt32)
	}
	if value, ok := au.mutation.Height(); ok {
		_spec.SetField(attachment.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedHeight(); ok {
		_spec.AddField(attachment.FieldHeight, field.TypeInt32, value)
	}
	if au.mutation.HeightCleared() {
		_spec.ClearField(attachment.FieldHeight, field.TypeInt32)
	}
	if value, ok := au.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeUint64, value)
	}
	if value, ok := au.mutation.AddedSize(); ok {
		_spec.AddField(attachment.FieldSize, field.TypeUint64, value)
	}
	if au.mutation.SizeCleared() {
		_spec.ClearField(attachment.FieldSize, field.TypeUint64)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedType(); ok {
		_spec.AddField(attachment.FieldType, field.TypeInt32, value)
	}
	if au.mutation.TypeCleared() {
		_spec.ClearField(attachment.FieldType, field.TypeInt32)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AttachmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (auo *AttachmentUpdateOne) SetUpdateTime(i int64) *AttachmentUpdateOne {
	auo.mutation.ResetUpdateTime()
	auo.mutation.SetUpdateTime(i)
	return auo
}

// AddUpdateTime adds i to the "update_time" field.
func (auo *AttachmentUpdateOne) AddUpdateTime(i int64) *AttachmentUpdateOne {
	auo.mutation.AddUpdateTime(i)
	return auo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (auo *AttachmentUpdateOne) ClearUpdateTime() *AttachmentUpdateOne {
	auo.mutation.ClearUpdateTime()
	return auo
}

// SetDeleteTime sets the "delete_time" field.
func (auo *AttachmentUpdateOne) SetDeleteTime(i int64) *AttachmentUpdateOne {
	auo.mutation.ResetDeleteTime()
	auo.mutation.SetDeleteTime(i)
	return auo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableDeleteTime(i *int64) *AttachmentUpdateOne {
	if i != nil {
		auo.SetDeleteTime(*i)
	}
	return auo
}

// AddDeleteTime adds i to the "delete_time" field.
func (auo *AttachmentUpdateOne) AddDeleteTime(i int64) *AttachmentUpdateOne {
	auo.mutation.AddDeleteTime(i)
	return auo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (auo *AttachmentUpdateOne) ClearDeleteTime() *AttachmentUpdateOne {
	auo.mutation.ClearDeleteTime()
	return auo
}

// SetName sets the "name" field.
func (auo *AttachmentUpdateOne) SetName(s string) *AttachmentUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableName(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AttachmentUpdateOne) ClearName() *AttachmentUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetPath sets the "path" field.
func (auo *AttachmentUpdateOne) SetPath(s string) *AttachmentUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillablePath(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetPath(*s)
	}
	return auo
}

// ClearPath clears the value of the "path" field.
func (auo *AttachmentUpdateOne) ClearPath() *AttachmentUpdateOne {
	auo.mutation.ClearPath()
	return auo
}

// SetFileKey sets the "file_key" field.
func (auo *AttachmentUpdateOne) SetFileKey(s string) *AttachmentUpdateOne {
	auo.mutation.SetFileKey(s)
	return auo
}

// SetNillableFileKey sets the "file_key" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableFileKey(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetFileKey(*s)
	}
	return auo
}

// ClearFileKey clears the value of the "file_key" field.
func (auo *AttachmentUpdateOne) ClearFileKey() *AttachmentUpdateOne {
	auo.mutation.ClearFileKey()
	return auo
}

// SetThumbnail sets the "thumbnail" field.
func (auo *AttachmentUpdateOne) SetThumbnail(s string) *AttachmentUpdateOne {
	auo.mutation.SetThumbnail(s)
	return auo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableThumbnail(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetThumbnail(*s)
	}
	return auo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (auo *AttachmentUpdateOne) ClearThumbnail() *AttachmentUpdateOne {
	auo.mutation.ClearThumbnail()
	return auo
}

// SetMediaType sets the "media_type" field.
func (auo *AttachmentUpdateOne) SetMediaType(s string) *AttachmentUpdateOne {
	auo.mutation.SetMediaType(s)
	return auo
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableMediaType(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetMediaType(*s)
	}
	return auo
}

// ClearMediaType clears the value of the "media_type" field.
func (auo *AttachmentUpdateOne) ClearMediaType() *AttachmentUpdateOne {
	auo.mutation.ClearMediaType()
	return auo
}

// SetSuffix sets the "suffix" field.
func (auo *AttachmentUpdateOne) SetSuffix(s string) *AttachmentUpdateOne {
	auo.mutation.SetSuffix(s)
	return auo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableSuffix(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetSuffix(*s)
	}
	return auo
}

// ClearSuffix clears the value of the "suffix" field.
func (auo *AttachmentUpdateOne) ClearSuffix() *AttachmentUpdateOne {
	auo.mutation.ClearSuffix()
	return auo
}

// SetWidth sets the "width" field.
func (auo *AttachmentUpdateOne) SetWidth(i int32) *AttachmentUpdateOne {
	auo.mutation.ResetWidth()
	auo.mutation.SetWidth(i)
	return auo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableWidth(i *int32) *AttachmentUpdateOne {
	if i != nil {
		auo.SetWidth(*i)
	}
	return auo
}

// AddWidth adds i to the "width" field.
func (auo *AttachmentUpdateOne) AddWidth(i int32) *AttachmentUpdateOne {
	auo.mutation.AddWidth(i)
	return auo
}

// ClearWidth clears the value of the "width" field.
func (auo *AttachmentUpdateOne) ClearWidth() *AttachmentUpdateOne {
	auo.mutation.ClearWidth()
	return auo
}

// SetHeight sets the "height" field.
func (auo *AttachmentUpdateOne) SetHeight(i int32) *AttachmentUpdateOne {
	auo.mutation.ResetHeight()
	auo.mutation.SetHeight(i)
	return auo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableHeight(i *int32) *AttachmentUpdateOne {
	if i != nil {
		auo.SetHeight(*i)
	}
	return auo
}

// AddHeight adds i to the "height" field.
func (auo *AttachmentUpdateOne) AddHeight(i int32) *AttachmentUpdateOne {
	auo.mutation.AddHeight(i)
	return auo
}

// ClearHeight clears the value of the "height" field.
func (auo *AttachmentUpdateOne) ClearHeight() *AttachmentUpdateOne {
	auo.mutation.ClearHeight()
	return auo
}

// SetSize sets the "Size" field.
func (auo *AttachmentUpdateOne) SetSize(u uint64) *AttachmentUpdateOne {
	auo.mutation.ResetSize()
	auo.mutation.SetSize(u)
	return auo
}

// SetNillableSize sets the "Size" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableSize(u *uint64) *AttachmentUpdateOne {
	if u != nil {
		auo.SetSize(*u)
	}
	return auo
}

// AddSize adds u to the "Size" field.
func (auo *AttachmentUpdateOne) AddSize(u int64) *AttachmentUpdateOne {
	auo.mutation.AddSize(u)
	return auo
}

// ClearSize clears the value of the "Size" field.
func (auo *AttachmentUpdateOne) ClearSize() *AttachmentUpdateOne {
	auo.mutation.ClearSize()
	return auo
}

// SetType sets the "type" field.
func (auo *AttachmentUpdateOne) SetType(i int32) *AttachmentUpdateOne {
	auo.mutation.ResetType()
	auo.mutation.SetType(i)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableType(i *int32) *AttachmentUpdateOne {
	if i != nil {
		auo.SetType(*i)
	}
	return auo
}

// AddType adds i to the "type" field.
func (auo *AttachmentUpdateOne) AddType(i int32) *AttachmentUpdateOne {
	auo.mutation.AddType(i)
	return auo
}

// ClearType clears the value of the "type" field.
func (auo *AttachmentUpdateOne) ClearType() *AttachmentUpdateOne {
	auo.mutation.ClearType()
	return auo
}

// Mutation returns the AttachmentMutation object of the builder.
func (auo *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return auo.mutation
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (auo *AttachmentUpdateOne) Where(ps ...predicate.Attachment) *AttachmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attachment entity.
func (auo *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AttachmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok && !auo.mutation.UpdateTimeCleared() {
		v := attachment.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttachmentUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := attachment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attachment.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.FileKey(); ok {
		if err := attachment.FileKeyValidator(v); err != nil {
			return &ValidationError{Name: "file_key", err: fmt.Errorf(`ent: validator failed for field "Attachment.file_key": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Thumbnail(); ok {
		if err := attachment.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Attachment.thumbnail": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AttachmentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttachmentUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreateTimeCleared() {
		_spec.ClearField(attachment.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(attachment.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(attachment.FieldUpdateTime, field.TypeInt64, value)
	}
	if auo.mutation.UpdateTimeCleared() {
		_spec.ClearField(attachment.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := auo.mutation.DeleteTime(); ok {
		_spec.SetField(attachment.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(attachment.FieldDeleteTime, field.TypeInt64, value)
	}
	if auo.mutation.DeleteTimeCleared() {
		_spec.ClearField(attachment.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(attachment.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(attachment.FieldName, field.TypeString)
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
	}
	if auo.mutation.PathCleared() {
		_spec.ClearField(attachment.FieldPath, field.TypeString)
	}
	if value, ok := auo.mutation.FileKey(); ok {
		_spec.SetField(attachment.FieldFileKey, field.TypeString, value)
	}
	if auo.mutation.FileKeyCleared() {
		_spec.ClearField(attachment.FieldFileKey, field.TypeString)
	}
	if value, ok := auo.mutation.Thumbnail(); ok {
		_spec.SetField(attachment.FieldThumbnail, field.TypeString, value)
	}
	if auo.mutation.ThumbnailCleared() {
		_spec.ClearField(attachment.FieldThumbnail, field.TypeString)
	}
	if value, ok := auo.mutation.MediaType(); ok {
		_spec.SetField(attachment.FieldMediaType, field.TypeString, value)
	}
	if auo.mutation.MediaTypeCleared() {
		_spec.ClearField(attachment.FieldMediaType, field.TypeString)
	}
	if value, ok := auo.mutation.Suffix(); ok {
		_spec.SetField(attachment.FieldSuffix, field.TypeString, value)
	}
	if auo.mutation.SuffixCleared() {
		_spec.ClearField(attachment.FieldSuffix, field.TypeString)
	}
	if value, ok := auo.mutation.Width(); ok {
		_spec.SetField(attachment.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedWidth(); ok {
		_spec.AddField(attachment.FieldWidth, field.TypeInt32, value)
	}
	if auo.mutation.WidthCleared() {
		_spec.ClearField(attachment.FieldWidth, field.TypeInt32)
	}
	if value, ok := auo.mutation.Height(); ok {
		_spec.SetField(attachment.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedHeight(); ok {
		_spec.AddField(attachment.FieldHeight, field.TypeInt32, value)
	}
	if auo.mutation.HeightCleared() {
		_spec.ClearField(attachment.FieldHeight, field.TypeInt32)
	}
	if value, ok := auo.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.AddedSize(); ok {
		_spec.AddField(attachment.FieldSize, field.TypeUint64, value)
	}
	if auo.mutation.SizeCleared() {
		_spec.ClearField(attachment.FieldSize, field.TypeUint64)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedType(); ok {
		_spec.AddField(attachment.FieldType, field.TypeInt32, value)
	}
	if auo.mutation.TypeCleared() {
		_spec.ClearField(attachment.FieldType, field.TypeInt32)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Attachment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
