// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/link"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkCreate is the builder for creating a Link entity.
type LinkCreate struct {
	config
	mutation *LinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (lc *LinkCreate) SetCreateTime(i int64) *LinkCreate {
	lc.mutation.SetCreateTime(i)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableCreateTime(i *int64) *LinkCreate {
	if i != nil {
		lc.SetCreateTime(*i)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *LinkCreate) SetUpdateTime(i int64) *LinkCreate {
	lc.mutation.SetUpdateTime(i)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableUpdateTime(i *int64) *LinkCreate {
	if i != nil {
		lc.SetUpdateTime(*i)
	}
	return lc
}

// SetDeleteTime sets the "delete_time" field.
func (lc *LinkCreate) SetDeleteTime(i int64) *LinkCreate {
	lc.mutation.SetDeleteTime(i)
	return lc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableDeleteTime(i *int64) *LinkCreate {
	if i != nil {
		lc.SetDeleteTime(*i)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LinkCreate) SetName(s string) *LinkCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lc *LinkCreate) SetNillableName(s *string) *LinkCreate {
	if s != nil {
		lc.SetName(*s)
	}
	return lc
}

// SetURL sets the "url" field.
func (lc *LinkCreate) SetURL(s string) *LinkCreate {
	lc.mutation.SetURL(s)
	return lc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (lc *LinkCreate) SetNillableURL(s *string) *LinkCreate {
	if s != nil {
		lc.SetURL(*s)
	}
	return lc
}

// SetLogo sets the "logo" field.
func (lc *LinkCreate) SetLogo(s string) *LinkCreate {
	lc.mutation.SetLogo(s)
	return lc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (lc *LinkCreate) SetNillableLogo(s *string) *LinkCreate {
	if s != nil {
		lc.SetLogo(*s)
	}
	return lc
}

// SetDescription sets the "description" field.
func (lc *LinkCreate) SetDescription(s string) *LinkCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lc *LinkCreate) SetNillableDescription(s *string) *LinkCreate {
	if s != nil {
		lc.SetDescription(*s)
	}
	return lc
}

// SetTeam sets the "team" field.
func (lc *LinkCreate) SetTeam(s string) *LinkCreate {
	lc.mutation.SetTeam(s)
	return lc
}

// SetNillableTeam sets the "team" field if the given value is not nil.
func (lc *LinkCreate) SetNillableTeam(s *string) *LinkCreate {
	if s != nil {
		lc.SetTeam(*s)
	}
	return lc
}

// SetPriority sets the "priority" field.
func (lc *LinkCreate) SetPriority(i int32) *LinkCreate {
	lc.mutation.SetPriority(i)
	return lc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (lc *LinkCreate) SetNillablePriority(i *int32) *LinkCreate {
	if i != nil {
		lc.SetPriority(*i)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LinkCreate) SetID(u uint32) *LinkCreate {
	lc.mutation.SetID(u)
	return lc
}

// Mutation returns the LinkMutation object of the builder.
func (lc *LinkCreate) Mutation() *LinkMutation {
	return lc.mutation
}

// Save creates the Link in the database.
func (lc *LinkCreate) Save(ctx context.Context) (*Link, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LinkCreate) SaveX(ctx context.Context) *Link {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LinkCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LinkCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LinkCreate) defaults() {
	if _, ok := lc.mutation.CreateTime(); !ok {
		v := link.DefaultCreateTime()
		lc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LinkCreate) check() error {
	if v, ok := lc.mutation.Name(); ok {
		if err := link.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Link.name": %w`, err)}
		}
	}
	if v, ok := lc.mutation.URL(); ok {
		if err := link.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Link.url": %w`, err)}
		}
	}
	if v, ok := lc.mutation.Logo(); ok {
		if err := link.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`ent: validator failed for field "Link.logo": %w`, err)}
		}
	}
	if v, ok := lc.mutation.ID(); ok {
		if err := link.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Link.id": %w`, err)}
		}
	}
	return nil
}

func (lc *LinkCreate) sqlSave(ctx context.Context) (*Link, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LinkCreate) createSpec() (*Link, *sqlgraph.CreateSpec) {
	var (
		_node = &Link{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(link.Table, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.SetField(link.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.SetField(link.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := lc.mutation.DeleteTime(); ok {
		_spec.SetField(link.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(link.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := lc.mutation.URL(); ok {
		_spec.SetField(link.FieldURL, field.TypeString, value)
		_node.URL = &value
	}
	if value, ok := lc.mutation.Logo(); ok {
		_spec.SetField(link.FieldLogo, field.TypeString, value)
		_node.Logo = &value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(link.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := lc.mutation.Team(); ok {
		_spec.SetField(link.FieldTeam, field.TypeString, value)
		_node.Team = &value
	}
	if value, ok := lc.mutation.Priority(); ok {
		_spec.SetField(link.FieldPriority, field.TypeInt32, value)
		_node.Priority = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lc *LinkCreate) OnConflict(opts ...sql.ConflictOption) *LinkUpsertOne {
	lc.conflict = opts
	return &LinkUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LinkCreate) OnConflictColumns(columns ...string) *LinkUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertOne{
		create: lc,
	}
}

type (
	// LinkUpsertOne is the builder for "upsert"-ing
	//  one Link node.
	LinkUpsertOne struct {
		create *LinkCreate
	}

	// LinkUpsert is the "OnConflict" setter.
	LinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *LinkUpsert) SetUpdateTime(v int64) *LinkUpsert {
	u.Set(link.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LinkUpsert) UpdateUpdateTime() *LinkUpsert {
	u.SetExcluded(link.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *LinkUpsert) AddUpdateTime(v int64) *LinkUpsert {
	u.Add(link.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *LinkUpsert) ClearUpdateTime() *LinkUpsert {
	u.SetNull(link.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *LinkUpsert) SetDeleteTime(v int64) *LinkUpsert {
	u.Set(link.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *LinkUpsert) UpdateDeleteTime() *LinkUpsert {
	u.SetExcluded(link.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *LinkUpsert) AddDeleteTime(v int64) *LinkUpsert {
	u.Add(link.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *LinkUpsert) ClearDeleteTime() *LinkUpsert {
	u.SetNull(link.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *LinkUpsert) SetName(v string) *LinkUpsert {
	u.Set(link.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsert) UpdateName() *LinkUpsert {
	u.SetExcluded(link.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *LinkUpsert) ClearName() *LinkUpsert {
	u.SetNull(link.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *LinkUpsert) SetURL(v string) *LinkUpsert {
	u.Set(link.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *LinkUpsert) UpdateURL() *LinkUpsert {
	u.SetExcluded(link.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *LinkUpsert) ClearURL() *LinkUpsert {
	u.SetNull(link.FieldURL)
	return u
}

// SetLogo sets the "logo" field.
func (u *LinkUpsert) SetLogo(v string) *LinkUpsert {
	u.Set(link.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *LinkUpsert) UpdateLogo() *LinkUpsert {
	u.SetExcluded(link.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *LinkUpsert) ClearLogo() *LinkUpsert {
	u.SetNull(link.FieldLogo)
	return u
}

// SetDescription sets the "description" field.
func (u *LinkUpsert) SetDescription(v string) *LinkUpsert {
	u.Set(link.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LinkUpsert) UpdateDescription() *LinkUpsert {
	u.SetExcluded(link.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *LinkUpsert) ClearDescription() *LinkUpsert {
	u.SetNull(link.FieldDescription)
	return u
}

// SetTeam sets the "team" field.
func (u *LinkUpsert) SetTeam(v string) *LinkUpsert {
	u.Set(link.FieldTeam, v)
	return u
}

// UpdateTeam sets the "team" field to the value that was provided on create.
func (u *LinkUpsert) UpdateTeam() *LinkUpsert {
	u.SetExcluded(link.FieldTeam)
	return u
}

// ClearTeam clears the value of the "team" field.
func (u *LinkUpsert) ClearTeam() *LinkUpsert {
	u.SetNull(link.FieldTeam)
	return u
}

// SetPriority sets the "priority" field.
func (u *LinkUpsert) SetPriority(v int32) *LinkUpsert {
	u.Set(link.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *LinkUpsert) UpdatePriority() *LinkUpsert {
	u.SetExcluded(link.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *LinkUpsert) AddPriority(v int32) *LinkUpsert {
	u.Add(link.FieldPriority, v)
	return u
}

// ClearPriority clears the value of the "priority" field.
func (u *LinkUpsert) ClearPriority() *LinkUpsert {
	u.SetNull(link.FieldPriority)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(link.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LinkUpsertOne) UpdateNewValues() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(link.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(link.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LinkUpsertOne) Ignore() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertOne) DoNothing() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreate.OnConflict
// documentation for more info.
func (u *LinkUpsertOne) Update(set func(*LinkUpsert)) *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LinkUpsertOne) SetUpdateTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *LinkUpsertOne) AddUpdateTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateUpdateTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *LinkUpsertOne) ClearUpdateTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *LinkUpsertOne) SetDeleteTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *LinkUpsertOne) AddDeleteTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateDeleteTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *LinkUpsertOne) ClearDeleteTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *LinkUpsertOne) SetName(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateName() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *LinkUpsertOne) ClearName() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearName()
	})
}

// SetURL sets the "url" field.
func (u *LinkUpsertOne) SetURL(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateURL() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *LinkUpsertOne) ClearURL() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearURL()
	})
}

// SetLogo sets the "logo" field.
func (u *LinkUpsertOne) SetLogo(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateLogo() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *LinkUpsertOne) ClearLogo() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearLogo()
	})
}

// SetDescription sets the "description" field.
func (u *LinkUpsertOne) SetDescription(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateDescription() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *LinkUpsertOne) ClearDescription() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearDescription()
	})
}

// SetTeam sets the "team" field.
func (u *LinkUpsertOne) SetTeam(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetTeam(v)
	})
}

// UpdateTeam sets the "team" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateTeam() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateTeam()
	})
}

// ClearTeam clears the value of the "team" field.
func (u *LinkUpsertOne) ClearTeam() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearTeam()
	})
}

// SetPriority sets the "priority" field.
func (u *LinkUpsertOne) SetPriority(v int32) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *LinkUpsertOne) AddPriority(v int32) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdatePriority() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *LinkUpsertOne) ClearPriority() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearPriority()
	})
}

// Exec executes the query.
func (u *LinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LinkUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LinkUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LinkCreateBulk is the builder for creating many Link entities in bulk.
type LinkCreateBulk struct {
	config
	err      error
	builders []*LinkCreate
	conflict []sql.ConflictOption
}

// Save creates the Link entities in the database.
func (lcb *LinkCreateBulk) Save(ctx context.Context) ([]*Link, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Link, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LinkCreateBulk) SaveX(ctx context.Context) []*Link {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LinkCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LinkCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lcb *LinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *LinkUpsertBulk {
	lcb.conflict = opts
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LinkCreateBulk) OnConflictColumns(columns ...string) *LinkUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// LinkUpsertBulk is the builder for "upsert"-ing
// a bulk of Link nodes.
type LinkUpsertBulk struct {
	create *LinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(link.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LinkUpsertBulk) UpdateNewValues() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(link.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(link.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LinkUpsertBulk) Ignore() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertBulk) DoNothing() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreateBulk.OnConflict
// documentation for more info.
func (u *LinkUpsertBulk) Update(set func(*LinkUpsert)) *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LinkUpsertBulk) SetUpdateTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *LinkUpsertBulk) AddUpdateTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateUpdateTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *LinkUpsertBulk) ClearUpdateTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *LinkUpsertBulk) SetDeleteTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *LinkUpsertBulk) AddDeleteTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateDeleteTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *LinkUpsertBulk) ClearDeleteTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *LinkUpsertBulk) SetName(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateName() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *LinkUpsertBulk) ClearName() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearName()
	})
}

// SetURL sets the "url" field.
func (u *LinkUpsertBulk) SetURL(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateURL() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *LinkUpsertBulk) ClearURL() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearURL()
	})
}

// SetLogo sets the "logo" field.
func (u *LinkUpsertBulk) SetLogo(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateLogo() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *LinkUpsertBulk) ClearLogo() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearLogo()
	})
}

// SetDescription sets the "description" field.
func (u *LinkUpsertBulk) SetDescription(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateDescription() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *LinkUpsertBulk) ClearDescription() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearDescription()
	})
}

// SetTeam sets the "team" field.
func (u *LinkUpsertBulk) SetTeam(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetTeam(v)
	})
}

// UpdateTeam sets the "team" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateTeam() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateTeam()
	})
}

// ClearTeam clears the value of the "team" field.
func (u *LinkUpsertBulk) ClearTeam() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearTeam()
	})
}

// SetPriority sets the "priority" field.
func (u *LinkUpsertBulk) SetPriority(v int32) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *LinkUpsertBulk) AddPriority(v int32) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdatePriority() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *LinkUpsertBulk) ClearPriority() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearPriority()
	})
}

// Exec executes the query.
func (u *LinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
