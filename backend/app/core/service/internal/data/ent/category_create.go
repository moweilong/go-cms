// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/category"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryCreate is the builder for creating a Category entity.
type CategoryCreate struct {
	config
	mutation *CategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cc *CategoryCreate) SetCreateTime(i int64) *CategoryCreate {
	cc.mutation.SetCreateTime(i)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableCreateTime(i *int64) *CategoryCreate {
	if i != nil {
		cc.SetCreateTime(*i)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CategoryCreate) SetUpdateTime(i int64) *CategoryCreate {
	cc.mutation.SetUpdateTime(i)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableUpdateTime(i *int64) *CategoryCreate {
	if i != nil {
		cc.SetUpdateTime(*i)
	}
	return cc
}

// SetDeleteTime sets the "delete_time" field.
func (cc *CategoryCreate) SetDeleteTime(i int64) *CategoryCreate {
	cc.mutation.SetDeleteTime(i)
	return cc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableDeleteTime(i *int64) *CategoryCreate {
	if i != nil {
		cc.SetDeleteTime(*i)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CategoryCreate) SetName(s string) *CategoryCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableName(s *string) *CategoryCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetSlug sets the "slug" field.
func (cc *CategoryCreate) SetSlug(s string) *CategoryCreate {
	cc.mutation.SetSlug(s)
	return cc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableSlug(s *string) *CategoryCreate {
	if s != nil {
		cc.SetSlug(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *CategoryCreate) SetDescription(s string) *CategoryCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableDescription(s *string) *CategoryCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetThumbnail sets the "thumbnail" field.
func (cc *CategoryCreate) SetThumbnail(s string) *CategoryCreate {
	cc.mutation.SetThumbnail(s)
	return cc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableThumbnail(s *string) *CategoryCreate {
	if s != nil {
		cc.SetThumbnail(*s)
	}
	return cc
}

// SetPassword sets the "password" field.
func (cc *CategoryCreate) SetPassword(s string) *CategoryCreate {
	cc.mutation.SetPassword(s)
	return cc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cc *CategoryCreate) SetNillablePassword(s *string) *CategoryCreate {
	if s != nil {
		cc.SetPassword(*s)
	}
	return cc
}

// SetFullPath sets the "full_path" field.
func (cc *CategoryCreate) SetFullPath(s string) *CategoryCreate {
	cc.mutation.SetFullPath(s)
	return cc
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableFullPath(s *string) *CategoryCreate {
	if s != nil {
		cc.SetFullPath(*s)
	}
	return cc
}

// SetParentID sets the "parent_id" field.
func (cc *CategoryCreate) SetParentID(u uint32) *CategoryCreate {
	cc.mutation.SetParentID(u)
	return cc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cc *CategoryCreate) SetNillableParentID(u *uint32) *CategoryCreate {
	if u != nil {
		cc.SetParentID(*u)
	}
	return cc
}

// SetPriority sets the "priority" field.
func (cc *CategoryCreate) SetPriority(i int32) *CategoryCreate {
	cc.mutation.SetPriority(i)
	return cc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cc *CategoryCreate) SetNillablePriority(i *int32) *CategoryCreate {
	if i != nil {
		cc.SetPriority(*i)
	}
	return cc
}

// SetPostCount sets the "post_count" field.
func (cc *CategoryCreate) SetPostCount(u uint32) *CategoryCreate {
	cc.mutation.SetPostCount(u)
	return cc
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (cc *CategoryCreate) SetNillablePostCount(u *uint32) *CategoryCreate {
	if u != nil {
		cc.SetPostCount(*u)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CategoryCreate) SetID(u uint32) *CategoryCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CategoryMutation object of the builder.
func (cc *CategoryCreate) Mutation() *CategoryMutation {
	return cc.mutation
}

// Save creates the Category in the database.
func (cc *CategoryCreate) Save(ctx context.Context) (*Category, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CategoryCreate) SaveX(ctx context.Context) *Category {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CategoryCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CategoryCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CategoryCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := category.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CategoryCreate) check() error {
	if v, ok := cc.mutation.Name(); ok {
		if err := category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Category.name": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Description(); ok {
		if err := category.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Category.description": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Thumbnail(); ok {
		if err := category.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Category.thumbnail": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := category.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Category.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CategoryCreate) sqlSave(ctx context.Context) (*Category, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CategoryCreate) createSpec() (*Category, *sqlgraph.CreateSpec) {
	var (
		_node = &Category{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(category.Table, sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(category.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(category.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := cc.mutation.DeleteTime(); ok {
		_spec.SetField(category.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := cc.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
		_node.Slug = &value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := cc.mutation.Thumbnail(); ok {
		_spec.SetField(category.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = &value
	}
	if value, ok := cc.mutation.Password(); ok {
		_spec.SetField(category.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := cc.mutation.FullPath(); ok {
		_spec.SetField(category.FieldFullPath, field.TypeString, value)
		_node.FullPath = &value
	}
	if value, ok := cc.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeUint32, value)
		_node.ParentID = &value
	}
	if value, ok := cc.mutation.Priority(); ok {
		_spec.SetField(category.FieldPriority, field.TypeInt32, value)
		_node.Priority = &value
	}
	if value, ok := cc.mutation.PostCount(); ok {
		_spec.SetField(category.FieldPostCount, field.TypeUint32, value)
		_node.PostCount = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Category.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CategoryUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cc *CategoryCreate) OnConflict(opts ...sql.ConflictOption) *CategoryUpsertOne {
	cc.conflict = opts
	return &CategoryUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CategoryCreate) OnConflictColumns(columns ...string) *CategoryUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CategoryUpsertOne{
		create: cc,
	}
}

type (
	// CategoryUpsertOne is the builder for "upsert"-ing
	//  one Category node.
	CategoryUpsertOne struct {
		create *CategoryCreate
	}

	// CategoryUpsert is the "OnConflict" setter.
	CategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CategoryUpsert) SetUpdateTime(v int64) *CategoryUpsert {
	u.Set(category.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateUpdateTime() *CategoryUpsert {
	u.SetExcluded(category.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *CategoryUpsert) AddUpdateTime(v int64) *CategoryUpsert {
	u.Add(category.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CategoryUpsert) ClearUpdateTime() *CategoryUpsert {
	u.SetNull(category.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *CategoryUpsert) SetDeleteTime(v int64) *CategoryUpsert {
	u.Set(category.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateDeleteTime() *CategoryUpsert {
	u.SetExcluded(category.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *CategoryUpsert) AddDeleteTime(v int64) *CategoryUpsert {
	u.Add(category.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *CategoryUpsert) ClearDeleteTime() *CategoryUpsert {
	u.SetNull(category.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *CategoryUpsert) SetName(v string) *CategoryUpsert {
	u.Set(category.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateName() *CategoryUpsert {
	u.SetExcluded(category.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CategoryUpsert) ClearName() *CategoryUpsert {
	u.SetNull(category.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *CategoryUpsert) SetSlug(v string) *CategoryUpsert {
	u.Set(category.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateSlug() *CategoryUpsert {
	u.SetExcluded(category.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *CategoryUpsert) ClearSlug() *CategoryUpsert {
	u.SetNull(category.FieldSlug)
	return u
}

// SetDescription sets the "description" field.
func (u *CategoryUpsert) SetDescription(v string) *CategoryUpsert {
	u.Set(category.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateDescription() *CategoryUpsert {
	u.SetExcluded(category.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CategoryUpsert) ClearDescription() *CategoryUpsert {
	u.SetNull(category.FieldDescription)
	return u
}

// SetThumbnail sets the "thumbnail" field.
func (u *CategoryUpsert) SetThumbnail(v string) *CategoryUpsert {
	u.Set(category.FieldThumbnail, v)
	return u
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateThumbnail() *CategoryUpsert {
	u.SetExcluded(category.FieldThumbnail)
	return u
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *CategoryUpsert) ClearThumbnail() *CategoryUpsert {
	u.SetNull(category.FieldThumbnail)
	return u
}

// SetPassword sets the "password" field.
func (u *CategoryUpsert) SetPassword(v string) *CategoryUpsert {
	u.Set(category.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *CategoryUpsert) UpdatePassword() *CategoryUpsert {
	u.SetExcluded(category.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *CategoryUpsert) ClearPassword() *CategoryUpsert {
	u.SetNull(category.FieldPassword)
	return u
}

// SetFullPath sets the "full_path" field.
func (u *CategoryUpsert) SetFullPath(v string) *CategoryUpsert {
	u.Set(category.FieldFullPath, v)
	return u
}

// UpdateFullPath sets the "full_path" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateFullPath() *CategoryUpsert {
	u.SetExcluded(category.FieldFullPath)
	return u
}

// ClearFullPath clears the value of the "full_path" field.
func (u *CategoryUpsert) ClearFullPath() *CategoryUpsert {
	u.SetNull(category.FieldFullPath)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CategoryUpsert) SetParentID(v uint32) *CategoryUpsert {
	u.Set(category.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateParentID() *CategoryUpsert {
	u.SetExcluded(category.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *CategoryUpsert) AddParentID(v uint32) *CategoryUpsert {
	u.Add(category.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CategoryUpsert) ClearParentID() *CategoryUpsert {
	u.SetNull(category.FieldParentID)
	return u
}

// SetPriority sets the "priority" field.
func (u *CategoryUpsert) SetPriority(v int32) *CategoryUpsert {
	u.Set(category.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *CategoryUpsert) UpdatePriority() *CategoryUpsert {
	u.SetExcluded(category.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *CategoryUpsert) AddPriority(v int32) *CategoryUpsert {
	u.Add(category.FieldPriority, v)
	return u
}

// ClearPriority clears the value of the "priority" field.
func (u *CategoryUpsert) ClearPriority() *CategoryUpsert {
	u.SetNull(category.FieldPriority)
	return u
}

// SetPostCount sets the "post_count" field.
func (u *CategoryUpsert) SetPostCount(v uint32) *CategoryUpsert {
	u.Set(category.FieldPostCount, v)
	return u
}

// UpdatePostCount sets the "post_count" field to the value that was provided on create.
func (u *CategoryUpsert) UpdatePostCount() *CategoryUpsert {
	u.SetExcluded(category.FieldPostCount)
	return u
}

// AddPostCount adds v to the "post_count" field.
func (u *CategoryUpsert) AddPostCount(v uint32) *CategoryUpsert {
	u.Add(category.FieldPostCount, v)
	return u
}

// ClearPostCount clears the value of the "post_count" field.
func (u *CategoryUpsert) ClearPostCount() *CategoryUpsert {
	u.SetNull(category.FieldPostCount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(category.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CategoryUpsertOne) UpdateNewValues() *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(category.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(category.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Category.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CategoryUpsertOne) Ignore() *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CategoryUpsertOne) DoNothing() *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CategoryCreate.OnConflict
// documentation for more info.
func (u *CategoryUpsertOne) Update(set func(*CategoryUpsert)) *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CategoryUpsertOne) SetUpdateTime(v int64) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *CategoryUpsertOne) AddUpdateTime(v int64) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateUpdateTime() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CategoryUpsertOne) ClearUpdateTime() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *CategoryUpsertOne) SetDeleteTime(v int64) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *CategoryUpsertOne) AddDeleteTime(v int64) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateDeleteTime() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *CategoryUpsertOne) ClearDeleteTime() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *CategoryUpsertOne) SetName(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateName() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CategoryUpsertOne) ClearName() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearName()
	})
}

// SetSlug sets the "slug" field.
func (u *CategoryUpsertOne) SetSlug(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateSlug() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *CategoryUpsertOne) ClearSlug() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearSlug()
	})
}

// SetDescription sets the "description" field.
func (u *CategoryUpsertOne) SetDescription(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateDescription() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CategoryUpsertOne) ClearDescription() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearDescription()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *CategoryUpsertOne) SetThumbnail(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateThumbnail() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *CategoryUpsertOne) ClearThumbnail() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearThumbnail()
	})
}

// SetPassword sets the "password" field.
func (u *CategoryUpsertOne) SetPassword(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdatePassword() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *CategoryUpsertOne) ClearPassword() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearPassword()
	})
}

// SetFullPath sets the "full_path" field.
func (u *CategoryUpsertOne) SetFullPath(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetFullPath(v)
	})
}

// UpdateFullPath sets the "full_path" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateFullPath() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateFullPath()
	})
}

// ClearFullPath clears the value of the "full_path" field.
func (u *CategoryUpsertOne) ClearFullPath() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearFullPath()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CategoryUpsertOne) SetParentID(v uint32) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CategoryUpsertOne) AddParentID(v uint32) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateParentID() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CategoryUpsertOne) ClearParentID() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearParentID()
	})
}

// SetPriority sets the "priority" field.
func (u *CategoryUpsertOne) SetPriority(v int32) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *CategoryUpsertOne) AddPriority(v int32) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdatePriority() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *CategoryUpsertOne) ClearPriority() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearPriority()
	})
}

// SetPostCount sets the "post_count" field.
func (u *CategoryUpsertOne) SetPostCount(v uint32) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetPostCount(v)
	})
}

// AddPostCount adds v to the "post_count" field.
func (u *CategoryUpsertOne) AddPostCount(v uint32) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.AddPostCount(v)
	})
}

// UpdatePostCount sets the "post_count" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdatePostCount() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdatePostCount()
	})
}

// ClearPostCount clears the value of the "post_count" field.
func (u *CategoryUpsertOne) ClearPostCount() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearPostCount()
	})
}

// Exec executes the query.
func (u *CategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CategoryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CategoryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CategoryCreateBulk is the builder for creating many Category entities in bulk.
type CategoryCreateBulk struct {
	config
	err      error
	builders []*CategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Category entities in the database.
func (ccb *CategoryCreateBulk) Save(ctx context.Context) ([]*Category, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Category, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CategoryCreateBulk) SaveX(ctx context.Context) []*Category {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CategoryCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Category.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CategoryUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ccb *CategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *CategoryUpsertBulk {
	ccb.conflict = opts
	return &CategoryUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CategoryCreateBulk) OnConflictColumns(columns ...string) *CategoryUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CategoryUpsertBulk{
		create: ccb,
	}
}

// CategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Category nodes.
type CategoryUpsertBulk struct {
	create *CategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(category.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CategoryUpsertBulk) UpdateNewValues() *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(category.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(category.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CategoryUpsertBulk) Ignore() *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CategoryUpsertBulk) DoNothing() *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CategoryCreateBulk.OnConflict
// documentation for more info.
func (u *CategoryUpsertBulk) Update(set func(*CategoryUpsert)) *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CategoryUpsertBulk) SetUpdateTime(v int64) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *CategoryUpsertBulk) AddUpdateTime(v int64) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateUpdateTime() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CategoryUpsertBulk) ClearUpdateTime() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *CategoryUpsertBulk) SetDeleteTime(v int64) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *CategoryUpsertBulk) AddDeleteTime(v int64) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateDeleteTime() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *CategoryUpsertBulk) ClearDeleteTime() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *CategoryUpsertBulk) SetName(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateName() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CategoryUpsertBulk) ClearName() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearName()
	})
}

// SetSlug sets the "slug" field.
func (u *CategoryUpsertBulk) SetSlug(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateSlug() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *CategoryUpsertBulk) ClearSlug() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearSlug()
	})
}

// SetDescription sets the "description" field.
func (u *CategoryUpsertBulk) SetDescription(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateDescription() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CategoryUpsertBulk) ClearDescription() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearDescription()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *CategoryUpsertBulk) SetThumbnail(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateThumbnail() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *CategoryUpsertBulk) ClearThumbnail() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearThumbnail()
	})
}

// SetPassword sets the "password" field.
func (u *CategoryUpsertBulk) SetPassword(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdatePassword() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *CategoryUpsertBulk) ClearPassword() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearPassword()
	})
}

// SetFullPath sets the "full_path" field.
func (u *CategoryUpsertBulk) SetFullPath(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetFullPath(v)
	})
}

// UpdateFullPath sets the "full_path" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateFullPath() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateFullPath()
	})
}

// ClearFullPath clears the value of the "full_path" field.
func (u *CategoryUpsertBulk) ClearFullPath() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearFullPath()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CategoryUpsertBulk) SetParentID(v uint32) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CategoryUpsertBulk) AddParentID(v uint32) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateParentID() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CategoryUpsertBulk) ClearParentID() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearParentID()
	})
}

// SetPriority sets the "priority" field.
func (u *CategoryUpsertBulk) SetPriority(v int32) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *CategoryUpsertBulk) AddPriority(v int32) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdatePriority() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *CategoryUpsertBulk) ClearPriority() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearPriority()
	})
}

// SetPostCount sets the "post_count" field.
func (u *CategoryUpsertBulk) SetPostCount(v uint32) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetPostCount(v)
	})
}

// AddPostCount adds v to the "post_count" field.
func (u *CategoryUpsertBulk) AddPostCount(v uint32) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.AddPostCount(v)
	})
}

// UpdatePostCount sets the "post_count" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdatePostCount() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdatePostCount()
	})
}

// ClearPostCount clears the value of the "post_count" field.
func (u *CategoryUpsertBulk) ClearPostCount() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearPostCount()
	})
}

// Exec executes the query.
func (u *CategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
