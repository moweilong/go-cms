// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-cms/app/core/service/internal/data/ent/attachment"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Attachment is the model entity for the Attachment schema.
type Attachment struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *int64 `json:"delete_time,omitempty"`
	// 文件名
	Name *string `json:"name,omitempty"`
	// 文件路径
	Path *string `json:"path,omitempty"`
	// 文件键
	FileKey *string `json:"file_key,omitempty"`
	// 缩略图
	Thumbnail *string `json:"thumbnail,omitempty"`
	// 媒体类型
	MediaType *string `json:"media_type,omitempty"`
	// 后缀
	Suffix *string `json:"suffix,omitempty"`
	// 图片宽
	Width *int32 `json:"width,omitempty"`
	// 图片高
	Height *int32 `json:"height,omitempty"`
	// 文件大小
	Size *uint64 `json:"Size,omitempty"`
	// 类型
	Type         *int32 `json:"type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID, attachment.FieldCreateTime, attachment.FieldUpdateTime, attachment.FieldDeleteTime, attachment.FieldWidth, attachment.FieldHeight, attachment.FieldSize, attachment.FieldType:
			values[i] = new(sql.NullInt64)
		case attachment.FieldName, attachment.FieldPath, attachment.FieldFileKey, attachment.FieldThumbnail, attachment.FieldMediaType, attachment.FieldSuffix:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attachment fields.
func (a *Attachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint32(value.Int64)
		case attachment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = new(int64)
				*a.CreateTime = value.Int64
			}
		case attachment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = new(int64)
				*a.UpdateTime = value.Int64
			}
		case attachment.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				a.DeleteTime = new(int64)
				*a.DeleteTime = value.Int64
			}
		case attachment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = new(string)
				*a.Name = value.String
			}
		case attachment.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				a.Path = new(string)
				*a.Path = value.String
			}
		case attachment.FieldFileKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_key", values[i])
			} else if value.Valid {
				a.FileKey = new(string)
				*a.FileKey = value.String
			}
		case attachment.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				a.Thumbnail = new(string)
				*a.Thumbnail = value.String
			}
		case attachment.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				a.MediaType = new(string)
				*a.MediaType = value.String
			}
		case attachment.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				a.Suffix = new(string)
				*a.Suffix = value.String
			}
		case attachment.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				a.Width = new(int32)
				*a.Width = int32(value.Int64)
			}
		case attachment.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				a.Height = new(int32)
				*a.Height = int32(value.Int64)
			}
		case attachment.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Size", values[i])
			} else if value.Valid {
				a.Size = new(uint64)
				*a.Size = uint64(value.Int64)
			}
		case attachment.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = new(int32)
				*a.Type = int32(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attachment.
// This includes values selected through modifiers, order, etc.
func (a *Attachment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Attachment.
// Note that you need to call Attachment.Unwrap() before calling this method if this Attachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attachment) Update() *AttachmentUpdateOne {
	return NewAttachmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Attachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attachment) Unwrap() *Attachment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attachment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attachment) String() string {
	var builder strings.Builder
	builder.WriteString("Attachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	if v := a.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Path; v != nil {
		builder.WriteString("path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.FileKey; v != nil {
		builder.WriteString("file_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Thumbnail; v != nil {
		builder.WriteString("thumbnail=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.MediaType; v != nil {
		builder.WriteString("media_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Suffix; v != nil {
		builder.WriteString("suffix=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Width; v != nil {
		builder.WriteString("width=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Height; v != nil {
		builder.WriteString("height=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Size; v != nil {
		builder.WriteString("Size=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Attachments is a parsable slice of Attachment.
type Attachments []*Attachment
