// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/category"
	"go-cms/app/core/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *CategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CategoryUpdate builder.
func (cu *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CategoryUpdate) SetUpdateTime(i int64) *CategoryUpdate {
	cu.mutation.ResetUpdateTime()
	cu.mutation.SetUpdateTime(i)
	return cu
}

// AddUpdateTime adds i to the "update_time" field.
func (cu *CategoryUpdate) AddUpdateTime(i int64) *CategoryUpdate {
	cu.mutation.AddUpdateTime(i)
	return cu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (cu *CategoryUpdate) ClearUpdateTime() *CategoryUpdate {
	cu.mutation.ClearUpdateTime()
	return cu
}

// SetDeleteTime sets the "delete_time" field.
func (cu *CategoryUpdate) SetDeleteTime(i int64) *CategoryUpdate {
	cu.mutation.ResetDeleteTime()
	cu.mutation.SetDeleteTime(i)
	return cu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableDeleteTime(i *int64) *CategoryUpdate {
	if i != nil {
		cu.SetDeleteTime(*i)
	}
	return cu
}

// AddDeleteTime adds i to the "delete_time" field.
func (cu *CategoryUpdate) AddDeleteTime(i int64) *CategoryUpdate {
	cu.mutation.AddDeleteTime(i)
	return cu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cu *CategoryUpdate) ClearDeleteTime() *CategoryUpdate {
	cu.mutation.ClearDeleteTime()
	return cu
}

// SetName sets the "name" field.
func (cu *CategoryUpdate) SetName(s string) *CategoryUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableName(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CategoryUpdate) ClearName() *CategoryUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CategoryUpdate) SetSlug(s string) *CategoryUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableSlug(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetSlug(*s)
	}
	return cu
}

// ClearSlug clears the value of the "slug" field.
func (cu *CategoryUpdate) ClearSlug() *CategoryUpdate {
	cu.mutation.ClearSlug()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CategoryUpdate) SetDescription(s string) *CategoryUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableDescription(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CategoryUpdate) ClearDescription() *CategoryUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetThumbnail sets the "thumbnail" field.
func (cu *CategoryUpdate) SetThumbnail(s string) *CategoryUpdate {
	cu.mutation.SetThumbnail(s)
	return cu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableThumbnail(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetThumbnail(*s)
	}
	return cu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (cu *CategoryUpdate) ClearThumbnail() *CategoryUpdate {
	cu.mutation.ClearThumbnail()
	return cu
}

// SetPassword sets the "password" field.
func (cu *CategoryUpdate) SetPassword(s string) *CategoryUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillablePassword(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetPassword(*s)
	}
	return cu
}

// ClearPassword clears the value of the "password" field.
func (cu *CategoryUpdate) ClearPassword() *CategoryUpdate {
	cu.mutation.ClearPassword()
	return cu
}

// SetFullPath sets the "full_path" field.
func (cu *CategoryUpdate) SetFullPath(s string) *CategoryUpdate {
	cu.mutation.SetFullPath(s)
	return cu
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableFullPath(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetFullPath(*s)
	}
	return cu
}

// ClearFullPath clears the value of the "full_path" field.
func (cu *CategoryUpdate) ClearFullPath() *CategoryUpdate {
	cu.mutation.ClearFullPath()
	return cu
}

// SetParentID sets the "parent_id" field.
func (cu *CategoryUpdate) SetParentID(u uint32) *CategoryUpdate {
	cu.mutation.ResetParentID()
	cu.mutation.SetParentID(u)
	return cu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableParentID(u *uint32) *CategoryUpdate {
	if u != nil {
		cu.SetParentID(*u)
	}
	return cu
}

// AddParentID adds u to the "parent_id" field.
func (cu *CategoryUpdate) AddParentID(u int32) *CategoryUpdate {
	cu.mutation.AddParentID(u)
	return cu
}

// ClearParentID clears the value of the "parent_id" field.
func (cu *CategoryUpdate) ClearParentID() *CategoryUpdate {
	cu.mutation.ClearParentID()
	return cu
}

// SetPriority sets the "priority" field.
func (cu *CategoryUpdate) SetPriority(i int32) *CategoryUpdate {
	cu.mutation.ResetPriority()
	cu.mutation.SetPriority(i)
	return cu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillablePriority(i *int32) *CategoryUpdate {
	if i != nil {
		cu.SetPriority(*i)
	}
	return cu
}

// AddPriority adds i to the "priority" field.
func (cu *CategoryUpdate) AddPriority(i int32) *CategoryUpdate {
	cu.mutation.AddPriority(i)
	return cu
}

// ClearPriority clears the value of the "priority" field.
func (cu *CategoryUpdate) ClearPriority() *CategoryUpdate {
	cu.mutation.ClearPriority()
	return cu
}

// SetPostCount sets the "post_count" field.
func (cu *CategoryUpdate) SetPostCount(u uint32) *CategoryUpdate {
	cu.mutation.ResetPostCount()
	cu.mutation.SetPostCount(u)
	return cu
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillablePostCount(u *uint32) *CategoryUpdate {
	if u != nil {
		cu.SetPostCount(*u)
	}
	return cu
}

// AddPostCount adds u to the "post_count" field.
func (cu *CategoryUpdate) AddPostCount(u int32) *CategoryUpdate {
	cu.mutation.AddPostCount(u)
	return cu
}

// ClearPostCount clears the value of the "post_count" field.
func (cu *CategoryUpdate) ClearPostCount() *CategoryUpdate {
	cu.mutation.ClearPostCount()
	return cu
}

// Mutation returns the CategoryMutation object of the builder.
func (cu *CategoryUpdate) Mutation() *CategoryMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CategoryUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CategoryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CategoryUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok && !cu.mutation.UpdateTimeCleared() {
		v := category.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CategoryUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Category.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := category.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Category.description": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Thumbnail(); ok {
		if err := category.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Category.thumbnail": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CategoryUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreateTimeCleared() {
		_spec.ClearField(category.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(category.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(category.FieldUpdateTime, field.TypeInt64, value)
	}
	if cu.mutation.UpdateTimeCleared() {
		_spec.ClearField(category.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.DeleteTime(); ok {
		_spec.SetField(category.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(category.FieldDeleteTime, field.TypeInt64, value)
	}
	if cu.mutation.DeleteTimeCleared() {
		_spec.ClearField(category.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(category.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
	}
	if cu.mutation.SlugCleared() {
		_spec.ClearField(category.FieldSlug, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(category.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Thumbnail(); ok {
		_spec.SetField(category.FieldThumbnail, field.TypeString, value)
	}
	if cu.mutation.ThumbnailCleared() {
		_spec.ClearField(category.FieldThumbnail, field.TypeString)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(category.FieldPassword, field.TypeString, value)
	}
	if cu.mutation.PasswordCleared() {
		_spec.ClearField(category.FieldPassword, field.TypeString)
	}
	if value, ok := cu.mutation.FullPath(); ok {
		_spec.SetField(category.FieldFullPath, field.TypeString, value)
	}
	if cu.mutation.FullPathCleared() {
		_spec.ClearField(category.FieldFullPath, field.TypeString)
	}
	if value, ok := cu.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedParentID(); ok {
		_spec.AddField(category.FieldParentID, field.TypeUint32, value)
	}
	if cu.mutation.ParentIDCleared() {
		_spec.ClearField(category.FieldParentID, field.TypeUint32)
	}
	if value, ok := cu.mutation.Priority(); ok {
		_spec.SetField(category.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedPriority(); ok {
		_spec.AddField(category.FieldPriority, field.TypeInt32, value)
	}
	if cu.mutation.PriorityCleared() {
		_spec.ClearField(category.FieldPriority, field.TypeInt32)
	}
	if value, ok := cu.mutation.PostCount(); ok {
		_spec.SetField(category.FieldPostCount, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedPostCount(); ok {
		_spec.AddField(category.FieldPostCount, field.TypeUint32, value)
	}
	if cu.mutation.PostCountCleared() {
		_spec.ClearField(category.FieldPostCount, field.TypeUint32)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CategoryUpdateOne) SetUpdateTime(i int64) *CategoryUpdateOne {
	cuo.mutation.ResetUpdateTime()
	cuo.mutation.SetUpdateTime(i)
	return cuo
}

// AddUpdateTime adds i to the "update_time" field.
func (cuo *CategoryUpdateOne) AddUpdateTime(i int64) *CategoryUpdateOne {
	cuo.mutation.AddUpdateTime(i)
	return cuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (cuo *CategoryUpdateOne) ClearUpdateTime() *CategoryUpdateOne {
	cuo.mutation.ClearUpdateTime()
	return cuo
}

// SetDeleteTime sets the "delete_time" field.
func (cuo *CategoryUpdateOne) SetDeleteTime(i int64) *CategoryUpdateOne {
	cuo.mutation.ResetDeleteTime()
	cuo.mutation.SetDeleteTime(i)
	return cuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableDeleteTime(i *int64) *CategoryUpdateOne {
	if i != nil {
		cuo.SetDeleteTime(*i)
	}
	return cuo
}

// AddDeleteTime adds i to the "delete_time" field.
func (cuo *CategoryUpdateOne) AddDeleteTime(i int64) *CategoryUpdateOne {
	cuo.mutation.AddDeleteTime(i)
	return cuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cuo *CategoryUpdateOne) ClearDeleteTime() *CategoryUpdateOne {
	cuo.mutation.ClearDeleteTime()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CategoryUpdateOne) SetName(s string) *CategoryUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableName(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CategoryUpdateOne) ClearName() *CategoryUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CategoryUpdateOne) SetSlug(s string) *CategoryUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableSlug(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetSlug(*s)
	}
	return cuo
}

// ClearSlug clears the value of the "slug" field.
func (cuo *CategoryUpdateOne) ClearSlug() *CategoryUpdateOne {
	cuo.mutation.ClearSlug()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CategoryUpdateOne) SetDescription(s string) *CategoryUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableDescription(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CategoryUpdateOne) ClearDescription() *CategoryUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetThumbnail sets the "thumbnail" field.
func (cuo *CategoryUpdateOne) SetThumbnail(s string) *CategoryUpdateOne {
	cuo.mutation.SetThumbnail(s)
	return cuo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableThumbnail(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetThumbnail(*s)
	}
	return cuo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (cuo *CategoryUpdateOne) ClearThumbnail() *CategoryUpdateOne {
	cuo.mutation.ClearThumbnail()
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CategoryUpdateOne) SetPassword(s string) *CategoryUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillablePassword(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetPassword(*s)
	}
	return cuo
}

// ClearPassword clears the value of the "password" field.
func (cuo *CategoryUpdateOne) ClearPassword() *CategoryUpdateOne {
	cuo.mutation.ClearPassword()
	return cuo
}

// SetFullPath sets the "full_path" field.
func (cuo *CategoryUpdateOne) SetFullPath(s string) *CategoryUpdateOne {
	cuo.mutation.SetFullPath(s)
	return cuo
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableFullPath(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetFullPath(*s)
	}
	return cuo
}

// ClearFullPath clears the value of the "full_path" field.
func (cuo *CategoryUpdateOne) ClearFullPath() *CategoryUpdateOne {
	cuo.mutation.ClearFullPath()
	return cuo
}

// SetParentID sets the "parent_id" field.
func (cuo *CategoryUpdateOne) SetParentID(u uint32) *CategoryUpdateOne {
	cuo.mutation.ResetParentID()
	cuo.mutation.SetParentID(u)
	return cuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableParentID(u *uint32) *CategoryUpdateOne {
	if u != nil {
		cuo.SetParentID(*u)
	}
	return cuo
}

// AddParentID adds u to the "parent_id" field.
func (cuo *CategoryUpdateOne) AddParentID(u int32) *CategoryUpdateOne {
	cuo.mutation.AddParentID(u)
	return cuo
}

// ClearParentID clears the value of the "parent_id" field.
func (cuo *CategoryUpdateOne) ClearParentID() *CategoryUpdateOne {
	cuo.mutation.ClearParentID()
	return cuo
}

// SetPriority sets the "priority" field.
func (cuo *CategoryUpdateOne) SetPriority(i int32) *CategoryUpdateOne {
	cuo.mutation.ResetPriority()
	cuo.mutation.SetPriority(i)
	return cuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillablePriority(i *int32) *CategoryUpdateOne {
	if i != nil {
		cuo.SetPriority(*i)
	}
	return cuo
}

// AddPriority adds i to the "priority" field.
func (cuo *CategoryUpdateOne) AddPriority(i int32) *CategoryUpdateOne {
	cuo.mutation.AddPriority(i)
	return cuo
}

// ClearPriority clears the value of the "priority" field.
func (cuo *CategoryUpdateOne) ClearPriority() *CategoryUpdateOne {
	cuo.mutation.ClearPriority()
	return cuo
}

// SetPostCount sets the "post_count" field.
func (cuo *CategoryUpdateOne) SetPostCount(u uint32) *CategoryUpdateOne {
	cuo.mutation.ResetPostCount()
	cuo.mutation.SetPostCount(u)
	return cuo
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillablePostCount(u *uint32) *CategoryUpdateOne {
	if u != nil {
		cuo.SetPostCount(*u)
	}
	return cuo
}

// AddPostCount adds u to the "post_count" field.
func (cuo *CategoryUpdateOne) AddPostCount(u int32) *CategoryUpdateOne {
	cuo.mutation.AddPostCount(u)
	return cuo
}

// ClearPostCount clears the value of the "post_count" field.
func (cuo *CategoryUpdateOne) ClearPostCount() *CategoryUpdateOne {
	cuo.mutation.ClearPostCount()
	return cuo
}

// Mutation returns the CategoryMutation object of the builder.
func (cuo *CategoryUpdateOne) Mutation() *CategoryMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (cuo *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Category entity.
func (cuo *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CategoryUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok && !cuo.mutation.UpdateTimeCleared() {
		v := category.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CategoryUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Category.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := category.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Category.description": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Thumbnail(); ok {
		if err := category.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Category.thumbnail": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CategoryUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreateTimeCleared() {
		_spec.ClearField(category.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(category.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(category.FieldUpdateTime, field.TypeInt64, value)
	}
	if cuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(category.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.DeleteTime(); ok {
		_spec.SetField(category.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(category.FieldDeleteTime, field.TypeInt64, value)
	}
	if cuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(category.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(category.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.SetField(category.FieldSlug, field.TypeString, value)
	}
	if cuo.mutation.SlugCleared() {
		_spec.ClearField(category.FieldSlug, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(category.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(category.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Thumbnail(); ok {
		_spec.SetField(category.FieldThumbnail, field.TypeString, value)
	}
	if cuo.mutation.ThumbnailCleared() {
		_spec.ClearField(category.FieldThumbnail, field.TypeString)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(category.FieldPassword, field.TypeString, value)
	}
	if cuo.mutation.PasswordCleared() {
		_spec.ClearField(category.FieldPassword, field.TypeString)
	}
	if value, ok := cuo.mutation.FullPath(); ok {
		_spec.SetField(category.FieldFullPath, field.TypeString, value)
	}
	if cuo.mutation.FullPathCleared() {
		_spec.ClearField(category.FieldFullPath, field.TypeString)
	}
	if value, ok := cuo.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedParentID(); ok {
		_spec.AddField(category.FieldParentID, field.TypeUint32, value)
	}
	if cuo.mutation.ParentIDCleared() {
		_spec.ClearField(category.FieldParentID, field.TypeUint32)
	}
	if value, ok := cuo.mutation.Priority(); ok {
		_spec.SetField(category.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedPriority(); ok {
		_spec.AddField(category.FieldPriority, field.TypeInt32, value)
	}
	if cuo.mutation.PriorityCleared() {
		_spec.ClearField(category.FieldPriority, field.TypeInt32)
	}
	if value, ok := cuo.mutation.PostCount(); ok {
		_spec.SetField(category.FieldPostCount, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedPostCount(); ok {
		_spec.AddField(category.FieldPostCount, field.TypeUint32, value)
	}
	if cuo.mutation.PostCountCleared() {
		_spec.ClearField(category.FieldPostCount, field.TypeUint32)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Category{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
