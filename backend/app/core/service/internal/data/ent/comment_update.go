// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/comment"
	"go-cms/app/core/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks     []Hook
	mutation  *CommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CommentUpdate) SetUpdateTime(i int64) *CommentUpdate {
	cu.mutation.ResetUpdateTime()
	cu.mutation.SetUpdateTime(i)
	return cu
}

// AddUpdateTime adds i to the "update_time" field.
func (cu *CommentUpdate) AddUpdateTime(i int64) *CommentUpdate {
	cu.mutation.AddUpdateTime(i)
	return cu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (cu *CommentUpdate) ClearUpdateTime() *CommentUpdate {
	cu.mutation.ClearUpdateTime()
	return cu
}

// SetDeleteTime sets the "delete_time" field.
func (cu *CommentUpdate) SetDeleteTime(i int64) *CommentUpdate {
	cu.mutation.ResetDeleteTime()
	cu.mutation.SetDeleteTime(i)
	return cu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableDeleteTime(i *int64) *CommentUpdate {
	if i != nil {
		cu.SetDeleteTime(*i)
	}
	return cu
}

// AddDeleteTime adds i to the "delete_time" field.
func (cu *CommentUpdate) AddDeleteTime(i int64) *CommentUpdate {
	cu.mutation.AddDeleteTime(i)
	return cu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cu *CommentUpdate) ClearDeleteTime() *CommentUpdate {
	cu.mutation.ClearDeleteTime()
	return cu
}

// SetAuthor sets the "author" field.
func (cu *CommentUpdate) SetAuthor(s string) *CommentUpdate {
	cu.mutation.SetAuthor(s)
	return cu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthor(s *string) *CommentUpdate {
	if s != nil {
		cu.SetAuthor(*s)
	}
	return cu
}

// ClearAuthor clears the value of the "author" field.
func (cu *CommentUpdate) ClearAuthor() *CommentUpdate {
	cu.mutation.ClearAuthor()
	return cu
}

// SetEmail sets the "email" field.
func (cu *CommentUpdate) SetEmail(s string) *CommentUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableEmail(s *string) *CommentUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *CommentUpdate) ClearEmail() *CommentUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetIPAddress sets the "ip_address" field.
func (cu *CommentUpdate) SetIPAddress(s string) *CommentUpdate {
	cu.mutation.SetIPAddress(s)
	return cu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIPAddress(s *string) *CommentUpdate {
	if s != nil {
		cu.SetIPAddress(*s)
	}
	return cu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (cu *CommentUpdate) ClearIPAddress() *CommentUpdate {
	cu.mutation.ClearIPAddress()
	return cu
}

// SetAuthorURL sets the "author_url" field.
func (cu *CommentUpdate) SetAuthorURL(s string) *CommentUpdate {
	cu.mutation.SetAuthorURL(s)
	return cu
}

// SetNillableAuthorURL sets the "author_url" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthorURL(s *string) *CommentUpdate {
	if s != nil {
		cu.SetAuthorURL(*s)
	}
	return cu
}

// ClearAuthorURL clears the value of the "author_url" field.
func (cu *CommentUpdate) ClearAuthorURL() *CommentUpdate {
	cu.mutation.ClearAuthorURL()
	return cu
}

// SetGravatarMd5 sets the "gravatar_md5" field.
func (cu *CommentUpdate) SetGravatarMd5(s string) *CommentUpdate {
	cu.mutation.SetGravatarMd5(s)
	return cu
}

// SetNillableGravatarMd5 sets the "gravatar_md5" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableGravatarMd5(s *string) *CommentUpdate {
	if s != nil {
		cu.SetGravatarMd5(*s)
	}
	return cu
}

// ClearGravatarMd5 clears the value of the "gravatar_md5" field.
func (cu *CommentUpdate) ClearGravatarMd5() *CommentUpdate {
	cu.mutation.ClearGravatarMd5()
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *CommentUpdate) ClearContent() *CommentUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetUserAgent sets the "user_agent" field.
func (cu *CommentUpdate) SetUserAgent(s string) *CommentUpdate {
	cu.mutation.SetUserAgent(s)
	return cu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserAgent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetUserAgent(*s)
	}
	return cu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (cu *CommentUpdate) ClearUserAgent() *CommentUpdate {
	cu.mutation.ClearUserAgent()
	return cu
}

// SetAvatar sets the "avatar" field.
func (cu *CommentUpdate) SetAvatar(s string) *CommentUpdate {
	cu.mutation.SetAvatar(s)
	return cu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAvatar(s *string) *CommentUpdate {
	if s != nil {
		cu.SetAvatar(*s)
	}
	return cu
}

// ClearAvatar clears the value of the "avatar" field.
func (cu *CommentUpdate) ClearAvatar() *CommentUpdate {
	cu.mutation.ClearAvatar()
	return cu
}

// SetParentID sets the "parent_id" field.
func (cu *CommentUpdate) SetParentID(u uint32) *CommentUpdate {
	cu.mutation.ResetParentID()
	cu.mutation.SetParentID(u)
	return cu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableParentID(u *uint32) *CommentUpdate {
	if u != nil {
		cu.SetParentID(*u)
	}
	return cu
}

// AddParentID adds u to the "parent_id" field.
func (cu *CommentUpdate) AddParentID(u int32) *CommentUpdate {
	cu.mutation.AddParentID(u)
	return cu
}

// ClearParentID clears the value of the "parent_id" field.
func (cu *CommentUpdate) ClearParentID() *CommentUpdate {
	cu.mutation.ClearParentID()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommentUpdate) SetStatus(u uint32) *CommentUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableStatus(u *uint32) *CommentUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *CommentUpdate) AddStatus(u int32) *CommentUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *CommentUpdate) ClearStatus() *CommentUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetIsAdmin sets the "is_admin" field.
func (cu *CommentUpdate) SetIsAdmin(b bool) *CommentUpdate {
	cu.mutation.SetIsAdmin(b)
	return cu
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIsAdmin(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetIsAdmin(*b)
	}
	return cu
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (cu *CommentUpdate) ClearIsAdmin() *CommentUpdate {
	cu.mutation.ClearIsAdmin()
	return cu
}

// SetAllowNotification sets the "allow_notification" field.
func (cu *CommentUpdate) SetAllowNotification(b bool) *CommentUpdate {
	cu.mutation.SetAllowNotification(b)
	return cu
}

// SetNillableAllowNotification sets the "allow_notification" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAllowNotification(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetAllowNotification(*b)
	}
	return cu
}

// ClearAllowNotification clears the value of the "allow_notification" field.
func (cu *CommentUpdate) ClearAllowNotification() *CommentUpdate {
	cu.mutation.ClearAllowNotification()
	return cu
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok && !cu.mutation.UpdateTimeCleared() {
		v := comment.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.Author(); ok {
		if err := comment.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Comment.author": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CommentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreateTimeCleared() {
		_spec.ClearField(comment.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(comment.FieldUpdateTime, field.TypeInt64, value)
	}
	if cu.mutation.UpdateTimeCleared() {
		_spec.ClearField(comment.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.DeleteTime(); ok {
		_spec.SetField(comment.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(comment.FieldDeleteTime, field.TypeInt64, value)
	}
	if cu.mutation.DeleteTimeCleared() {
		_spec.ClearField(comment.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.Author(); ok {
		_spec.SetField(comment.FieldAuthor, field.TypeString, value)
	}
	if cu.mutation.AuthorCleared() {
		_spec.ClearField(comment.FieldAuthor, field.TypeString)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(comment.FieldEmail, field.TypeString, value)
	}
	if cu.mutation.EmailCleared() {
		_spec.ClearField(comment.FieldEmail, field.TypeString)
	}
	if value, ok := cu.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if cu.mutation.IPAddressCleared() {
		_spec.ClearField(comment.FieldIPAddress, field.TypeString)
	}
	if value, ok := cu.mutation.AuthorURL(); ok {
		_spec.SetField(comment.FieldAuthorURL, field.TypeString, value)
	}
	if cu.mutation.AuthorURLCleared() {
		_spec.ClearField(comment.FieldAuthorURL, field.TypeString)
	}
	if value, ok := cu.mutation.GravatarMd5(); ok {
		_spec.SetField(comment.FieldGravatarMd5, field.TypeString, value)
	}
	if cu.mutation.GravatarMd5Cleared() {
		_spec.ClearField(comment.FieldGravatarMd5, field.TypeString)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cu.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cu.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if cu.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := cu.mutation.Avatar(); ok {
		_spec.SetField(comment.FieldAvatar, field.TypeString, value)
	}
	if cu.mutation.AvatarCleared() {
		_spec.ClearField(comment.FieldAvatar, field.TypeString)
	}
	if value, ok := cu.mutation.ParentID(); ok {
		_spec.SetField(comment.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedParentID(); ok {
		_spec.AddField(comment.FieldParentID, field.TypeUint32, value)
	}
	if cu.mutation.ParentIDCleared() {
		_spec.ClearField(comment.FieldParentID, field.TypeUint32)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeUint32, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(comment.FieldStatus, field.TypeUint32)
	}
	if value, ok := cu.mutation.IsAdmin(); ok {
		_spec.SetField(comment.FieldIsAdmin, field.TypeBool, value)
	}
	if cu.mutation.IsAdminCleared() {
		_spec.ClearField(comment.FieldIsAdmin, field.TypeBool)
	}
	if value, ok := cu.mutation.AllowNotification(); ok {
		_spec.SetField(comment.FieldAllowNotification, field.TypeBool, value)
	}
	if cu.mutation.AllowNotificationCleared() {
		_spec.ClearField(comment.FieldAllowNotification, field.TypeBool)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CommentUpdateOne) SetUpdateTime(i int64) *CommentUpdateOne {
	cuo.mutation.ResetUpdateTime()
	cuo.mutation.SetUpdateTime(i)
	return cuo
}

// AddUpdateTime adds i to the "update_time" field.
func (cuo *CommentUpdateOne) AddUpdateTime(i int64) *CommentUpdateOne {
	cuo.mutation.AddUpdateTime(i)
	return cuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (cuo *CommentUpdateOne) ClearUpdateTime() *CommentUpdateOne {
	cuo.mutation.ClearUpdateTime()
	return cuo
}

// SetDeleteTime sets the "delete_time" field.
func (cuo *CommentUpdateOne) SetDeleteTime(i int64) *CommentUpdateOne {
	cuo.mutation.ResetDeleteTime()
	cuo.mutation.SetDeleteTime(i)
	return cuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableDeleteTime(i *int64) *CommentUpdateOne {
	if i != nil {
		cuo.SetDeleteTime(*i)
	}
	return cuo
}

// AddDeleteTime adds i to the "delete_time" field.
func (cuo *CommentUpdateOne) AddDeleteTime(i int64) *CommentUpdateOne {
	cuo.mutation.AddDeleteTime(i)
	return cuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cuo *CommentUpdateOne) ClearDeleteTime() *CommentUpdateOne {
	cuo.mutation.ClearDeleteTime()
	return cuo
}

// SetAuthor sets the "author" field.
func (cuo *CommentUpdateOne) SetAuthor(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthor(s)
	return cuo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthor(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetAuthor(*s)
	}
	return cuo
}

// ClearAuthor clears the value of the "author" field.
func (cuo *CommentUpdateOne) ClearAuthor() *CommentUpdateOne {
	cuo.mutation.ClearAuthor()
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CommentUpdateOne) SetEmail(s string) *CommentUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableEmail(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *CommentUpdateOne) ClearEmail() *CommentUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetIPAddress sets the "ip_address" field.
func (cuo *CommentUpdateOne) SetIPAddress(s string) *CommentUpdateOne {
	cuo.mutation.SetIPAddress(s)
	return cuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIPAddress(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetIPAddress(*s)
	}
	return cuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (cuo *CommentUpdateOne) ClearIPAddress() *CommentUpdateOne {
	cuo.mutation.ClearIPAddress()
	return cuo
}

// SetAuthorURL sets the "author_url" field.
func (cuo *CommentUpdateOne) SetAuthorURL(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthorURL(s)
	return cuo
}

// SetNillableAuthorURL sets the "author_url" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthorURL(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetAuthorURL(*s)
	}
	return cuo
}

// ClearAuthorURL clears the value of the "author_url" field.
func (cuo *CommentUpdateOne) ClearAuthorURL() *CommentUpdateOne {
	cuo.mutation.ClearAuthorURL()
	return cuo
}

// SetGravatarMd5 sets the "gravatar_md5" field.
func (cuo *CommentUpdateOne) SetGravatarMd5(s string) *CommentUpdateOne {
	cuo.mutation.SetGravatarMd5(s)
	return cuo
}

// SetNillableGravatarMd5 sets the "gravatar_md5" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableGravatarMd5(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetGravatarMd5(*s)
	}
	return cuo
}

// ClearGravatarMd5 clears the value of the "gravatar_md5" field.
func (cuo *CommentUpdateOne) ClearGravatarMd5() *CommentUpdateOne {
	cuo.mutation.ClearGravatarMd5()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *CommentUpdateOne) ClearContent() *CommentUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetUserAgent sets the "user_agent" field.
func (cuo *CommentUpdateOne) SetUserAgent(s string) *CommentUpdateOne {
	cuo.mutation.SetUserAgent(s)
	return cuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserAgent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetUserAgent(*s)
	}
	return cuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (cuo *CommentUpdateOne) ClearUserAgent() *CommentUpdateOne {
	cuo.mutation.ClearUserAgent()
	return cuo
}

// SetAvatar sets the "avatar" field.
func (cuo *CommentUpdateOne) SetAvatar(s string) *CommentUpdateOne {
	cuo.mutation.SetAvatar(s)
	return cuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAvatar(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetAvatar(*s)
	}
	return cuo
}

// ClearAvatar clears the value of the "avatar" field.
func (cuo *CommentUpdateOne) ClearAvatar() *CommentUpdateOne {
	cuo.mutation.ClearAvatar()
	return cuo
}

// SetParentID sets the "parent_id" field.
func (cuo *CommentUpdateOne) SetParentID(u uint32) *CommentUpdateOne {
	cuo.mutation.ResetParentID()
	cuo.mutation.SetParentID(u)
	return cuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableParentID(u *uint32) *CommentUpdateOne {
	if u != nil {
		cuo.SetParentID(*u)
	}
	return cuo
}

// AddParentID adds u to the "parent_id" field.
func (cuo *CommentUpdateOne) AddParentID(u int32) *CommentUpdateOne {
	cuo.mutation.AddParentID(u)
	return cuo
}

// ClearParentID clears the value of the "parent_id" field.
func (cuo *CommentUpdateOne) ClearParentID() *CommentUpdateOne {
	cuo.mutation.ClearParentID()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommentUpdateOne) SetStatus(u uint32) *CommentUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableStatus(u *uint32) *CommentUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *CommentUpdateOne) AddStatus(u int32) *CommentUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *CommentUpdateOne) ClearStatus() *CommentUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetIsAdmin sets the "is_admin" field.
func (cuo *CommentUpdateOne) SetIsAdmin(b bool) *CommentUpdateOne {
	cuo.mutation.SetIsAdmin(b)
	return cuo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIsAdmin(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetIsAdmin(*b)
	}
	return cuo
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (cuo *CommentUpdateOne) ClearIsAdmin() *CommentUpdateOne {
	cuo.mutation.ClearIsAdmin()
	return cuo
}

// SetAllowNotification sets the "allow_notification" field.
func (cuo *CommentUpdateOne) SetAllowNotification(b bool) *CommentUpdateOne {
	cuo.mutation.SetAllowNotification(b)
	return cuo
}

// SetNillableAllowNotification sets the "allow_notification" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAllowNotification(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetAllowNotification(*b)
	}
	return cuo
}

// ClearAllowNotification clears the value of the "allow_notification" field.
func (cuo *CommentUpdateOne) ClearAllowNotification() *CommentUpdateOne {
	cuo.mutation.ClearAllowNotification()
	return cuo
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok && !cuo.mutation.UpdateTimeCleared() {
		v := comment.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.Author(); ok {
		if err := comment.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Comment.author": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CommentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreateTimeCleared() {
		_spec.ClearField(comment.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(comment.FieldUpdateTime, field.TypeInt64, value)
	}
	if cuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(comment.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.DeleteTime(); ok {
		_spec.SetField(comment.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(comment.FieldDeleteTime, field.TypeInt64, value)
	}
	if cuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(comment.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Author(); ok {
		_spec.SetField(comment.FieldAuthor, field.TypeString, value)
	}
	if cuo.mutation.AuthorCleared() {
		_spec.ClearField(comment.FieldAuthor, field.TypeString)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(comment.FieldEmail, field.TypeString, value)
	}
	if cuo.mutation.EmailCleared() {
		_spec.ClearField(comment.FieldEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if cuo.mutation.IPAddressCleared() {
		_spec.ClearField(comment.FieldIPAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.AuthorURL(); ok {
		_spec.SetField(comment.FieldAuthorURL, field.TypeString, value)
	}
	if cuo.mutation.AuthorURLCleared() {
		_spec.ClearField(comment.FieldAuthorURL, field.TypeString)
	}
	if value, ok := cuo.mutation.GravatarMd5(); ok {
		_spec.SetField(comment.FieldGravatarMd5, field.TypeString, value)
	}
	if cuo.mutation.GravatarMd5Cleared() {
		_spec.ClearField(comment.FieldGravatarMd5, field.TypeString)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cuo.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cuo.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if cuo.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := cuo.mutation.Avatar(); ok {
		_spec.SetField(comment.FieldAvatar, field.TypeString, value)
	}
	if cuo.mutation.AvatarCleared() {
		_spec.ClearField(comment.FieldAvatar, field.TypeString)
	}
	if value, ok := cuo.mutation.ParentID(); ok {
		_spec.SetField(comment.FieldParentID, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedParentID(); ok {
		_spec.AddField(comment.FieldParentID, field.TypeUint32, value)
	}
	if cuo.mutation.ParentIDCleared() {
		_spec.ClearField(comment.FieldParentID, field.TypeUint32)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeUint32, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(comment.FieldStatus, field.TypeUint32)
	}
	if value, ok := cuo.mutation.IsAdmin(); ok {
		_spec.SetField(comment.FieldIsAdmin, field.TypeBool, value)
	}
	if cuo.mutation.IsAdminCleared() {
		_spec.ClearField(comment.FieldIsAdmin, field.TypeBool)
	}
	if value, ok := cuo.mutation.AllowNotification(); ok {
		_spec.SetField(comment.FieldAllowNotification, field.TypeBool, value)
	}
	if cuo.mutation.AllowNotificationCleared() {
		_spec.ClearField(comment.FieldAllowNotification, field.TypeBool)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
