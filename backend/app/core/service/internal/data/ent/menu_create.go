// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/menu"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (mc *MenuCreate) SetCreateTime(i int64) *MenuCreate {
	mc.mutation.SetCreateTime(i)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreateTime(i *int64) *MenuCreate {
	if i != nil {
		mc.SetCreateTime(*i)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MenuCreate) SetUpdateTime(i int64) *MenuCreate {
	mc.mutation.SetUpdateTime(i)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdateTime(i *int64) *MenuCreate {
	if i != nil {
		mc.SetUpdateTime(*i)
	}
	return mc
}

// SetDeleteTime sets the "delete_time" field.
func (mc *MenuCreate) SetDeleteTime(i int64) *MenuCreate {
	mc.mutation.SetDeleteTime(i)
	return mc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableDeleteTime(i *int64) *MenuCreate {
	if i != nil {
		mc.SetDeleteTime(*i)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MenuCreate) SetName(s string) *MenuCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MenuCreate) SetNillableName(s *string) *MenuCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetURL sets the "url" field.
func (mc *MenuCreate) SetURL(s string) *MenuCreate {
	mc.mutation.SetURL(s)
	return mc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mc *MenuCreate) SetNillableURL(s *string) *MenuCreate {
	if s != nil {
		mc.SetURL(*s)
	}
	return mc
}

// SetPriority sets the "priority" field.
func (mc *MenuCreate) SetPriority(i int32) *MenuCreate {
	mc.mutation.SetPriority(i)
	return mc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (mc *MenuCreate) SetNillablePriority(i *int32) *MenuCreate {
	if i != nil {
		mc.SetPriority(*i)
	}
	return mc
}

// SetTarget sets the "target" field.
func (mc *MenuCreate) SetTarget(s string) *MenuCreate {
	mc.mutation.SetTarget(s)
	return mc
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (mc *MenuCreate) SetNillableTarget(s *string) *MenuCreate {
	if s != nil {
		mc.SetTarget(*s)
	}
	return mc
}

// SetIcon sets the "icon" field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetIcon(*s)
	}
	return mc
}

// SetParentID sets the "parent_id" field.
func (mc *MenuCreate) SetParentID(u uint32) *MenuCreate {
	mc.mutation.SetParentID(u)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(u *uint32) *MenuCreate {
	if u != nil {
		mc.SetParentID(*u)
	}
	return mc
}

// SetTeam sets the "team" field.
func (mc *MenuCreate) SetTeam(s string) *MenuCreate {
	mc.mutation.SetTeam(s)
	return mc
}

// SetNillableTeam sets the "team" field if the given value is not nil.
func (mc *MenuCreate) SetNillableTeam(s *string) *MenuCreate {
	if s != nil {
		mc.SetTeam(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(u uint32) *MenuCreate {
	mc.mutation.SetID(u)
	return mc
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := menu.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	if v, ok := mc.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := mc.mutation.ID(); ok {
		if err := menu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Menu.id": %w`, err)}
		}
	}
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(menu.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := mc.mutation.DeleteTime(); ok {
		_spec.SetField(menu.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := mc.mutation.URL(); ok {
		_spec.SetField(menu.FieldURL, field.TypeString, value)
		_node.URL = &value
	}
	if value, ok := mc.mutation.Priority(); ok {
		_spec.SetField(menu.FieldPriority, field.TypeInt32, value)
		_node.Priority = &value
	}
	if value, ok := mc.mutation.Target(); ok {
		_spec.SetField(menu.FieldTarget, field.TypeString, value)
		_node.Target = &value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = &value
	}
	if value, ok := mc.mutation.ParentID(); ok {
		_spec.SetField(menu.FieldParentID, field.TypeUint32, value)
		_node.ParentID = &value
	}
	if value, ok := mc.mutation.Team(); ok {
		_spec.SetField(menu.FieldTeam, field.TypeString, value)
		_node.Team = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mc *MenuCreate) OnConflict(opts ...sql.ConflictOption) *MenuUpsertOne {
	mc.conflict = opts
	return &MenuUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MenuCreate) OnConflictColumns(columns ...string) *MenuUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertOne{
		create: mc,
	}
}

type (
	// MenuUpsertOne is the builder for "upsert"-ing
	//  one Menu node.
	MenuUpsertOne struct {
		create *MenuCreate
	}

	// MenuUpsert is the "OnConflict" setter.
	MenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *MenuUpsert) SetUpdateTime(v int64) *MenuUpsert {
	u.Set(menu.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MenuUpsert) UpdateUpdateTime() *MenuUpsert {
	u.SetExcluded(menu.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *MenuUpsert) AddUpdateTime(v int64) *MenuUpsert {
	u.Add(menu.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MenuUpsert) ClearUpdateTime() *MenuUpsert {
	u.SetNull(menu.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *MenuUpsert) SetDeleteTime(v int64) *MenuUpsert {
	u.Set(menu.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MenuUpsert) UpdateDeleteTime() *MenuUpsert {
	u.SetExcluded(menu.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *MenuUpsert) AddDeleteTime(v int64) *MenuUpsert {
	u.Add(menu.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MenuUpsert) ClearDeleteTime() *MenuUpsert {
	u.SetNull(menu.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *MenuUpsert) SetName(v string) *MenuUpsert {
	u.Set(menu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsert) UpdateName() *MenuUpsert {
	u.SetExcluded(menu.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *MenuUpsert) ClearName() *MenuUpsert {
	u.SetNull(menu.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *MenuUpsert) SetURL(v string) *MenuUpsert {
	u.Set(menu.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MenuUpsert) UpdateURL() *MenuUpsert {
	u.SetExcluded(menu.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *MenuUpsert) ClearURL() *MenuUpsert {
	u.SetNull(menu.FieldURL)
	return u
}

// SetPriority sets the "priority" field.
func (u *MenuUpsert) SetPriority(v int32) *MenuUpsert {
	u.Set(menu.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *MenuUpsert) UpdatePriority() *MenuUpsert {
	u.SetExcluded(menu.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *MenuUpsert) AddPriority(v int32) *MenuUpsert {
	u.Add(menu.FieldPriority, v)
	return u
}

// ClearPriority clears the value of the "priority" field.
func (u *MenuUpsert) ClearPriority() *MenuUpsert {
	u.SetNull(menu.FieldPriority)
	return u
}

// SetTarget sets the "target" field.
func (u *MenuUpsert) SetTarget(v string) *MenuUpsert {
	u.Set(menu.FieldTarget, v)
	return u
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *MenuUpsert) UpdateTarget() *MenuUpsert {
	u.SetExcluded(menu.FieldTarget)
	return u
}

// ClearTarget clears the value of the "target" field.
func (u *MenuUpsert) ClearTarget() *MenuUpsert {
	u.SetNull(menu.FieldTarget)
	return u
}

// SetIcon sets the "icon" field.
func (u *MenuUpsert) SetIcon(v string) *MenuUpsert {
	u.Set(menu.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIcon() *MenuUpsert {
	u.SetExcluded(menu.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *MenuUpsert) ClearIcon() *MenuUpsert {
	u.SetNull(menu.FieldIcon)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsert) SetParentID(v uint32) *MenuUpsert {
	u.Set(menu.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsert) UpdateParentID() *MenuUpsert {
	u.SetExcluded(menu.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *MenuUpsert) AddParentID(v uint32) *MenuUpsert {
	u.Add(menu.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsert) ClearParentID() *MenuUpsert {
	u.SetNull(menu.FieldParentID)
	return u
}

// SetTeam sets the "team" field.
func (u *MenuUpsert) SetTeam(v string) *MenuUpsert {
	u.Set(menu.FieldTeam, v)
	return u
}

// UpdateTeam sets the "team" field to the value that was provided on create.
func (u *MenuUpsert) UpdateTeam() *MenuUpsert {
	u.SetExcluded(menu.FieldTeam)
	return u
}

// ClearTeam clears the value of the "team" field.
func (u *MenuUpsert) ClearTeam() *MenuUpsert {
	u.SetNull(menu.FieldTeam)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertOne) UpdateNewValues() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(menu.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(menu.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MenuUpsertOne) Ignore() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertOne) DoNothing() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreate.OnConflict
// documentation for more info.
func (u *MenuUpsertOne) Update(set func(*MenuUpsert)) *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MenuUpsertOne) SetUpdateTime(v int64) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *MenuUpsertOne) AddUpdateTime(v int64) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateUpdateTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MenuUpsertOne) ClearUpdateTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *MenuUpsertOne) SetDeleteTime(v int64) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *MenuUpsertOne) AddDeleteTime(v int64) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateDeleteTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MenuUpsertOne) ClearDeleteTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertOne) SetName(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateName() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MenuUpsertOne) ClearName() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearName()
	})
}

// SetURL sets the "url" field.
func (u *MenuUpsertOne) SetURL(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateURL() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *MenuUpsertOne) ClearURL() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearURL()
	})
}

// SetPriority sets the "priority" field.
func (u *MenuUpsertOne) SetPriority(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *MenuUpsertOne) AddPriority(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdatePriority() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *MenuUpsertOne) ClearPriority() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPriority()
	})
}

// SetTarget sets the "target" field.
func (u *MenuUpsertOne) SetTarget(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetTarget(v)
	})
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateTarget() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTarget()
	})
}

// ClearTarget clears the value of the "target" field.
func (u *MenuUpsertOne) ClearTarget() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearTarget()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertOne) SetIcon(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *MenuUpsertOne) ClearIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIcon()
	})
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsertOne) SetParentID(v uint32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *MenuUpsertOne) AddParentID(v uint32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateParentID() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsertOne) ClearParentID() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentID()
	})
}

// SetTeam sets the "team" field.
func (u *MenuUpsertOne) SetTeam(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetTeam(v)
	})
}

// UpdateTeam sets the "team" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateTeam() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTeam()
	})
}

// ClearTeam clears the value of the "team" field.
func (u *MenuUpsertOne) ClearTeam() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearTeam()
	})
}

// Exec executes the query.
func (u *MenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MenuUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MenuUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
	conflict []sql.ConflictOption
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *MenuUpsertBulk {
	mcb.conflict = opts
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflictColumns(columns ...string) *MenuUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// MenuUpsertBulk is the builder for "upsert"-ing
// a bulk of Menu nodes.
type MenuUpsertBulk struct {
	create *MenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertBulk) UpdateNewValues() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(menu.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(menu.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MenuUpsertBulk) Ignore() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertBulk) DoNothing() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreateBulk.OnConflict
// documentation for more info.
func (u *MenuUpsertBulk) Update(set func(*MenuUpsert)) *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MenuUpsertBulk) SetUpdateTime(v int64) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *MenuUpsertBulk) AddUpdateTime(v int64) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateUpdateTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MenuUpsertBulk) ClearUpdateTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *MenuUpsertBulk) SetDeleteTime(v int64) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *MenuUpsertBulk) AddDeleteTime(v int64) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateDeleteTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MenuUpsertBulk) ClearDeleteTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertBulk) SetName(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateName() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MenuUpsertBulk) ClearName() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearName()
	})
}

// SetURL sets the "url" field.
func (u *MenuUpsertBulk) SetURL(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateURL() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *MenuUpsertBulk) ClearURL() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearURL()
	})
}

// SetPriority sets the "priority" field.
func (u *MenuUpsertBulk) SetPriority(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *MenuUpsertBulk) AddPriority(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdatePriority() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePriority()
	})
}

// ClearPriority clears the value of the "priority" field.
func (u *MenuUpsertBulk) ClearPriority() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPriority()
	})
}

// SetTarget sets the "target" field.
func (u *MenuUpsertBulk) SetTarget(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetTarget(v)
	})
}

// UpdateTarget sets the "target" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateTarget() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTarget()
	})
}

// ClearTarget clears the value of the "target" field.
func (u *MenuUpsertBulk) ClearTarget() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearTarget()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertBulk) SetIcon(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *MenuUpsertBulk) ClearIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIcon()
	})
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsertBulk) SetParentID(v uint32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *MenuUpsertBulk) AddParentID(v uint32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateParentID() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsertBulk) ClearParentID() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentID()
	})
}

// SetTeam sets the "team" field.
func (u *MenuUpsertBulk) SetTeam(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetTeam(v)
	})
}

// UpdateTeam sets the "team" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateTeam() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTeam()
	})
}

// ClearTeam clears the value of the "team" field.
func (u *MenuUpsertBulk) ClearTeam() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearTeam()
	})
}

// Exec executes the query.
func (u *MenuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
