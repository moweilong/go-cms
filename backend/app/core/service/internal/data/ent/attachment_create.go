// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/attachment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentCreate is the builder for creating a Attachment entity.
type AttachmentCreate struct {
	config
	mutation *AttachmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ac *AttachmentCreate) SetCreateTime(i int64) *AttachmentCreate {
	ac.mutation.SetCreateTime(i)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCreateTime(i *int64) *AttachmentCreate {
	if i != nil {
		ac.SetCreateTime(*i)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AttachmentCreate) SetUpdateTime(i int64) *AttachmentCreate {
	ac.mutation.SetUpdateTime(i)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableUpdateTime(i *int64) *AttachmentCreate {
	if i != nil {
		ac.SetUpdateTime(*i)
	}
	return ac
}

// SetDeleteTime sets the "delete_time" field.
func (ac *AttachmentCreate) SetDeleteTime(i int64) *AttachmentCreate {
	ac.mutation.SetDeleteTime(i)
	return ac
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableDeleteTime(i *int64) *AttachmentCreate {
	if i != nil {
		ac.SetDeleteTime(*i)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AttachmentCreate) SetName(s string) *AttachmentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableName(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetPath sets the "path" field.
func (ac *AttachmentCreate) SetPath(s string) *AttachmentCreate {
	ac.mutation.SetPath(s)
	return ac
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillablePath(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetPath(*s)
	}
	return ac
}

// SetFileKey sets the "file_key" field.
func (ac *AttachmentCreate) SetFileKey(s string) *AttachmentCreate {
	ac.mutation.SetFileKey(s)
	return ac
}

// SetNillableFileKey sets the "file_key" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableFileKey(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetFileKey(*s)
	}
	return ac
}

// SetThumbnail sets the "thumbnail" field.
func (ac *AttachmentCreate) SetThumbnail(s string) *AttachmentCreate {
	ac.mutation.SetThumbnail(s)
	return ac
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableThumbnail(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetThumbnail(*s)
	}
	return ac
}

// SetMediaType sets the "media_type" field.
func (ac *AttachmentCreate) SetMediaType(s string) *AttachmentCreate {
	ac.mutation.SetMediaType(s)
	return ac
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableMediaType(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetMediaType(*s)
	}
	return ac
}

// SetSuffix sets the "suffix" field.
func (ac *AttachmentCreate) SetSuffix(s string) *AttachmentCreate {
	ac.mutation.SetSuffix(s)
	return ac
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableSuffix(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetSuffix(*s)
	}
	return ac
}

// SetWidth sets the "width" field.
func (ac *AttachmentCreate) SetWidth(i int32) *AttachmentCreate {
	ac.mutation.SetWidth(i)
	return ac
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableWidth(i *int32) *AttachmentCreate {
	if i != nil {
		ac.SetWidth(*i)
	}
	return ac
}

// SetHeight sets the "height" field.
func (ac *AttachmentCreate) SetHeight(i int32) *AttachmentCreate {
	ac.mutation.SetHeight(i)
	return ac
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableHeight(i *int32) *AttachmentCreate {
	if i != nil {
		ac.SetHeight(*i)
	}
	return ac
}

// SetSize sets the "Size" field.
func (ac *AttachmentCreate) SetSize(u uint64) *AttachmentCreate {
	ac.mutation.SetSize(u)
	return ac
}

// SetNillableSize sets the "Size" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableSize(u *uint64) *AttachmentCreate {
	if u != nil {
		ac.SetSize(*u)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AttachmentCreate) SetType(i int32) *AttachmentCreate {
	ac.mutation.SetType(i)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableType(i *int32) *AttachmentCreate {
	if i != nil {
		ac.SetType(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AttachmentCreate) SetID(u uint32) *AttachmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AttachmentMutation object of the builder.
func (ac *AttachmentCreate) Mutation() *AttachmentMutation {
	return ac.mutation
}

// Save creates the Attachment in the database.
func (ac *AttachmentCreate) Save(ctx context.Context) (*Attachment, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttachmentCreate) SaveX(ctx context.Context) *Attachment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttachmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttachmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttachmentCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := attachment.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttachmentCreate) check() error {
	if v, ok := ac.mutation.Name(); ok {
		if err := attachment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attachment.name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.FileKey(); ok {
		if err := attachment.FileKeyValidator(v); err != nil {
			return &ValidationError{Name: "file_key", err: fmt.Errorf(`ent: validator failed for field "Attachment.file_key": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Thumbnail(); ok {
		if err := attachment.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Attachment.thumbnail": %w`, err)}
		}
	}
	if v, ok := ac.mutation.ID(); ok {
		if err := attachment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Attachment.id": %w`, err)}
		}
	}
	return nil
}

func (ac *AttachmentCreate) sqlSave(ctx context.Context) (*Attachment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AttachmentCreate) createSpec() (*Attachment, *sqlgraph.CreateSpec) {
	var (
		_node = &Attachment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(attachment.Table, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(attachment.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(attachment.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := ac.mutation.DeleteTime(); ok {
		_spec.SetField(attachment.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(attachment.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := ac.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
		_node.Path = &value
	}
	if value, ok := ac.mutation.FileKey(); ok {
		_spec.SetField(attachment.FieldFileKey, field.TypeString, value)
		_node.FileKey = &value
	}
	if value, ok := ac.mutation.Thumbnail(); ok {
		_spec.SetField(attachment.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = &value
	}
	if value, ok := ac.mutation.MediaType(); ok {
		_spec.SetField(attachment.FieldMediaType, field.TypeString, value)
		_node.MediaType = &value
	}
	if value, ok := ac.mutation.Suffix(); ok {
		_spec.SetField(attachment.FieldSuffix, field.TypeString, value)
		_node.Suffix = &value
	}
	if value, ok := ac.mutation.Width(); ok {
		_spec.SetField(attachment.FieldWidth, field.TypeInt32, value)
		_node.Width = &value
	}
	if value, ok := ac.mutation.Height(); ok {
		_spec.SetField(attachment.FieldHeight, field.TypeInt32, value)
		_node.Height = &value
	}
	if value, ok := ac.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeUint64, value)
		_node.Size = &value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeInt32, value)
		_node.Type = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attachment.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttachmentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ac *AttachmentCreate) OnConflict(opts ...sql.ConflictOption) *AttachmentUpsertOne {
	ac.conflict = opts
	return &AttachmentUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AttachmentCreate) OnConflictColumns(columns ...string) *AttachmentUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AttachmentUpsertOne{
		create: ac,
	}
}

type (
	// AttachmentUpsertOne is the builder for "upsert"-ing
	//  one Attachment node.
	AttachmentUpsertOne struct {
		create *AttachmentCreate
	}

	// AttachmentUpsert is the "OnConflict" setter.
	AttachmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *AttachmentUpsert) SetUpdateTime(v int64) *AttachmentUpsert {
	u.Set(attachment.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateUpdateTime() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *AttachmentUpsert) AddUpdateTime(v int64) *AttachmentUpsert {
	u.Add(attachment.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AttachmentUpsert) ClearUpdateTime() *AttachmentUpsert {
	u.SetNull(attachment.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *AttachmentUpsert) SetDeleteTime(v int64) *AttachmentUpsert {
	u.Set(attachment.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateDeleteTime() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *AttachmentUpsert) AddDeleteTime(v int64) *AttachmentUpsert {
	u.Add(attachment.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AttachmentUpsert) ClearDeleteTime() *AttachmentUpsert {
	u.SetNull(attachment.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *AttachmentUpsert) SetName(v string) *AttachmentUpsert {
	u.Set(attachment.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateName() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AttachmentUpsert) ClearName() *AttachmentUpsert {
	u.SetNull(attachment.FieldName)
	return u
}

// SetPath sets the "path" field.
func (u *AttachmentUpsert) SetPath(v string) *AttachmentUpsert {
	u.Set(attachment.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdatePath() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *AttachmentUpsert) ClearPath() *AttachmentUpsert {
	u.SetNull(attachment.FieldPath)
	return u
}

// SetFileKey sets the "file_key" field.
func (u *AttachmentUpsert) SetFileKey(v string) *AttachmentUpsert {
	u.Set(attachment.FieldFileKey, v)
	return u
}

// UpdateFileKey sets the "file_key" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateFileKey() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldFileKey)
	return u
}

// ClearFileKey clears the value of the "file_key" field.
func (u *AttachmentUpsert) ClearFileKey() *AttachmentUpsert {
	u.SetNull(attachment.FieldFileKey)
	return u
}

// SetThumbnail sets the "thumbnail" field.
func (u *AttachmentUpsert) SetThumbnail(v string) *AttachmentUpsert {
	u.Set(attachment.FieldThumbnail, v)
	return u
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateThumbnail() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldThumbnail)
	return u
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *AttachmentUpsert) ClearThumbnail() *AttachmentUpsert {
	u.SetNull(attachment.FieldThumbnail)
	return u
}

// SetMediaType sets the "media_type" field.
func (u *AttachmentUpsert) SetMediaType(v string) *AttachmentUpsert {
	u.Set(attachment.FieldMediaType, v)
	return u
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateMediaType() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldMediaType)
	return u
}

// ClearMediaType clears the value of the "media_type" field.
func (u *AttachmentUpsert) ClearMediaType() *AttachmentUpsert {
	u.SetNull(attachment.FieldMediaType)
	return u
}

// SetSuffix sets the "suffix" field.
func (u *AttachmentUpsert) SetSuffix(v string) *AttachmentUpsert {
	u.Set(attachment.FieldSuffix, v)
	return u
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateSuffix() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldSuffix)
	return u
}

// ClearSuffix clears the value of the "suffix" field.
func (u *AttachmentUpsert) ClearSuffix() *AttachmentUpsert {
	u.SetNull(attachment.FieldSuffix)
	return u
}

// SetWidth sets the "width" field.
func (u *AttachmentUpsert) SetWidth(v int32) *AttachmentUpsert {
	u.Set(attachment.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateWidth() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *AttachmentUpsert) AddWidth(v int32) *AttachmentUpsert {
	u.Add(attachment.FieldWidth, v)
	return u
}

// ClearWidth clears the value of the "width" field.
func (u *AttachmentUpsert) ClearWidth() *AttachmentUpsert {
	u.SetNull(attachment.FieldWidth)
	return u
}

// SetHeight sets the "height" field.
func (u *AttachmentUpsert) SetHeight(v int32) *AttachmentUpsert {
	u.Set(attachment.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateHeight() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *AttachmentUpsert) AddHeight(v int32) *AttachmentUpsert {
	u.Add(attachment.FieldHeight, v)
	return u
}

// ClearHeight clears the value of the "height" field.
func (u *AttachmentUpsert) ClearHeight() *AttachmentUpsert {
	u.SetNull(attachment.FieldHeight)
	return u
}

// SetSize sets the "Size" field.
func (u *AttachmentUpsert) SetSize(v uint64) *AttachmentUpsert {
	u.Set(attachment.FieldSize, v)
	return u
}

// UpdateSize sets the "Size" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateSize() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldSize)
	return u
}

// AddSize adds v to the "Size" field.
func (u *AttachmentUpsert) AddSize(v uint64) *AttachmentUpsert {
	u.Add(attachment.FieldSize, v)
	return u
}

// ClearSize clears the value of the "Size" field.
func (u *AttachmentUpsert) ClearSize() *AttachmentUpsert {
	u.SetNull(attachment.FieldSize)
	return u
}

// SetType sets the "type" field.
func (u *AttachmentUpsert) SetType(v int32) *AttachmentUpsert {
	u.Set(attachment.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttachmentUpsert) UpdateType() *AttachmentUpsert {
	u.SetExcluded(attachment.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *AttachmentUpsert) AddType(v int32) *AttachmentUpsert {
	u.Add(attachment.FieldType, v)
	return u
}

// ClearType clears the value of the "type" field.
func (u *AttachmentUpsert) ClearType() *AttachmentUpsert {
	u.SetNull(attachment.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attachment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttachmentUpsertOne) UpdateNewValues() *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(attachment.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(attachment.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attachment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttachmentUpsertOne) Ignore() *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttachmentUpsertOne) DoNothing() *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttachmentCreate.OnConflict
// documentation for more info.
func (u *AttachmentUpsertOne) Update(set func(*AttachmentUpsert)) *AttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttachmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AttachmentUpsertOne) SetUpdateTime(v int64) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *AttachmentUpsertOne) AddUpdateTime(v int64) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateUpdateTime() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AttachmentUpsertOne) ClearUpdateTime() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *AttachmentUpsertOne) SetDeleteTime(v int64) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *AttachmentUpsertOne) AddDeleteTime(v int64) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateDeleteTime() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AttachmentUpsertOne) ClearDeleteTime() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *AttachmentUpsertOne) SetName(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateName() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AttachmentUpsertOne) ClearName() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearName()
	})
}

// SetPath sets the "path" field.
func (u *AttachmentUpsertOne) SetPath(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdatePath() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *AttachmentUpsertOne) ClearPath() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearPath()
	})
}

// SetFileKey sets the "file_key" field.
func (u *AttachmentUpsertOne) SetFileKey(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetFileKey(v)
	})
}

// UpdateFileKey sets the "file_key" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateFileKey() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateFileKey()
	})
}

// ClearFileKey clears the value of the "file_key" field.
func (u *AttachmentUpsertOne) ClearFileKey() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearFileKey()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *AttachmentUpsertOne) SetThumbnail(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateThumbnail() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *AttachmentUpsertOne) ClearThumbnail() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearThumbnail()
	})
}

// SetMediaType sets the "media_type" field.
func (u *AttachmentUpsertOne) SetMediaType(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetMediaType(v)
	})
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateMediaType() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateMediaType()
	})
}

// ClearMediaType clears the value of the "media_type" field.
func (u *AttachmentUpsertOne) ClearMediaType() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearMediaType()
	})
}

// SetSuffix sets the "suffix" field.
func (u *AttachmentUpsertOne) SetSuffix(v string) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateSuffix() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *AttachmentUpsertOne) ClearSuffix() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearSuffix()
	})
}

// SetWidth sets the "width" field.
func (u *AttachmentUpsertOne) SetWidth(v int32) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *AttachmentUpsertOne) AddWidth(v int32) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateWidth() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateWidth()
	})
}

// ClearWidth clears the value of the "width" field.
func (u *AttachmentUpsertOne) ClearWidth() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearWidth()
	})
}

// SetHeight sets the "height" field.
func (u *AttachmentUpsertOne) SetHeight(v int32) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *AttachmentUpsertOne) AddHeight(v int32) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateHeight() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *AttachmentUpsertOne) ClearHeight() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearHeight()
	})
}

// SetSize sets the "Size" field.
func (u *AttachmentUpsertOne) SetSize(v uint64) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "Size" field.
func (u *AttachmentUpsertOne) AddSize(v uint64) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "Size" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateSize() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "Size" field.
func (u *AttachmentUpsertOne) ClearSize() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearSize()
	})
}

// SetType sets the "type" field.
func (u *AttachmentUpsertOne) SetType(v int32) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *AttachmentUpsertOne) AddType(v int32) *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttachmentUpsertOne) UpdateType() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *AttachmentUpsertOne) ClearType() *AttachmentUpsertOne {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *AttachmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttachmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttachmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttachmentUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttachmentUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttachmentCreateBulk is the builder for creating many Attachment entities in bulk.
type AttachmentCreateBulk struct {
	config
	err      error
	builders []*AttachmentCreate
	conflict []sql.ConflictOption
}

// Save creates the Attachment entities in the database.
func (acb *AttachmentCreateBulk) Save(ctx context.Context) ([]*Attachment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attachment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttachmentCreateBulk) SaveX(ctx context.Context) []*Attachment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attachment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttachmentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (acb *AttachmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttachmentUpsertBulk {
	acb.conflict = opts
	return &AttachmentUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AttachmentCreateBulk) OnConflictColumns(columns ...string) *AttachmentUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AttachmentUpsertBulk{
		create: acb,
	}
}

// AttachmentUpsertBulk is the builder for "upsert"-ing
// a bulk of Attachment nodes.
type AttachmentUpsertBulk struct {
	create *AttachmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attachment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttachmentUpsertBulk) UpdateNewValues() *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(attachment.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(attachment.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attachment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttachmentUpsertBulk) Ignore() *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttachmentUpsertBulk) DoNothing() *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttachmentCreateBulk.OnConflict
// documentation for more info.
func (u *AttachmentUpsertBulk) Update(set func(*AttachmentUpsert)) *AttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttachmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AttachmentUpsertBulk) SetUpdateTime(v int64) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *AttachmentUpsertBulk) AddUpdateTime(v int64) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateUpdateTime() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *AttachmentUpsertBulk) ClearUpdateTime() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *AttachmentUpsertBulk) SetDeleteTime(v int64) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *AttachmentUpsertBulk) AddDeleteTime(v int64) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateDeleteTime() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *AttachmentUpsertBulk) ClearDeleteTime() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *AttachmentUpsertBulk) SetName(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateName() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AttachmentUpsertBulk) ClearName() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearName()
	})
}

// SetPath sets the "path" field.
func (u *AttachmentUpsertBulk) SetPath(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdatePath() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *AttachmentUpsertBulk) ClearPath() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearPath()
	})
}

// SetFileKey sets the "file_key" field.
func (u *AttachmentUpsertBulk) SetFileKey(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetFileKey(v)
	})
}

// UpdateFileKey sets the "file_key" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateFileKey() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateFileKey()
	})
}

// ClearFileKey clears the value of the "file_key" field.
func (u *AttachmentUpsertBulk) ClearFileKey() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearFileKey()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *AttachmentUpsertBulk) SetThumbnail(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateThumbnail() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *AttachmentUpsertBulk) ClearThumbnail() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearThumbnail()
	})
}

// SetMediaType sets the "media_type" field.
func (u *AttachmentUpsertBulk) SetMediaType(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetMediaType(v)
	})
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateMediaType() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateMediaType()
	})
}

// ClearMediaType clears the value of the "media_type" field.
func (u *AttachmentUpsertBulk) ClearMediaType() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearMediaType()
	})
}

// SetSuffix sets the "suffix" field.
func (u *AttachmentUpsertBulk) SetSuffix(v string) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateSuffix() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *AttachmentUpsertBulk) ClearSuffix() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearSuffix()
	})
}

// SetWidth sets the "width" field.
func (u *AttachmentUpsertBulk) SetWidth(v int32) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *AttachmentUpsertBulk) AddWidth(v int32) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateWidth() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateWidth()
	})
}

// ClearWidth clears the value of the "width" field.
func (u *AttachmentUpsertBulk) ClearWidth() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearWidth()
	})
}

// SetHeight sets the "height" field.
func (u *AttachmentUpsertBulk) SetHeight(v int32) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *AttachmentUpsertBulk) AddHeight(v int32) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateHeight() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *AttachmentUpsertBulk) ClearHeight() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearHeight()
	})
}

// SetSize sets the "Size" field.
func (u *AttachmentUpsertBulk) SetSize(v uint64) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "Size" field.
func (u *AttachmentUpsertBulk) AddSize(v uint64) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "Size" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateSize() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "Size" field.
func (u *AttachmentUpsertBulk) ClearSize() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearSize()
	})
}

// SetType sets the "type" field.
func (u *AttachmentUpsertBulk) SetType(v int32) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *AttachmentUpsertBulk) AddType(v int32) *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttachmentUpsertBulk) UpdateType() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *AttachmentUpsertBulk) ClearType() *AttachmentUpsertBulk {
	return u.Update(func(s *AttachmentUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *AttachmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttachmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttachmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttachmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
