// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/comment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cc *CommentCreate) SetCreateTime(i int64) *CommentCreate {
	cc.mutation.SetCreateTime(i)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreateTime(i *int64) *CommentCreate {
	if i != nil {
		cc.SetCreateTime(*i)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CommentCreate) SetUpdateTime(i int64) *CommentCreate {
	cc.mutation.SetUpdateTime(i)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdateTime(i *int64) *CommentCreate {
	if i != nil {
		cc.SetUpdateTime(*i)
	}
	return cc
}

// SetDeleteTime sets the "delete_time" field.
func (cc *CommentCreate) SetDeleteTime(i int64) *CommentCreate {
	cc.mutation.SetDeleteTime(i)
	return cc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDeleteTime(i *int64) *CommentCreate {
	if i != nil {
		cc.SetDeleteTime(*i)
	}
	return cc
}

// SetAuthor sets the "author" field.
func (cc *CommentCreate) SetAuthor(s string) *CommentCreate {
	cc.mutation.SetAuthor(s)
	return cc
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAuthor(s *string) *CommentCreate {
	if s != nil {
		cc.SetAuthor(*s)
	}
	return cc
}

// SetEmail sets the "email" field.
func (cc *CommentCreate) SetEmail(s string) *CommentCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cc *CommentCreate) SetNillableEmail(s *string) *CommentCreate {
	if s != nil {
		cc.SetEmail(*s)
	}
	return cc
}

// SetIPAddress sets the "ip_address" field.
func (cc *CommentCreate) SetIPAddress(s string) *CommentCreate {
	cc.mutation.SetIPAddress(s)
	return cc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cc *CommentCreate) SetNillableIPAddress(s *string) *CommentCreate {
	if s != nil {
		cc.SetIPAddress(*s)
	}
	return cc
}

// SetAuthorURL sets the "author_url" field.
func (cc *CommentCreate) SetAuthorURL(s string) *CommentCreate {
	cc.mutation.SetAuthorURL(s)
	return cc
}

// SetNillableAuthorURL sets the "author_url" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAuthorURL(s *string) *CommentCreate {
	if s != nil {
		cc.SetAuthorURL(*s)
	}
	return cc
}

// SetGravatarMd5 sets the "gravatar_md5" field.
func (cc *CommentCreate) SetGravatarMd5(s string) *CommentCreate {
	cc.mutation.SetGravatarMd5(s)
	return cc
}

// SetNillableGravatarMd5 sets the "gravatar_md5" field if the given value is not nil.
func (cc *CommentCreate) SetNillableGravatarMd5(s *string) *CommentCreate {
	if s != nil {
		cc.SetGravatarMd5(*s)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentCreate) SetContent(s string) *CommentCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cc *CommentCreate) SetNillableContent(s *string) *CommentCreate {
	if s != nil {
		cc.SetContent(*s)
	}
	return cc
}

// SetUserAgent sets the "user_agent" field.
func (cc *CommentCreate) SetUserAgent(s string) *CommentCreate {
	cc.mutation.SetUserAgent(s)
	return cc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUserAgent(s *string) *CommentCreate {
	if s != nil {
		cc.SetUserAgent(*s)
	}
	return cc
}

// SetAvatar sets the "avatar" field.
func (cc *CommentCreate) SetAvatar(s string) *CommentCreate {
	cc.mutation.SetAvatar(s)
	return cc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAvatar(s *string) *CommentCreate {
	if s != nil {
		cc.SetAvatar(*s)
	}
	return cc
}

// SetParentID sets the "parent_id" field.
func (cc *CommentCreate) SetParentID(u uint32) *CommentCreate {
	cc.mutation.SetParentID(u)
	return cc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableParentID(u *uint32) *CommentCreate {
	if u != nil {
		cc.SetParentID(*u)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CommentCreate) SetStatus(u uint32) *CommentCreate {
	cc.mutation.SetStatus(u)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CommentCreate) SetNillableStatus(u *uint32) *CommentCreate {
	if u != nil {
		cc.SetStatus(*u)
	}
	return cc
}

// SetIsAdmin sets the "is_admin" field.
func (cc *CommentCreate) SetIsAdmin(b bool) *CommentCreate {
	cc.mutation.SetIsAdmin(b)
	return cc
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (cc *CommentCreate) SetNillableIsAdmin(b *bool) *CommentCreate {
	if b != nil {
		cc.SetIsAdmin(*b)
	}
	return cc
}

// SetAllowNotification sets the "allow_notification" field.
func (cc *CommentCreate) SetAllowNotification(b bool) *CommentCreate {
	cc.mutation.SetAllowNotification(b)
	return cc
}

// SetNillableAllowNotification sets the "allow_notification" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAllowNotification(b *bool) *CommentCreate {
	if b != nil {
		cc.SetAllowNotification(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CommentCreate) SetID(u uint32) *CommentCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := comment.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if v, ok := cc.mutation.Author(); ok {
		if err := comment.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Comment.author": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := comment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Comment.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(comment.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := cc.mutation.DeleteTime(); ok {
		_spec.SetField(comment.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := cc.mutation.Author(); ok {
		_spec.SetField(comment.FieldAuthor, field.TypeString, value)
		_node.Author = &value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(comment.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := cc.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = &value
	}
	if value, ok := cc.mutation.AuthorURL(); ok {
		_spec.SetField(comment.FieldAuthorURL, field.TypeString, value)
		_node.AuthorURL = &value
	}
	if value, ok := cc.mutation.GravatarMd5(); ok {
		_spec.SetField(comment.FieldGravatarMd5, field.TypeString, value)
		_node.GravatarMd5 = &value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = &value
	}
	if value, ok := cc.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := cc.mutation.Avatar(); ok {
		_spec.SetField(comment.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := cc.mutation.ParentID(); ok {
		_spec.SetField(comment.FieldParentID, field.TypeUint32, value)
		_node.ParentID = &value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeUint32, value)
		_node.Status = &value
	}
	if value, ok := cc.mutation.IsAdmin(); ok {
		_spec.SetField(comment.FieldIsAdmin, field.TypeBool, value)
		_node.IsAdmin = &value
	}
	if value, ok := cc.mutation.AllowNotification(); ok {
		_spec.SetField(comment.FieldAllowNotification, field.TypeBool, value)
		_node.AllowNotification = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cc *CommentCreate) OnConflict(opts ...sql.ConflictOption) *CommentUpsertOne {
	cc.conflict = opts
	return &CommentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommentCreate) OnConflictColumns(columns ...string) *CommentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertOne{
		create: cc,
	}
}

type (
	// CommentUpsertOne is the builder for "upsert"-ing
	//  one Comment node.
	CommentUpsertOne struct {
		create *CommentCreate
	}

	// CommentUpsert is the "OnConflict" setter.
	CommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CommentUpsert) SetUpdateTime(v int64) *CommentUpsert {
	u.Set(comment.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUpdateTime() *CommentUpsert {
	u.SetExcluded(comment.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *CommentUpsert) AddUpdateTime(v int64) *CommentUpsert {
	u.Add(comment.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CommentUpsert) ClearUpdateTime() *CommentUpsert {
	u.SetNull(comment.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *CommentUpsert) SetDeleteTime(v int64) *CommentUpsert {
	u.Set(comment.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *CommentUpsert) UpdateDeleteTime() *CommentUpsert {
	u.SetExcluded(comment.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *CommentUpsert) AddDeleteTime(v int64) *CommentUpsert {
	u.Add(comment.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *CommentUpsert) ClearDeleteTime() *CommentUpsert {
	u.SetNull(comment.FieldDeleteTime)
	return u
}

// SetAuthor sets the "author" field.
func (u *CommentUpsert) SetAuthor(v string) *CommentUpsert {
	u.Set(comment.FieldAuthor, v)
	return u
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAuthor() *CommentUpsert {
	u.SetExcluded(comment.FieldAuthor)
	return u
}

// ClearAuthor clears the value of the "author" field.
func (u *CommentUpsert) ClearAuthor() *CommentUpsert {
	u.SetNull(comment.FieldAuthor)
	return u
}

// SetEmail sets the "email" field.
func (u *CommentUpsert) SetEmail(v string) *CommentUpsert {
	u.Set(comment.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *CommentUpsert) UpdateEmail() *CommentUpsert {
	u.SetExcluded(comment.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *CommentUpsert) ClearEmail() *CommentUpsert {
	u.SetNull(comment.FieldEmail)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *CommentUpsert) SetIPAddress(v string) *CommentUpsert {
	u.Set(comment.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *CommentUpsert) UpdateIPAddress() *CommentUpsert {
	u.SetExcluded(comment.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *CommentUpsert) ClearIPAddress() *CommentUpsert {
	u.SetNull(comment.FieldIPAddress)
	return u
}

// SetAuthorURL sets the "author_url" field.
func (u *CommentUpsert) SetAuthorURL(v string) *CommentUpsert {
	u.Set(comment.FieldAuthorURL, v)
	return u
}

// UpdateAuthorURL sets the "author_url" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAuthorURL() *CommentUpsert {
	u.SetExcluded(comment.FieldAuthorURL)
	return u
}

// ClearAuthorURL clears the value of the "author_url" field.
func (u *CommentUpsert) ClearAuthorURL() *CommentUpsert {
	u.SetNull(comment.FieldAuthorURL)
	return u
}

// SetGravatarMd5 sets the "gravatar_md5" field.
func (u *CommentUpsert) SetGravatarMd5(v string) *CommentUpsert {
	u.Set(comment.FieldGravatarMd5, v)
	return u
}

// UpdateGravatarMd5 sets the "gravatar_md5" field to the value that was provided on create.
func (u *CommentUpsert) UpdateGravatarMd5() *CommentUpsert {
	u.SetExcluded(comment.FieldGravatarMd5)
	return u
}

// ClearGravatarMd5 clears the value of the "gravatar_md5" field.
func (u *CommentUpsert) ClearGravatarMd5() *CommentUpsert {
	u.SetNull(comment.FieldGravatarMd5)
	return u
}

// SetContent sets the "content" field.
func (u *CommentUpsert) SetContent(v string) *CommentUpsert {
	u.Set(comment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContent() *CommentUpsert {
	u.SetExcluded(comment.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *CommentUpsert) ClearContent() *CommentUpsert {
	u.SetNull(comment.FieldContent)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *CommentUpsert) SetUserAgent(v string) *CommentUpsert {
	u.Set(comment.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUserAgent() *CommentUpsert {
	u.SetExcluded(comment.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *CommentUpsert) ClearUserAgent() *CommentUpsert {
	u.SetNull(comment.FieldUserAgent)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *CommentUpsert) SetAvatar(v string) *CommentUpsert {
	u.Set(comment.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAvatar() *CommentUpsert {
	u.SetExcluded(comment.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *CommentUpsert) ClearAvatar() *CommentUpsert {
	u.SetNull(comment.FieldAvatar)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsert) SetParentID(v uint32) *CommentUpsert {
	u.Set(comment.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateParentID() *CommentUpsert {
	u.SetExcluded(comment.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *CommentUpsert) AddParentID(v uint32) *CommentUpsert {
	u.Add(comment.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsert) ClearParentID() *CommentUpsert {
	u.SetNull(comment.FieldParentID)
	return u
}

// SetStatus sets the "status" field.
func (u *CommentUpsert) SetStatus(v uint32) *CommentUpsert {
	u.Set(comment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsert) UpdateStatus() *CommentUpsert {
	u.SetExcluded(comment.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsert) AddStatus(v uint32) *CommentUpsert {
	u.Add(comment.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *CommentUpsert) ClearStatus() *CommentUpsert {
	u.SetNull(comment.FieldStatus)
	return u
}

// SetIsAdmin sets the "is_admin" field.
func (u *CommentUpsert) SetIsAdmin(v bool) *CommentUpsert {
	u.Set(comment.FieldIsAdmin, v)
	return u
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *CommentUpsert) UpdateIsAdmin() *CommentUpsert {
	u.SetExcluded(comment.FieldIsAdmin)
	return u
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (u *CommentUpsert) ClearIsAdmin() *CommentUpsert {
	u.SetNull(comment.FieldIsAdmin)
	return u
}

// SetAllowNotification sets the "allow_notification" field.
func (u *CommentUpsert) SetAllowNotification(v bool) *CommentUpsert {
	u.Set(comment.FieldAllowNotification, v)
	return u
}

// UpdateAllowNotification sets the "allow_notification" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAllowNotification() *CommentUpsert {
	u.SetExcluded(comment.FieldAllowNotification)
	return u
}

// ClearAllowNotification clears the value of the "allow_notification" field.
func (u *CommentUpsert) ClearAllowNotification() *CommentUpsert {
	u.SetNull(comment.FieldAllowNotification)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertOne) UpdateNewValues() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(comment.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(comment.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommentUpsertOne) Ignore() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertOne) DoNothing() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreate.OnConflict
// documentation for more info.
func (u *CommentUpsertOne) Update(set func(*CommentUpsert)) *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CommentUpsertOne) SetUpdateTime(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *CommentUpsertOne) AddUpdateTime(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUpdateTime() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CommentUpsertOne) ClearUpdateTime() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *CommentUpsertOne) SetDeleteTime(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *CommentUpsertOne) AddDeleteTime(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateDeleteTime() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *CommentUpsertOne) ClearDeleteTime() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeleteTime()
	})
}

// SetAuthor sets the "author" field.
func (u *CommentUpsertOne) SetAuthor(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAuthor() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAuthor()
	})
}

// ClearAuthor clears the value of the "author" field.
func (u *CommentUpsertOne) ClearAuthor() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAuthor()
	})
}

// SetEmail sets the "email" field.
func (u *CommentUpsertOne) SetEmail(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateEmail() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *CommentUpsertOne) ClearEmail() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearEmail()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *CommentUpsertOne) SetIPAddress(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateIPAddress() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *CommentUpsertOne) ClearIPAddress() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearIPAddress()
	})
}

// SetAuthorURL sets the "author_url" field.
func (u *CommentUpsertOne) SetAuthorURL(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAuthorURL(v)
	})
}

// UpdateAuthorURL sets the "author_url" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAuthorURL() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAuthorURL()
	})
}

// ClearAuthorURL clears the value of the "author_url" field.
func (u *CommentUpsertOne) ClearAuthorURL() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAuthorURL()
	})
}

// SetGravatarMd5 sets the "gravatar_md5" field.
func (u *CommentUpsertOne) SetGravatarMd5(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetGravatarMd5(v)
	})
}

// UpdateGravatarMd5 sets the "gravatar_md5" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateGravatarMd5() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateGravatarMd5()
	})
}

// ClearGravatarMd5 clears the value of the "gravatar_md5" field.
func (u *CommentUpsertOne) ClearGravatarMd5() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearGravatarMd5()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertOne) SetContent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *CommentUpsertOne) ClearContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearContent()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *CommentUpsertOne) SetUserAgent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUserAgent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *CommentUpsertOne) ClearUserAgent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserAgent()
	})
}

// SetAvatar sets the "avatar" field.
func (u *CommentUpsertOne) SetAvatar(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAvatar() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *CommentUpsertOne) ClearAvatar() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAvatar()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertOne) SetParentID(v uint32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CommentUpsertOne) AddParentID(v uint32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsertOne) ClearParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentID()
	})
}

// SetStatus sets the "status" field.
func (u *CommentUpsertOne) SetStatus(v uint32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsertOne) AddStatus(v uint32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateStatus() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *CommentUpsertOne) ClearStatus() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearStatus()
	})
}

// SetIsAdmin sets the "is_admin" field.
func (u *CommentUpsertOne) SetIsAdmin(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetIsAdmin(v)
	})
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateIsAdmin() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIsAdmin()
	})
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (u *CommentUpsertOne) ClearIsAdmin() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearIsAdmin()
	})
}

// SetAllowNotification sets the "allow_notification" field.
func (u *CommentUpsertOne) SetAllowNotification(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAllowNotification(v)
	})
}

// UpdateAllowNotification sets the "allow_notification" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAllowNotification() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAllowNotification()
	})
}

// ClearAllowNotification clears the value of the "allow_notification" field.
func (u *CommentUpsertOne) ClearAllowNotification() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAllowNotification()
	})
}

// Exec executes the query.
func (u *CommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
	conflict []sql.ConflictOption
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentUpsertBulk {
	ccb.conflict = opts
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflictColumns(columns ...string) *CommentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// CommentUpsertBulk is the builder for "upsert"-ing
// a bulk of Comment nodes.
type CommentUpsertBulk struct {
	create *CommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertBulk) UpdateNewValues() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(comment.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(comment.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommentUpsertBulk) Ignore() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertBulk) DoNothing() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreateBulk.OnConflict
// documentation for more info.
func (u *CommentUpsertBulk) Update(set func(*CommentUpsert)) *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CommentUpsertBulk) SetUpdateTime(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *CommentUpsertBulk) AddUpdateTime(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUpdateTime() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CommentUpsertBulk) ClearUpdateTime() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *CommentUpsertBulk) SetDeleteTime(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *CommentUpsertBulk) AddDeleteTime(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateDeleteTime() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *CommentUpsertBulk) ClearDeleteTime() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeleteTime()
	})
}

// SetAuthor sets the "author" field.
func (u *CommentUpsertBulk) SetAuthor(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAuthor() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAuthor()
	})
}

// ClearAuthor clears the value of the "author" field.
func (u *CommentUpsertBulk) ClearAuthor() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAuthor()
	})
}

// SetEmail sets the "email" field.
func (u *CommentUpsertBulk) SetEmail(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateEmail() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *CommentUpsertBulk) ClearEmail() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearEmail()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *CommentUpsertBulk) SetIPAddress(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateIPAddress() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *CommentUpsertBulk) ClearIPAddress() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearIPAddress()
	})
}

// SetAuthorURL sets the "author_url" field.
func (u *CommentUpsertBulk) SetAuthorURL(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAuthorURL(v)
	})
}

// UpdateAuthorURL sets the "author_url" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAuthorURL() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAuthorURL()
	})
}

// ClearAuthorURL clears the value of the "author_url" field.
func (u *CommentUpsertBulk) ClearAuthorURL() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAuthorURL()
	})
}

// SetGravatarMd5 sets the "gravatar_md5" field.
func (u *CommentUpsertBulk) SetGravatarMd5(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetGravatarMd5(v)
	})
}

// UpdateGravatarMd5 sets the "gravatar_md5" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateGravatarMd5() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateGravatarMd5()
	})
}

// ClearGravatarMd5 clears the value of the "gravatar_md5" field.
func (u *CommentUpsertBulk) ClearGravatarMd5() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearGravatarMd5()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertBulk) SetContent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *CommentUpsertBulk) ClearContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearContent()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *CommentUpsertBulk) SetUserAgent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUserAgent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *CommentUpsertBulk) ClearUserAgent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserAgent()
	})
}

// SetAvatar sets the "avatar" field.
func (u *CommentUpsertBulk) SetAvatar(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAvatar() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *CommentUpsertBulk) ClearAvatar() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAvatar()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertBulk) SetParentID(v uint32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CommentUpsertBulk) AddParentID(v uint32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsertBulk) ClearParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentID()
	})
}

// SetStatus sets the "status" field.
func (u *CommentUpsertBulk) SetStatus(v uint32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsertBulk) AddStatus(v uint32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateStatus() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *CommentUpsertBulk) ClearStatus() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearStatus()
	})
}

// SetIsAdmin sets the "is_admin" field.
func (u *CommentUpsertBulk) SetIsAdmin(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetIsAdmin(v)
	})
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateIsAdmin() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIsAdmin()
	})
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (u *CommentUpsertBulk) ClearIsAdmin() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearIsAdmin()
	})
}

// SetAllowNotification sets the "allow_notification" field.
func (u *CommentUpsertBulk) SetAllowNotification(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAllowNotification(v)
	})
}

// UpdateAllowNotification sets the "allow_notification" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAllowNotification() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAllowNotification()
	})
}

// ClearAllowNotification clears the value of the "allow_notification" field.
func (u *CommentUpsertBulk) ClearAllowNotification() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearAllowNotification()
	})
}

// Exec executes the query.
func (u *CommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
