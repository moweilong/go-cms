// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cms/app/core/service/internal/data/ent/post"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (pc *PostCreate) SetCreateTime(i int64) *PostCreate {
	pc.mutation.SetCreateTime(i)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PostCreate) SetNillableCreateTime(i *int64) *PostCreate {
	if i != nil {
		pc.SetCreateTime(*i)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PostCreate) SetUpdateTime(i int64) *PostCreate {
	pc.mutation.SetUpdateTime(i)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PostCreate) SetNillableUpdateTime(i *int64) *PostCreate {
	if i != nil {
		pc.SetUpdateTime(*i)
	}
	return pc
}

// SetDeleteTime sets the "delete_time" field.
func (pc *PostCreate) SetDeleteTime(i int64) *PostCreate {
	pc.mutation.SetDeleteTime(i)
	return pc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (pc *PostCreate) SetNillableDeleteTime(i *int64) *PostCreate {
	if i != nil {
		pc.SetDeleteTime(*i)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *PostCreate) SetTitle(s string) *PostCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *PostCreate) SetNillableTitle(s *string) *PostCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetSlug sets the "slug" field.
func (pc *PostCreate) SetSlug(s string) *PostCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pc *PostCreate) SetNillableSlug(s *string) *PostCreate {
	if s != nil {
		pc.SetSlug(*s)
	}
	return pc
}

// SetMetaKeywords sets the "meta_keywords" field.
func (pc *PostCreate) SetMetaKeywords(s string) *PostCreate {
	pc.mutation.SetMetaKeywords(s)
	return pc
}

// SetNillableMetaKeywords sets the "meta_keywords" field if the given value is not nil.
func (pc *PostCreate) SetNillableMetaKeywords(s *string) *PostCreate {
	if s != nil {
		pc.SetMetaKeywords(*s)
	}
	return pc
}

// SetMetaDescription sets the "meta_description" field.
func (pc *PostCreate) SetMetaDescription(s string) *PostCreate {
	pc.mutation.SetMetaDescription(s)
	return pc
}

// SetNillableMetaDescription sets the "meta_description" field if the given value is not nil.
func (pc *PostCreate) SetNillableMetaDescription(s *string) *PostCreate {
	if s != nil {
		pc.SetMetaDescription(*s)
	}
	return pc
}

// SetFullPath sets the "full_path" field.
func (pc *PostCreate) SetFullPath(s string) *PostCreate {
	pc.mutation.SetFullPath(s)
	return pc
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (pc *PostCreate) SetNillableFullPath(s *string) *PostCreate {
	if s != nil {
		pc.SetFullPath(*s)
	}
	return pc
}

// SetOriginalContent sets the "original_content" field.
func (pc *PostCreate) SetOriginalContent(s string) *PostCreate {
	pc.mutation.SetOriginalContent(s)
	return pc
}

// SetNillableOriginalContent sets the "original_content" field if the given value is not nil.
func (pc *PostCreate) SetNillableOriginalContent(s *string) *PostCreate {
	if s != nil {
		pc.SetOriginalContent(*s)
	}
	return pc
}

// SetContent sets the "content" field.
func (pc *PostCreate) SetContent(s string) *PostCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pc *PostCreate) SetNillableContent(s *string) *PostCreate {
	if s != nil {
		pc.SetContent(*s)
	}
	return pc
}

// SetSummary sets the "summary" field.
func (pc *PostCreate) SetSummary(s string) *PostCreate {
	pc.mutation.SetSummary(s)
	return pc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (pc *PostCreate) SetNillableSummary(s *string) *PostCreate {
	if s != nil {
		pc.SetSummary(*s)
	}
	return pc
}

// SetThumbnail sets the "thumbnail" field.
func (pc *PostCreate) SetThumbnail(s string) *PostCreate {
	pc.mutation.SetThumbnail(s)
	return pc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (pc *PostCreate) SetNillableThumbnail(s *string) *PostCreate {
	if s != nil {
		pc.SetThumbnail(*s)
	}
	return pc
}

// SetPassword sets the "password" field.
func (pc *PostCreate) SetPassword(s string) *PostCreate {
	pc.mutation.SetPassword(s)
	return pc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pc *PostCreate) SetNillablePassword(s *string) *PostCreate {
	if s != nil {
		pc.SetPassword(*s)
	}
	return pc
}

// SetTemplate sets the "template" field.
func (pc *PostCreate) SetTemplate(s string) *PostCreate {
	pc.mutation.SetTemplate(s)
	return pc
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (pc *PostCreate) SetNillableTemplate(s *string) *PostCreate {
	if s != nil {
		pc.SetTemplate(*s)
	}
	return pc
}

// SetCommentCount sets the "comment_count" field.
func (pc *PostCreate) SetCommentCount(i int32) *PostCreate {
	pc.mutation.SetCommentCount(i)
	return pc
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (pc *PostCreate) SetNillableCommentCount(i *int32) *PostCreate {
	if i != nil {
		pc.SetCommentCount(*i)
	}
	return pc
}

// SetVisits sets the "visits" field.
func (pc *PostCreate) SetVisits(i int32) *PostCreate {
	pc.mutation.SetVisits(i)
	return pc
}

// SetNillableVisits sets the "visits" field if the given value is not nil.
func (pc *PostCreate) SetNillableVisits(i *int32) *PostCreate {
	if i != nil {
		pc.SetVisits(*i)
	}
	return pc
}

// SetLikes sets the "likes" field.
func (pc *PostCreate) SetLikes(i int32) *PostCreate {
	pc.mutation.SetLikes(i)
	return pc
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (pc *PostCreate) SetNillableLikes(i *int32) *PostCreate {
	if i != nil {
		pc.SetLikes(*i)
	}
	return pc
}

// SetWordCount sets the "word_count" field.
func (pc *PostCreate) SetWordCount(i int32) *PostCreate {
	pc.mutation.SetWordCount(i)
	return pc
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (pc *PostCreate) SetNillableWordCount(i *int32) *PostCreate {
	if i != nil {
		pc.SetWordCount(*i)
	}
	return pc
}

// SetTopPriority sets the "top_priority" field.
func (pc *PostCreate) SetTopPriority(i int32) *PostCreate {
	pc.mutation.SetTopPriority(i)
	return pc
}

// SetNillableTopPriority sets the "top_priority" field if the given value is not nil.
func (pc *PostCreate) SetNillableTopPriority(i *int32) *PostCreate {
	if i != nil {
		pc.SetTopPriority(*i)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PostCreate) SetStatus(i int32) *PostCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PostCreate) SetNillableStatus(i *int32) *PostCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetEditorType sets the "editor_type" field.
func (pc *PostCreate) SetEditorType(i int32) *PostCreate {
	pc.mutation.SetEditorType(i)
	return pc
}

// SetNillableEditorType sets the "editor_type" field if the given value is not nil.
func (pc *PostCreate) SetNillableEditorType(i *int32) *PostCreate {
	if i != nil {
		pc.SetEditorType(*i)
	}
	return pc
}

// SetEditTime sets the "edit_time" field.
func (pc *PostCreate) SetEditTime(i int64) *PostCreate {
	pc.mutation.SetEditTime(i)
	return pc
}

// SetNillableEditTime sets the "edit_time" field if the given value is not nil.
func (pc *PostCreate) SetNillableEditTime(i *int64) *PostCreate {
	if i != nil {
		pc.SetEditTime(*i)
	}
	return pc
}

// SetDisallowComment sets the "disallow_comment" field.
func (pc *PostCreate) SetDisallowComment(b bool) *PostCreate {
	pc.mutation.SetDisallowComment(b)
	return pc
}

// SetNillableDisallowComment sets the "disallow_comment" field if the given value is not nil.
func (pc *PostCreate) SetNillableDisallowComment(b *bool) *PostCreate {
	if b != nil {
		pc.SetDisallowComment(*b)
	}
	return pc
}

// SetInProgress sets the "in_progress" field.
func (pc *PostCreate) SetInProgress(b bool) *PostCreate {
	pc.mutation.SetInProgress(b)
	return pc
}

// SetNillableInProgress sets the "in_progress" field if the given value is not nil.
func (pc *PostCreate) SetNillableInProgress(b *bool) *PostCreate {
	if b != nil {
		pc.SetInProgress(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PostCreate) SetID(u uint32) *PostCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PostMutation object of the builder.
func (pc *PostCreate) Mutation() *PostMutation {
	return pc.mutation
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PostCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PostCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PostCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := post.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PostCreate) check() error {
	if v, ok := pc.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := post.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Post.id": %w`, err)}
		}
	}
	return nil
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PostCreate) createSpec() (*Post, *sqlgraph.CreateSpec) {
	var (
		_node = &Post{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(post.Table, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(post.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(post.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := pc.mutation.DeleteTime(); ok {
		_spec.SetField(post.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(post.FieldSlug, field.TypeString, value)
		_node.Slug = &value
	}
	if value, ok := pc.mutation.MetaKeywords(); ok {
		_spec.SetField(post.FieldMetaKeywords, field.TypeString, value)
		_node.MetaKeywords = &value
	}
	if value, ok := pc.mutation.MetaDescription(); ok {
		_spec.SetField(post.FieldMetaDescription, field.TypeString, value)
		_node.MetaDescription = &value
	}
	if value, ok := pc.mutation.FullPath(); ok {
		_spec.SetField(post.FieldFullPath, field.TypeString, value)
		_node.FullPath = &value
	}
	if value, ok := pc.mutation.OriginalContent(); ok {
		_spec.SetField(post.FieldOriginalContent, field.TypeString, value)
		_node.OriginalContent = &value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
		_node.Content = &value
	}
	if value, ok := pc.mutation.Summary(); ok {
		_spec.SetField(post.FieldSummary, field.TypeString, value)
		_node.Summary = &value
	}
	if value, ok := pc.mutation.Thumbnail(); ok {
		_spec.SetField(post.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = &value
	}
	if value, ok := pc.mutation.Password(); ok {
		_spec.SetField(post.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := pc.mutation.Template(); ok {
		_spec.SetField(post.FieldTemplate, field.TypeString, value)
		_node.Template = &value
	}
	if value, ok := pc.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt32, value)
		_node.CommentCount = &value
	}
	if value, ok := pc.mutation.Visits(); ok {
		_spec.SetField(post.FieldVisits, field.TypeInt32, value)
		_node.Visits = &value
	}
	if value, ok := pc.mutation.Likes(); ok {
		_spec.SetField(post.FieldLikes, field.TypeInt32, value)
		_node.Likes = &value
	}
	if value, ok := pc.mutation.WordCount(); ok {
		_spec.SetField(post.FieldWordCount, field.TypeInt32, value)
		_node.WordCount = &value
	}
	if value, ok := pc.mutation.TopPriority(); ok {
		_spec.SetField(post.FieldTopPriority, field.TypeInt32, value)
		_node.TopPriority = &value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeInt32, value)
		_node.Status = &value
	}
	if value, ok := pc.mutation.EditorType(); ok {
		_spec.SetField(post.FieldEditorType, field.TypeInt32, value)
		_node.EditorType = &value
	}
	if value, ok := pc.mutation.EditTime(); ok {
		_spec.SetField(post.FieldEditTime, field.TypeInt64, value)
		_node.EditTime = &value
	}
	if value, ok := pc.mutation.DisallowComment(); ok {
		_spec.SetField(post.FieldDisallowComment, field.TypeBool, value)
		_node.DisallowComment = &value
	}
	if value, ok := pc.mutation.InProgress(); ok {
		_spec.SetField(post.FieldInProgress, field.TypeBool, value)
		_node.InProgress = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (pc *PostCreate) OnConflict(opts ...sql.ConflictOption) *PostUpsertOne {
	pc.conflict = opts
	return &PostUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PostCreate) OnConflictColumns(columns ...string) *PostUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertOne{
		create: pc,
	}
}

type (
	// PostUpsertOne is the builder for "upsert"-ing
	//  one Post node.
	PostUpsertOne struct {
		create *PostCreate
	}

	// PostUpsert is the "OnConflict" setter.
	PostUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *PostUpsert) SetUpdateTime(v int64) *PostUpsert {
	u.Set(post.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PostUpsert) UpdateUpdateTime() *PostUpsert {
	u.SetExcluded(post.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *PostUpsert) AddUpdateTime(v int64) *PostUpsert {
	u.Add(post.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *PostUpsert) ClearUpdateTime() *PostUpsert {
	u.SetNull(post.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *PostUpsert) SetDeleteTime(v int64) *PostUpsert {
	u.Set(post.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *PostUpsert) UpdateDeleteTime() *PostUpsert {
	u.SetExcluded(post.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *PostUpsert) AddDeleteTime(v int64) *PostUpsert {
	u.Add(post.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *PostUpsert) ClearDeleteTime() *PostUpsert {
	u.SetNull(post.FieldDeleteTime)
	return u
}

// SetTitle sets the "title" field.
func (u *PostUpsert) SetTitle(v string) *PostUpsert {
	u.Set(post.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsert) UpdateTitle() *PostUpsert {
	u.SetExcluded(post.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsert) ClearTitle() *PostUpsert {
	u.SetNull(post.FieldTitle)
	return u
}

// SetSlug sets the "slug" field.
func (u *PostUpsert) SetSlug(v string) *PostUpsert {
	u.Set(post.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsert) UpdateSlug() *PostUpsert {
	u.SetExcluded(post.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsert) ClearSlug() *PostUpsert {
	u.SetNull(post.FieldSlug)
	return u
}

// SetMetaKeywords sets the "meta_keywords" field.
func (u *PostUpsert) SetMetaKeywords(v string) *PostUpsert {
	u.Set(post.FieldMetaKeywords, v)
	return u
}

// UpdateMetaKeywords sets the "meta_keywords" field to the value that was provided on create.
func (u *PostUpsert) UpdateMetaKeywords() *PostUpsert {
	u.SetExcluded(post.FieldMetaKeywords)
	return u
}

// ClearMetaKeywords clears the value of the "meta_keywords" field.
func (u *PostUpsert) ClearMetaKeywords() *PostUpsert {
	u.SetNull(post.FieldMetaKeywords)
	return u
}

// SetMetaDescription sets the "meta_description" field.
func (u *PostUpsert) SetMetaDescription(v string) *PostUpsert {
	u.Set(post.FieldMetaDescription, v)
	return u
}

// UpdateMetaDescription sets the "meta_description" field to the value that was provided on create.
func (u *PostUpsert) UpdateMetaDescription() *PostUpsert {
	u.SetExcluded(post.FieldMetaDescription)
	return u
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (u *PostUpsert) ClearMetaDescription() *PostUpsert {
	u.SetNull(post.FieldMetaDescription)
	return u
}

// SetFullPath sets the "full_path" field.
func (u *PostUpsert) SetFullPath(v string) *PostUpsert {
	u.Set(post.FieldFullPath, v)
	return u
}

// UpdateFullPath sets the "full_path" field to the value that was provided on create.
func (u *PostUpsert) UpdateFullPath() *PostUpsert {
	u.SetExcluded(post.FieldFullPath)
	return u
}

// ClearFullPath clears the value of the "full_path" field.
func (u *PostUpsert) ClearFullPath() *PostUpsert {
	u.SetNull(post.FieldFullPath)
	return u
}

// SetOriginalContent sets the "original_content" field.
func (u *PostUpsert) SetOriginalContent(v string) *PostUpsert {
	u.Set(post.FieldOriginalContent, v)
	return u
}

// UpdateOriginalContent sets the "original_content" field to the value that was provided on create.
func (u *PostUpsert) UpdateOriginalContent() *PostUpsert {
	u.SetExcluded(post.FieldOriginalContent)
	return u
}

// ClearOriginalContent clears the value of the "original_content" field.
func (u *PostUpsert) ClearOriginalContent() *PostUpsert {
	u.SetNull(post.FieldOriginalContent)
	return u
}

// SetContent sets the "content" field.
func (u *PostUpsert) SetContent(v string) *PostUpsert {
	u.Set(post.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostUpsert) UpdateContent() *PostUpsert {
	u.SetExcluded(post.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *PostUpsert) ClearContent() *PostUpsert {
	u.SetNull(post.FieldContent)
	return u
}

// SetSummary sets the "summary" field.
func (u *PostUpsert) SetSummary(v string) *PostUpsert {
	u.Set(post.FieldSummary, v)
	return u
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *PostUpsert) UpdateSummary() *PostUpsert {
	u.SetExcluded(post.FieldSummary)
	return u
}

// ClearSummary clears the value of the "summary" field.
func (u *PostUpsert) ClearSummary() *PostUpsert {
	u.SetNull(post.FieldSummary)
	return u
}

// SetThumbnail sets the "thumbnail" field.
func (u *PostUpsert) SetThumbnail(v string) *PostUpsert {
	u.Set(post.FieldThumbnail, v)
	return u
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *PostUpsert) UpdateThumbnail() *PostUpsert {
	u.SetExcluded(post.FieldThumbnail)
	return u
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *PostUpsert) ClearThumbnail() *PostUpsert {
	u.SetNull(post.FieldThumbnail)
	return u
}

// SetPassword sets the "password" field.
func (u *PostUpsert) SetPassword(v string) *PostUpsert {
	u.Set(post.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *PostUpsert) UpdatePassword() *PostUpsert {
	u.SetExcluded(post.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *PostUpsert) ClearPassword() *PostUpsert {
	u.SetNull(post.FieldPassword)
	return u
}

// SetTemplate sets the "template" field.
func (u *PostUpsert) SetTemplate(v string) *PostUpsert {
	u.Set(post.FieldTemplate, v)
	return u
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *PostUpsert) UpdateTemplate() *PostUpsert {
	u.SetExcluded(post.FieldTemplate)
	return u
}

// ClearTemplate clears the value of the "template" field.
func (u *PostUpsert) ClearTemplate() *PostUpsert {
	u.SetNull(post.FieldTemplate)
	return u
}

// SetCommentCount sets the "comment_count" field.
func (u *PostUpsert) SetCommentCount(v int32) *PostUpsert {
	u.Set(post.FieldCommentCount, v)
	return u
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *PostUpsert) UpdateCommentCount() *PostUpsert {
	u.SetExcluded(post.FieldCommentCount)
	return u
}

// AddCommentCount adds v to the "comment_count" field.
func (u *PostUpsert) AddCommentCount(v int32) *PostUpsert {
	u.Add(post.FieldCommentCount, v)
	return u
}

// ClearCommentCount clears the value of the "comment_count" field.
func (u *PostUpsert) ClearCommentCount() *PostUpsert {
	u.SetNull(post.FieldCommentCount)
	return u
}

// SetVisits sets the "visits" field.
func (u *PostUpsert) SetVisits(v int32) *PostUpsert {
	u.Set(post.FieldVisits, v)
	return u
}

// UpdateVisits sets the "visits" field to the value that was provided on create.
func (u *PostUpsert) UpdateVisits() *PostUpsert {
	u.SetExcluded(post.FieldVisits)
	return u
}

// AddVisits adds v to the "visits" field.
func (u *PostUpsert) AddVisits(v int32) *PostUpsert {
	u.Add(post.FieldVisits, v)
	return u
}

// ClearVisits clears the value of the "visits" field.
func (u *PostUpsert) ClearVisits() *PostUpsert {
	u.SetNull(post.FieldVisits)
	return u
}

// SetLikes sets the "likes" field.
func (u *PostUpsert) SetLikes(v int32) *PostUpsert {
	u.Set(post.FieldLikes, v)
	return u
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *PostUpsert) UpdateLikes() *PostUpsert {
	u.SetExcluded(post.FieldLikes)
	return u
}

// AddLikes adds v to the "likes" field.
func (u *PostUpsert) AddLikes(v int32) *PostUpsert {
	u.Add(post.FieldLikes, v)
	return u
}

// ClearLikes clears the value of the "likes" field.
func (u *PostUpsert) ClearLikes() *PostUpsert {
	u.SetNull(post.FieldLikes)
	return u
}

// SetWordCount sets the "word_count" field.
func (u *PostUpsert) SetWordCount(v int32) *PostUpsert {
	u.Set(post.FieldWordCount, v)
	return u
}

// UpdateWordCount sets the "word_count" field to the value that was provided on create.
func (u *PostUpsert) UpdateWordCount() *PostUpsert {
	u.SetExcluded(post.FieldWordCount)
	return u
}

// AddWordCount adds v to the "word_count" field.
func (u *PostUpsert) AddWordCount(v int32) *PostUpsert {
	u.Add(post.FieldWordCount, v)
	return u
}

// ClearWordCount clears the value of the "word_count" field.
func (u *PostUpsert) ClearWordCount() *PostUpsert {
	u.SetNull(post.FieldWordCount)
	return u
}

// SetTopPriority sets the "top_priority" field.
func (u *PostUpsert) SetTopPriority(v int32) *PostUpsert {
	u.Set(post.FieldTopPriority, v)
	return u
}

// UpdateTopPriority sets the "top_priority" field to the value that was provided on create.
func (u *PostUpsert) UpdateTopPriority() *PostUpsert {
	u.SetExcluded(post.FieldTopPriority)
	return u
}

// AddTopPriority adds v to the "top_priority" field.
func (u *PostUpsert) AddTopPriority(v int32) *PostUpsert {
	u.Add(post.FieldTopPriority, v)
	return u
}

// ClearTopPriority clears the value of the "top_priority" field.
func (u *PostUpsert) ClearTopPriority() *PostUpsert {
	u.SetNull(post.FieldTopPriority)
	return u
}

// SetStatus sets the "status" field.
func (u *PostUpsert) SetStatus(v int32) *PostUpsert {
	u.Set(post.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostUpsert) UpdateStatus() *PostUpsert {
	u.SetExcluded(post.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PostUpsert) AddStatus(v int32) *PostUpsert {
	u.Add(post.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *PostUpsert) ClearStatus() *PostUpsert {
	u.SetNull(post.FieldStatus)
	return u
}

// SetEditorType sets the "editor_type" field.
func (u *PostUpsert) SetEditorType(v int32) *PostUpsert {
	u.Set(post.FieldEditorType, v)
	return u
}

// UpdateEditorType sets the "editor_type" field to the value that was provided on create.
func (u *PostUpsert) UpdateEditorType() *PostUpsert {
	u.SetExcluded(post.FieldEditorType)
	return u
}

// AddEditorType adds v to the "editor_type" field.
func (u *PostUpsert) AddEditorType(v int32) *PostUpsert {
	u.Add(post.FieldEditorType, v)
	return u
}

// ClearEditorType clears the value of the "editor_type" field.
func (u *PostUpsert) ClearEditorType() *PostUpsert {
	u.SetNull(post.FieldEditorType)
	return u
}

// SetEditTime sets the "edit_time" field.
func (u *PostUpsert) SetEditTime(v int64) *PostUpsert {
	u.Set(post.FieldEditTime, v)
	return u
}

// UpdateEditTime sets the "edit_time" field to the value that was provided on create.
func (u *PostUpsert) UpdateEditTime() *PostUpsert {
	u.SetExcluded(post.FieldEditTime)
	return u
}

// AddEditTime adds v to the "edit_time" field.
func (u *PostUpsert) AddEditTime(v int64) *PostUpsert {
	u.Add(post.FieldEditTime, v)
	return u
}

// ClearEditTime clears the value of the "edit_time" field.
func (u *PostUpsert) ClearEditTime() *PostUpsert {
	u.SetNull(post.FieldEditTime)
	return u
}

// SetDisallowComment sets the "disallow_comment" field.
func (u *PostUpsert) SetDisallowComment(v bool) *PostUpsert {
	u.Set(post.FieldDisallowComment, v)
	return u
}

// UpdateDisallowComment sets the "disallow_comment" field to the value that was provided on create.
func (u *PostUpsert) UpdateDisallowComment() *PostUpsert {
	u.SetExcluded(post.FieldDisallowComment)
	return u
}

// ClearDisallowComment clears the value of the "disallow_comment" field.
func (u *PostUpsert) ClearDisallowComment() *PostUpsert {
	u.SetNull(post.FieldDisallowComment)
	return u
}

// SetInProgress sets the "in_progress" field.
func (u *PostUpsert) SetInProgress(v bool) *PostUpsert {
	u.Set(post.FieldInProgress, v)
	return u
}

// UpdateInProgress sets the "in_progress" field to the value that was provided on create.
func (u *PostUpsert) UpdateInProgress() *PostUpsert {
	u.SetExcluded(post.FieldInProgress)
	return u
}

// ClearInProgress clears the value of the "in_progress" field.
func (u *PostUpsert) ClearInProgress() *PostUpsert {
	u.SetNull(post.FieldInProgress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(post.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostUpsertOne) UpdateNewValues() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(post.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(post.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostUpsertOne) Ignore() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertOne) DoNothing() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreate.OnConflict
// documentation for more info.
func (u *PostUpsertOne) Update(set func(*PostUpsert)) *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PostUpsertOne) SetUpdateTime(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *PostUpsertOne) AddUpdateTime(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateUpdateTime() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *PostUpsertOne) ClearUpdateTime() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *PostUpsertOne) SetDeleteTime(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *PostUpsertOne) AddDeleteTime(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDeleteTime() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *PostUpsertOne) ClearDeleteTime() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeleteTime()
	})
}

// SetTitle sets the "title" field.
func (u *PostUpsertOne) SetTitle(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateTitle() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsertOne) ClearTitle() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearTitle()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertOne) SetSlug(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsertOne) ClearSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearSlug()
	})
}

// SetMetaKeywords sets the "meta_keywords" field.
func (u *PostUpsertOne) SetMetaKeywords(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetMetaKeywords(v)
	})
}

// UpdateMetaKeywords sets the "meta_keywords" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateMetaKeywords() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateMetaKeywords()
	})
}

// ClearMetaKeywords clears the value of the "meta_keywords" field.
func (u *PostUpsertOne) ClearMetaKeywords() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearMetaKeywords()
	})
}

// SetMetaDescription sets the "meta_description" field.
func (u *PostUpsertOne) SetMetaDescription(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetMetaDescription(v)
	})
}

// UpdateMetaDescription sets the "meta_description" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateMetaDescription() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateMetaDescription()
	})
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (u *PostUpsertOne) ClearMetaDescription() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearMetaDescription()
	})
}

// SetFullPath sets the "full_path" field.
func (u *PostUpsertOne) SetFullPath(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetFullPath(v)
	})
}

// UpdateFullPath sets the "full_path" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateFullPath() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFullPath()
	})
}

// ClearFullPath clears the value of the "full_path" field.
func (u *PostUpsertOne) ClearFullPath() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearFullPath()
	})
}

// SetOriginalContent sets the "original_content" field.
func (u *PostUpsertOne) SetOriginalContent(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetOriginalContent(v)
	})
}

// UpdateOriginalContent sets the "original_content" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateOriginalContent() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateOriginalContent()
	})
}

// ClearOriginalContent clears the value of the "original_content" field.
func (u *PostUpsertOne) ClearOriginalContent() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearOriginalContent()
	})
}

// SetContent sets the "content" field.
func (u *PostUpsertOne) SetContent(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateContent() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *PostUpsertOne) ClearContent() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearContent()
	})
}

// SetSummary sets the "summary" field.
func (u *PostUpsertOne) SetSummary(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateSummary() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSummary()
	})
}

// ClearSummary clears the value of the "summary" field.
func (u *PostUpsertOne) ClearSummary() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearSummary()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *PostUpsertOne) SetThumbnail(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateThumbnail() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *PostUpsertOne) ClearThumbnail() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearThumbnail()
	})
}

// SetPassword sets the "password" field.
func (u *PostUpsertOne) SetPassword(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *PostUpsertOne) UpdatePassword() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *PostUpsertOne) ClearPassword() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearPassword()
	})
}

// SetTemplate sets the "template" field.
func (u *PostUpsertOne) SetTemplate(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetTemplate(v)
	})
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateTemplate() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTemplate()
	})
}

// ClearTemplate clears the value of the "template" field.
func (u *PostUpsertOne) ClearTemplate() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearTemplate()
	})
}

// SetCommentCount sets the "comment_count" field.
func (u *PostUpsertOne) SetCommentCount(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetCommentCount(v)
	})
}

// AddCommentCount adds v to the "comment_count" field.
func (u *PostUpsertOne) AddCommentCount(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddCommentCount(v)
	})
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateCommentCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCommentCount()
	})
}

// ClearCommentCount clears the value of the "comment_count" field.
func (u *PostUpsertOne) ClearCommentCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearCommentCount()
	})
}

// SetVisits sets the "visits" field.
func (u *PostUpsertOne) SetVisits(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetVisits(v)
	})
}

// AddVisits adds v to the "visits" field.
func (u *PostUpsertOne) AddVisits(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddVisits(v)
	})
}

// UpdateVisits sets the "visits" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateVisits() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateVisits()
	})
}

// ClearVisits clears the value of the "visits" field.
func (u *PostUpsertOne) ClearVisits() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearVisits()
	})
}

// SetLikes sets the "likes" field.
func (u *PostUpsertOne) SetLikes(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *PostUpsertOne) AddLikes(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateLikes() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateLikes()
	})
}

// ClearLikes clears the value of the "likes" field.
func (u *PostUpsertOne) ClearLikes() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearLikes()
	})
}

// SetWordCount sets the "word_count" field.
func (u *PostUpsertOne) SetWordCount(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetWordCount(v)
	})
}

// AddWordCount adds v to the "word_count" field.
func (u *PostUpsertOne) AddWordCount(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddWordCount(v)
	})
}

// UpdateWordCount sets the "word_count" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateWordCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateWordCount()
	})
}

// ClearWordCount clears the value of the "word_count" field.
func (u *PostUpsertOne) ClearWordCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearWordCount()
	})
}

// SetTopPriority sets the "top_priority" field.
func (u *PostUpsertOne) SetTopPriority(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetTopPriority(v)
	})
}

// AddTopPriority adds v to the "top_priority" field.
func (u *PostUpsertOne) AddTopPriority(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddTopPriority(v)
	})
}

// UpdateTopPriority sets the "top_priority" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateTopPriority() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTopPriority()
	})
}

// ClearTopPriority clears the value of the "top_priority" field.
func (u *PostUpsertOne) ClearTopPriority() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearTopPriority()
	})
}

// SetStatus sets the "status" field.
func (u *PostUpsertOne) SetStatus(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PostUpsertOne) AddStatus(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateStatus() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostUpsertOne) ClearStatus() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearStatus()
	})
}

// SetEditorType sets the "editor_type" field.
func (u *PostUpsertOne) SetEditorType(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetEditorType(v)
	})
}

// AddEditorType adds v to the "editor_type" field.
func (u *PostUpsertOne) AddEditorType(v int32) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddEditorType(v)
	})
}

// UpdateEditorType sets the "editor_type" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateEditorType() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateEditorType()
	})
}

// ClearEditorType clears the value of the "editor_type" field.
func (u *PostUpsertOne) ClearEditorType() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearEditorType()
	})
}

// SetEditTime sets the "edit_time" field.
func (u *PostUpsertOne) SetEditTime(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetEditTime(v)
	})
}

// AddEditTime adds v to the "edit_time" field.
func (u *PostUpsertOne) AddEditTime(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddEditTime(v)
	})
}

// UpdateEditTime sets the "edit_time" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateEditTime() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateEditTime()
	})
}

// ClearEditTime clears the value of the "edit_time" field.
func (u *PostUpsertOne) ClearEditTime() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearEditTime()
	})
}

// SetDisallowComment sets the "disallow_comment" field.
func (u *PostUpsertOne) SetDisallowComment(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDisallowComment(v)
	})
}

// UpdateDisallowComment sets the "disallow_comment" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDisallowComment() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDisallowComment()
	})
}

// ClearDisallowComment clears the value of the "disallow_comment" field.
func (u *PostUpsertOne) ClearDisallowComment() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDisallowComment()
	})
}

// SetInProgress sets the "in_progress" field.
func (u *PostUpsertOne) SetInProgress(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetInProgress(v)
	})
}

// UpdateInProgress sets the "in_progress" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateInProgress() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateInProgress()
	})
}

// ClearInProgress clears the value of the "in_progress" field.
func (u *PostUpsertOne) ClearInProgress() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearInProgress()
	})
}

// Exec executes the query.
func (u *PostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostCreateBulk is the builder for creating many Post entities in bulk.
type PostCreateBulk struct {
	config
	err      error
	builders []*PostCreate
	conflict []sql.ConflictOption
}

// Save creates the Post entities in the database.
func (pcb *PostCreateBulk) Save(ctx context.Context) ([]*Post, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Post, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PostCreateBulk) SaveX(ctx context.Context) []*Post {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PostCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PostCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (pcb *PostCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostUpsertBulk {
	pcb.conflict = opts
	return &PostUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PostCreateBulk) OnConflictColumns(columns ...string) *PostUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertBulk{
		create: pcb,
	}
}

// PostUpsertBulk is the builder for "upsert"-ing
// a bulk of Post nodes.
type PostUpsertBulk struct {
	create *PostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(post.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostUpsertBulk) UpdateNewValues() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(post.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(post.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostUpsertBulk) Ignore() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertBulk) DoNothing() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreateBulk.OnConflict
// documentation for more info.
func (u *PostUpsertBulk) Update(set func(*PostUpsert)) *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PostUpsertBulk) SetUpdateTime(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *PostUpsertBulk) AddUpdateTime(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateUpdateTime() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *PostUpsertBulk) ClearUpdateTime() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *PostUpsertBulk) SetDeleteTime(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *PostUpsertBulk) AddDeleteTime(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDeleteTime() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *PostUpsertBulk) ClearDeleteTime() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeleteTime()
	})
}

// SetTitle sets the "title" field.
func (u *PostUpsertBulk) SetTitle(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateTitle() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PostUpsertBulk) ClearTitle() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearTitle()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertBulk) SetSlug(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostUpsertBulk) ClearSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearSlug()
	})
}

// SetMetaKeywords sets the "meta_keywords" field.
func (u *PostUpsertBulk) SetMetaKeywords(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetMetaKeywords(v)
	})
}

// UpdateMetaKeywords sets the "meta_keywords" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateMetaKeywords() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateMetaKeywords()
	})
}

// ClearMetaKeywords clears the value of the "meta_keywords" field.
func (u *PostUpsertBulk) ClearMetaKeywords() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearMetaKeywords()
	})
}

// SetMetaDescription sets the "meta_description" field.
func (u *PostUpsertBulk) SetMetaDescription(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetMetaDescription(v)
	})
}

// UpdateMetaDescription sets the "meta_description" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateMetaDescription() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateMetaDescription()
	})
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (u *PostUpsertBulk) ClearMetaDescription() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearMetaDescription()
	})
}

// SetFullPath sets the "full_path" field.
func (u *PostUpsertBulk) SetFullPath(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetFullPath(v)
	})
}

// UpdateFullPath sets the "full_path" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateFullPath() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFullPath()
	})
}

// ClearFullPath clears the value of the "full_path" field.
func (u *PostUpsertBulk) ClearFullPath() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearFullPath()
	})
}

// SetOriginalContent sets the "original_content" field.
func (u *PostUpsertBulk) SetOriginalContent(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetOriginalContent(v)
	})
}

// UpdateOriginalContent sets the "original_content" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateOriginalContent() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateOriginalContent()
	})
}

// ClearOriginalContent clears the value of the "original_content" field.
func (u *PostUpsertBulk) ClearOriginalContent() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearOriginalContent()
	})
}

// SetContent sets the "content" field.
func (u *PostUpsertBulk) SetContent(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateContent() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *PostUpsertBulk) ClearContent() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearContent()
	})
}

// SetSummary sets the "summary" field.
func (u *PostUpsertBulk) SetSummary(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateSummary() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSummary()
	})
}

// ClearSummary clears the value of the "summary" field.
func (u *PostUpsertBulk) ClearSummary() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearSummary()
	})
}

// SetThumbnail sets the "thumbnail" field.
func (u *PostUpsertBulk) SetThumbnail(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "thumbnail" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateThumbnail() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateThumbnail()
	})
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (u *PostUpsertBulk) ClearThumbnail() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearThumbnail()
	})
}

// SetPassword sets the "password" field.
func (u *PostUpsertBulk) SetPassword(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdatePassword() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *PostUpsertBulk) ClearPassword() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearPassword()
	})
}

// SetTemplate sets the "template" field.
func (u *PostUpsertBulk) SetTemplate(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetTemplate(v)
	})
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateTemplate() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTemplate()
	})
}

// ClearTemplate clears the value of the "template" field.
func (u *PostUpsertBulk) ClearTemplate() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearTemplate()
	})
}

// SetCommentCount sets the "comment_count" field.
func (u *PostUpsertBulk) SetCommentCount(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetCommentCount(v)
	})
}

// AddCommentCount adds v to the "comment_count" field.
func (u *PostUpsertBulk) AddCommentCount(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddCommentCount(v)
	})
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateCommentCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCommentCount()
	})
}

// ClearCommentCount clears the value of the "comment_count" field.
func (u *PostUpsertBulk) ClearCommentCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearCommentCount()
	})
}

// SetVisits sets the "visits" field.
func (u *PostUpsertBulk) SetVisits(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetVisits(v)
	})
}

// AddVisits adds v to the "visits" field.
func (u *PostUpsertBulk) AddVisits(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddVisits(v)
	})
}

// UpdateVisits sets the "visits" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateVisits() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateVisits()
	})
}

// ClearVisits clears the value of the "visits" field.
func (u *PostUpsertBulk) ClearVisits() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearVisits()
	})
}

// SetLikes sets the "likes" field.
func (u *PostUpsertBulk) SetLikes(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *PostUpsertBulk) AddLikes(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateLikes() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateLikes()
	})
}

// ClearLikes clears the value of the "likes" field.
func (u *PostUpsertBulk) ClearLikes() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearLikes()
	})
}

// SetWordCount sets the "word_count" field.
func (u *PostUpsertBulk) SetWordCount(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetWordCount(v)
	})
}

// AddWordCount adds v to the "word_count" field.
func (u *PostUpsertBulk) AddWordCount(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddWordCount(v)
	})
}

// UpdateWordCount sets the "word_count" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateWordCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateWordCount()
	})
}

// ClearWordCount clears the value of the "word_count" field.
func (u *PostUpsertBulk) ClearWordCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearWordCount()
	})
}

// SetTopPriority sets the "top_priority" field.
func (u *PostUpsertBulk) SetTopPriority(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetTopPriority(v)
	})
}

// AddTopPriority adds v to the "top_priority" field.
func (u *PostUpsertBulk) AddTopPriority(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddTopPriority(v)
	})
}

// UpdateTopPriority sets the "top_priority" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateTopPriority() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateTopPriority()
	})
}

// ClearTopPriority clears the value of the "top_priority" field.
func (u *PostUpsertBulk) ClearTopPriority() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearTopPriority()
	})
}

// SetStatus sets the "status" field.
func (u *PostUpsertBulk) SetStatus(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PostUpsertBulk) AddStatus(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateStatus() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostUpsertBulk) ClearStatus() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearStatus()
	})
}

// SetEditorType sets the "editor_type" field.
func (u *PostUpsertBulk) SetEditorType(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetEditorType(v)
	})
}

// AddEditorType adds v to the "editor_type" field.
func (u *PostUpsertBulk) AddEditorType(v int32) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddEditorType(v)
	})
}

// UpdateEditorType sets the "editor_type" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateEditorType() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateEditorType()
	})
}

// ClearEditorType clears the value of the "editor_type" field.
func (u *PostUpsertBulk) ClearEditorType() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearEditorType()
	})
}

// SetEditTime sets the "edit_time" field.
func (u *PostUpsertBulk) SetEditTime(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetEditTime(v)
	})
}

// AddEditTime adds v to the "edit_time" field.
func (u *PostUpsertBulk) AddEditTime(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddEditTime(v)
	})
}

// UpdateEditTime sets the "edit_time" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateEditTime() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateEditTime()
	})
}

// ClearEditTime clears the value of the "edit_time" field.
func (u *PostUpsertBulk) ClearEditTime() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearEditTime()
	})
}

// SetDisallowComment sets the "disallow_comment" field.
func (u *PostUpsertBulk) SetDisallowComment(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDisallowComment(v)
	})
}

// UpdateDisallowComment sets the "disallow_comment" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDisallowComment() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDisallowComment()
	})
}

// ClearDisallowComment clears the value of the "disallow_comment" field.
func (u *PostUpsertBulk) ClearDisallowComment() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDisallowComment()
	})
}

// SetInProgress sets the "in_progress" field.
func (u *PostUpsertBulk) SetInProgress(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetInProgress(v)
	})
}

// UpdateInProgress sets the "in_progress" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateInProgress() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateInProgress()
	})
}

// ClearInProgress clears the value of the "in_progress" field.
func (u *PostUpsertBulk) ClearInProgress() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearInProgress()
	})
}

// Exec executes the query.
func (u *PostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
