// Code generated by ent, DO NOT EDIT.

package photo

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the photo type in the database.
	Label = "photo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldTakeTime holds the string denoting the take_time field in the database.
	FieldTakeTime = "take_time"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldTeam holds the string denoting the team field in the database.
	FieldTeam = "team"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// Table holds the table name of the photo in the database.
	Table = "photo"
)

// Columns holds all SQL columns for photo fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeleteTime,
	FieldName,
	FieldThumbnail,
	FieldTakeTime,
	FieldURL,
	FieldTeam,
	FieldLocation,
	FieldDescription,
	FieldLikes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() int64
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() int64
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint32) error
)

// OrderOption defines the ordering options for the Photo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByThumbnail orders the results by the thumbnail field.
func ByThumbnail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnail, opts...).ToFunc()
}

// ByTakeTime orders the results by the take_time field.
func ByTakeTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTakeTime, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByTeam orders the results by the team field.
func ByTeam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeam, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}
