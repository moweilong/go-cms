// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: content/service/v1/tag.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Slug != nil {
		// no validation rules for Slug
	}

	if m.SlugName != nil {
		// no validation rules for SlugName
	}

	if m.Color != nil {
		// no validation rules for Color
	}

	if m.Thumbnail != nil {
		// no validation rules for Thumbnail
	}

	if m.CreateTime != nil {
		// no validation rules for CreateTime
	}

	if m.UpdateTime != nil {
		// no validation rules for UpdateTime
	}

	if m.PostCount != nil {
		// no validation rules for PostCount
	}

	if m.FullPath != nil {
		// no validation rules for FullPath
	}

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on ListTagResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagResponseMultiError, or nil if none found.
func (m *ListTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTagResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTagResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTagResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListTagResponseMultiError(errors)
	}

	return nil
}

// ListTagResponseMultiError is an error wrapping multiple validation errors
// returned by ListTagResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagResponseMultiError) AllErrors() []error { return m }

// ListTagResponseValidationError is the validation error returned by
// ListTagResponse.Validate if the designated constraints aren't met.
type ListTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagResponseValidationError) ErrorName() string { return "ListTagResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagResponseValidationError{}

// Validate checks the field values on GetTagRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTagRequestMultiError, or
// nil if none found.
func (m *GetTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTagRequestMultiError(errors)
	}

	return nil
}

// GetTagRequestMultiError is an error wrapping multiple validation errors
// returned by GetTagRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagRequestMultiError) AllErrors() []error { return m }

// GetTagRequestValidationError is the validation error returned by
// GetTagRequest.Validate if the designated constraints aren't met.
type GetTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagRequestValidationError) ErrorName() string { return "GetTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagRequestValidationError{}

// Validate checks the field values on CreateTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTagRequestMultiError, or nil if none found.
func (m *CreateTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTagRequestValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTagRequestValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTagRequestValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return CreateTagRequestMultiError(errors)
	}

	return nil
}

// CreateTagRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTagRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagRequestMultiError) AllErrors() []error { return m }

// CreateTagRequestValidationError is the validation error returned by
// CreateTagRequest.Validate if the designated constraints aren't met.
type CreateTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagRequestValidationError) ErrorName() string { return "CreateTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagRequestValidationError{}

// Validate checks the field values on UpdateTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTagRequestMultiError, or nil if none found.
func (m *UpdateTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTagRequestValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTagRequestValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTagRequestValidationError{
				field:  "Tag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return UpdateTagRequestMultiError(errors)
	}

	return nil
}

// UpdateTagRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTagRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagRequestMultiError) AllErrors() []error { return m }

// UpdateTagRequestValidationError is the validation error returned by
// UpdateTagRequest.Validate if the designated constraints aren't met.
type UpdateTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagRequestValidationError) ErrorName() string { return "UpdateTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagRequestValidationError{}

// Validate checks the field values on DeleteTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagRequestMultiError, or nil if none found.
func (m *DeleteTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return DeleteTagRequestMultiError(errors)
	}

	return nil
}

// DeleteTagRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTagRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagRequestMultiError) AllErrors() []error { return m }

// DeleteTagRequestValidationError is the validation error returned by
// DeleteTagRequest.Validate if the designated constraints aren't met.
type DeleteTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagRequestValidationError) ErrorName() string { return "DeleteTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagRequestValidationError{}
