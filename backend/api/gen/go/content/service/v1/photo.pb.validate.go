// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: content/service/v1/photo.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Photo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PhotoMultiError, or nil if none found.
func (m *Photo) ValidateAll() error {
	return m.validate(true)
}

func (m *Photo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Thumbnail != nil {
		// no validation rules for Thumbnail
	}

	if m.Url != nil {
		// no validation rules for Url
	}

	if m.Team != nil {
		// no validation rules for Team
	}

	if m.Location != nil {
		// no validation rules for Location
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Likes != nil {
		// no validation rules for Likes
	}

	if m.TakeTime != nil {
		// no validation rules for TakeTime
	}

	if m.CreateTime != nil {
		// no validation rules for CreateTime
	}

	if len(errors) > 0 {
		return PhotoMultiError(errors)
	}

	return nil
}

// PhotoMultiError is an error wrapping multiple validation errors returned by
// Photo.ValidateAll() if the designated constraints aren't met.
type PhotoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhotoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhotoMultiError) AllErrors() []error { return m }

// PhotoValidationError is the validation error returned by Photo.Validate if
// the designated constraints aren't met.
type PhotoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhotoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhotoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhotoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhotoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhotoValidationError) ErrorName() string { return "PhotoValidationError" }

// Error satisfies the builtin error interface
func (e PhotoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhotoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhotoValidationError{}

// Validate checks the field values on ListPhotoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPhotoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPhotoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPhotoResponseMultiError, or nil if none found.
func (m *ListPhotoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPhotoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPhotoResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPhotoResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPhotoResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPhotoResponseMultiError(errors)
	}

	return nil
}

// ListPhotoResponseMultiError is an error wrapping multiple validation errors
// returned by ListPhotoResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPhotoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPhotoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPhotoResponseMultiError) AllErrors() []error { return m }

// ListPhotoResponseValidationError is the validation error returned by
// ListPhotoResponse.Validate if the designated constraints aren't met.
type ListPhotoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPhotoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPhotoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPhotoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPhotoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPhotoResponseValidationError) ErrorName() string {
	return "ListPhotoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPhotoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPhotoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPhotoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPhotoResponseValidationError{}

// Validate checks the field values on GetPhotoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPhotoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPhotoRequestMultiError, or nil if none found.
func (m *GetPhotoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPhotoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPhotoRequestMultiError(errors)
	}

	return nil
}

// GetPhotoRequestMultiError is an error wrapping multiple validation errors
// returned by GetPhotoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPhotoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPhotoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPhotoRequestMultiError) AllErrors() []error { return m }

// GetPhotoRequestValidationError is the validation error returned by
// GetPhotoRequest.Validate if the designated constraints aren't met.
type GetPhotoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPhotoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPhotoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPhotoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPhotoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPhotoRequestValidationError) ErrorName() string { return "GetPhotoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPhotoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPhotoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPhotoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPhotoRequestValidationError{}

// Validate checks the field values on CreatePhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePhotoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePhotoRequestMultiError, or nil if none found.
func (m *CreatePhotoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePhotoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPhoto()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePhotoRequestValidationError{
					field:  "Photo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePhotoRequestValidationError{
					field:  "Photo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoto()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePhotoRequestValidationError{
				field:  "Photo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return CreatePhotoRequestMultiError(errors)
	}

	return nil
}

// CreatePhotoRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePhotoRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePhotoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePhotoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePhotoRequestMultiError) AllErrors() []error { return m }

// CreatePhotoRequestValidationError is the validation error returned by
// CreatePhotoRequest.Validate if the designated constraints aren't met.
type CreatePhotoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePhotoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePhotoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePhotoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePhotoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePhotoRequestValidationError) ErrorName() string {
	return "CreatePhotoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePhotoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePhotoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePhotoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePhotoRequestValidationError{}

// Validate checks the field values on UpdatePhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePhotoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePhotoRequestMultiError, or nil if none found.
func (m *UpdatePhotoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePhotoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPhoto()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePhotoRequestValidationError{
					field:  "Photo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePhotoRequestValidationError{
					field:  "Photo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoto()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePhotoRequestValidationError{
				field:  "Photo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return UpdatePhotoRequestMultiError(errors)
	}

	return nil
}

// UpdatePhotoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePhotoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePhotoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePhotoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePhotoRequestMultiError) AllErrors() []error { return m }

// UpdatePhotoRequestValidationError is the validation error returned by
// UpdatePhotoRequest.Validate if the designated constraints aren't met.
type UpdatePhotoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePhotoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePhotoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePhotoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePhotoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePhotoRequestValidationError) ErrorName() string {
	return "UpdatePhotoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePhotoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePhotoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePhotoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePhotoRequestValidationError{}

// Validate checks the field values on DeletePhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePhotoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePhotoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePhotoRequestMultiError, or nil if none found.
func (m *DeletePhotoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePhotoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return DeletePhotoRequestMultiError(errors)
	}

	return nil
}

// DeletePhotoRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePhotoRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePhotoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePhotoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePhotoRequestMultiError) AllErrors() []error { return m }

// DeletePhotoRequestValidationError is the validation error returned by
// DeletePhotoRequest.Validate if the designated constraints aren't met.
type DeletePhotoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePhotoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePhotoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePhotoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePhotoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePhotoRequestValidationError) ErrorName() string {
	return "DeletePhotoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePhotoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePhotoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePhotoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePhotoRequestValidationError{}
