// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: front/service/v1/i_post.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	v11 "go-cms/api/gen/go/content/service/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPostServiceCreatePost = "/front.service.v1.PostService/CreatePost"
const OperationPostServiceDeletePost = "/front.service.v1.PostService/DeletePost"
const OperationPostServiceGetPost = "/front.service.v1.PostService/GetPost"
const OperationPostServiceListPost = "/front.service.v1.PostService/ListPost"
const OperationPostServiceUpdatePost = "/front.service.v1.PostService/UpdatePost"

type PostServiceHTTPServer interface {
	// CreatePost 创建帖子
	CreatePost(context.Context, *v11.CreatePostRequest) (*v11.Post, error)
	// DeletePost 删除帖子
	DeletePost(context.Context, *v11.DeletePostRequest) (*emptypb.Empty, error)
	// GetPost 获取帖子数据
	GetPost(context.Context, *v11.GetPostRequest) (*v11.Post, error)
	// ListPost 获取帖子列表
	ListPost(context.Context, *v1.PagingRequest) (*v11.ListPostResponse, error)
	// UpdatePost 更新帖子
	UpdatePost(context.Context, *v11.UpdatePostRequest) (*v11.Post, error)
}

func RegisterPostServiceHTTPServer(s *http.Server, srv PostServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/blog/v1/posts", _PostService_ListPost0_HTTP_Handler(srv))
	r.GET("/blog/v1/posts/{id}", _PostService_GetPost0_HTTP_Handler(srv))
	r.POST("/blog/v1/posts", _PostService_CreatePost0_HTTP_Handler(srv))
	r.PUT("/blog/v1/posts/{id}", _PostService_UpdatePost0_HTTP_Handler(srv))
	r.DELETE("/blog/v1/posts/{id}", _PostService_DeletePost0_HTTP_Handler(srv))
}

func _PostService_ListPost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceListPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPost(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListPostResponse)
		return ctx.Result(200, reply)
	}
}

func _PostService_GetPost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceGetPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPost(ctx, req.(*v11.GetPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Post)
		return ctx.Result(200, reply)
	}
}

func _PostService_CreatePost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*v11.CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Post)
		return ctx.Result(200, reply)
	}
}

func _PostService_UpdatePost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdatePostRequest
		if err := ctx.Bind(&in.Post); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceUpdatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*v11.UpdatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Post)
		return ctx.Result(200, reply)
	}
}

func _PostService_DeletePost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeletePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceDeletePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePost(ctx, req.(*v11.DeletePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type PostServiceHTTPClient interface {
	CreatePost(ctx context.Context, req *v11.CreatePostRequest, opts ...http.CallOption) (rsp *v11.Post, err error)
	DeletePost(ctx context.Context, req *v11.DeletePostRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetPost(ctx context.Context, req *v11.GetPostRequest, opts ...http.CallOption) (rsp *v11.Post, err error)
	ListPost(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListPostResponse, err error)
	UpdatePost(ctx context.Context, req *v11.UpdatePostRequest, opts ...http.CallOption) (rsp *v11.Post, err error)
}

type PostServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPostServiceHTTPClient(client *http.Client) PostServiceHTTPClient {
	return &PostServiceHTTPClientImpl{client}
}

func (c *PostServiceHTTPClientImpl) CreatePost(ctx context.Context, in *v11.CreatePostRequest, opts ...http.CallOption) (*v11.Post, error) {
	var out v11.Post
	pattern := "/blog/v1/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostServiceCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) DeletePost(ctx context.Context, in *v11.DeletePostRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/blog/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostServiceDeletePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) GetPost(ctx context.Context, in *v11.GetPostRequest, opts ...http.CallOption) (*v11.Post, error) {
	var out v11.Post
	pattern := "/blog/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostServiceGetPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) ListPost(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListPostResponse, error) {
	var out v11.ListPostResponse
	pattern := "/blog/v1/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostServiceListPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) UpdatePost(ctx context.Context, in *v11.UpdatePostRequest, opts ...http.CallOption) (*v11.Post, error) {
	var out v11.Post
	pattern := "/blog/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostServiceUpdatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Post, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
