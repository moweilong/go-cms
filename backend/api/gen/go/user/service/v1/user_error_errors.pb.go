// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package servicev1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 401
func IsUserErrorReasonNotLoggedInUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_NOT_LOGGED_IN_UNSPECIFIED.String() && e.Code == 401
}

// 401
func ErrorUserErrorReasonNotLoggedInUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_USER_ERROR_REASON_NOT_LOGGED_IN_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

// 403
func IsUserErrorReasonAccessForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_ACCESS_FORBIDDEN.String() && e.Code == 403
}

// 403
func ErrorUserErrorReasonAccessForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_USER_ERROR_REASON_ACCESS_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// 404
func IsUserErrorReasonResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_RESOURCE_NOT_FOUND.String() && e.Code == 404
}

// 404
func ErrorUserErrorReasonResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_USER_ERROR_REASON_RESOURCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 405
func IsUserErrorReasonMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

// 405
func ErrorUserErrorReasonMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, UserErrorReason_USER_ERROR_REASON_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// 408
func IsUserErrorReasonRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_REQUEST_TIMEOUT.String() && e.Code == 408
}

// 408
func ErrorUserErrorReasonRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, UserErrorReason_USER_ERROR_REASON_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 500
func IsUserErrorReasonInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

// 500
func ErrorUserErrorReasonInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_USER_ERROR_REASON_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

// 501
func IsUserErrorReasonNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_NOT_IMPLEMENTED.String() && e.Code == 501
}

// 501
func ErrorUserErrorReasonNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, UserErrorReason_USER_ERROR_REASON_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

// 502
func IsUserErrorReasonNetworkError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_NETWORK_ERROR.String() && e.Code == 502
}

// 502
func ErrorUserErrorReasonNetworkError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, UserErrorReason_USER_ERROR_REASON_NETWORK_ERROR.String(), fmt.Sprintf(format, args...))
}

// 503
func IsUserErrorReasonServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

// 503
func ErrorUserErrorReasonServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, UserErrorReason_USER_ERROR_REASON_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 504
func IsUserErrorReasonNetworkTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_NETWORK_TIMEOUT.String() && e.Code == 504
}

// 504
func ErrorUserErrorReasonNetworkTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, UserErrorReason_USER_ERROR_REASON_NETWORK_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 505
func IsUserErrorReasonRequestNotSupport(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_REQUEST_NOT_SUPPORT.String() && e.Code == 505
}

// 505
func ErrorUserErrorReasonRequestNotSupport(format string, args ...interface{}) *errors.Error {
	return errors.New(505, UserErrorReason_USER_ERROR_REASON_REQUEST_NOT_SUPPORT.String(), fmt.Sprintf(format, args...))
}

func IsUserErrorReasonUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_USER_NOT_FOUND.String() && e.Code == 600
}

func ErrorUserErrorReasonUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(600, UserErrorReason_USER_ERROR_REASON_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserErrorReasonIncorrectPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_INCORRECT_PASSWORD.String() && e.Code == 599
}

func ErrorUserErrorReasonIncorrectPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(599, UserErrorReason_USER_ERROR_REASON_INCORRECT_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsUserErrorReasonUserFreeze(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_USER_FREEZE.String() && e.Code == 598
}

func ErrorUserErrorReasonUserFreeze(format string, args ...interface{}) *errors.Error {
	return errors.New(598, UserErrorReason_USER_ERROR_REASON_USER_FREEZE.String(), fmt.Sprintf(format, args...))
}

// 用户ID无效
func IsUserErrorReasonInvalidUserid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_INVALID_USERID.String() && e.Code == 101
}

// 用户ID无效
func ErrorUserErrorReasonInvalidUserid(format string, args ...interface{}) *errors.Error {
	return errors.New(101, UserErrorReason_USER_ERROR_REASON_INVALID_USERID.String(), fmt.Sprintf(format, args...))
}

// 密码无效
func IsUserErrorReasonInvalidPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_INVALID_PASSWORD.String() && e.Code == 102
}

// 密码无效
func ErrorUserErrorReasonInvalidPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(102, UserErrorReason_USER_ERROR_REASON_INVALID_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// token过期
func IsUserErrorReasonTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_TOKEN_EXPIRED.String() && e.Code == 103
}

// token过期
func ErrorUserErrorReasonTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(103, UserErrorReason_USER_ERROR_REASON_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// token无效
func IsUserErrorReasonInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_INVALID_TOKEN.String() && e.Code == 104
}

// token无效
func ErrorUserErrorReasonInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(104, UserErrorReason_USER_ERROR_REASON_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}

// token不存在
func IsUserErrorReasonTokenNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_TOKEN_NOT_EXIST.String() && e.Code == 105
}

// token不存在
func ErrorUserErrorReasonTokenNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(105, UserErrorReason_USER_ERROR_REASON_TOKEN_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 用户不存在
func IsUserErrorReasonUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_ERROR_REASON_USER_NOT_EXIST.String() && e.Code == 106
}

// 用户不存在
func ErrorUserErrorReasonUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(106, UserErrorReason_USER_ERROR_REASON_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}
