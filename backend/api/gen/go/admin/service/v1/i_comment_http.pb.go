// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: admin/service/v1/i_comment.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	v11 "go-cms/api/gen/go/comment/service/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommentServiceCreateComment = "/admin.service.v1.CommentService/CreateComment"
const OperationCommentServiceDeleteComment = "/admin.service.v1.CommentService/DeleteComment"
const OperationCommentServiceGetComment = "/admin.service.v1.CommentService/GetComment"
const OperationCommentServiceListComment = "/admin.service.v1.CommentService/ListComment"
const OperationCommentServiceUpdateComment = "/admin.service.v1.CommentService/UpdateComment"

type CommentServiceHTTPServer interface {
	// CreateComment 创建评论
	CreateComment(context.Context, *v11.CreateCommentRequest) (*v11.Comment, error)
	// DeleteComment 删除评论
	DeleteComment(context.Context, *v11.DeleteCommentRequest) (*emptypb.Empty, error)
	// GetComment 获取评论数据
	GetComment(context.Context, *v11.GetCommentRequest) (*v11.Comment, error)
	// ListComment 获取评论列表
	ListComment(context.Context, *v1.PagingRequest) (*v11.ListCommentResponse, error)
	// UpdateComment 更新评论
	UpdateComment(context.Context, *v11.UpdateCommentRequest) (*v11.Comment, error)
}

func RegisterCommentServiceHTTPServer(s *http.Server, srv CommentServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/comments", _CommentService_ListComment0_HTTP_Handler(srv))
	r.GET("/admin/v1/comments/{id}", _CommentService_GetComment0_HTTP_Handler(srv))
	r.POST("/admin/v1/comments", _CommentService_CreateComment0_HTTP_Handler(srv))
	r.PUT("/admin/v1/comments/{id}", _CommentService_UpdateComment0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/comments/{id}", _CommentService_DeleteComment0_HTTP_Handler(srv))
}

func _CommentService_ListComment0_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceListComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComment(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListCommentResponse)
		return ctx.Result(200, reply)
	}
}

func _CommentService_GetComment0_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceGetComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComment(ctx, req.(*v11.GetCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Comment)
		return ctx.Result(200, reply)
	}
}

func _CommentService_CreateComment0_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceCreateComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateComment(ctx, req.(*v11.CreateCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Comment)
		return ctx.Result(200, reply)
	}
}

func _CommentService_UpdateComment0_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateCommentRequest
		if err := ctx.Bind(&in.Comment); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceUpdateComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateComment(ctx, req.(*v11.UpdateCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Comment)
		return ctx.Result(200, reply)
	}
}

func _CommentService_DeleteComment0_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeleteCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceDeleteComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteComment(ctx, req.(*v11.DeleteCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type CommentServiceHTTPClient interface {
	CreateComment(ctx context.Context, req *v11.CreateCommentRequest, opts ...http.CallOption) (rsp *v11.Comment, err error)
	DeleteComment(ctx context.Context, req *v11.DeleteCommentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetComment(ctx context.Context, req *v11.GetCommentRequest, opts ...http.CallOption) (rsp *v11.Comment, err error)
	ListComment(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListCommentResponse, err error)
	UpdateComment(ctx context.Context, req *v11.UpdateCommentRequest, opts ...http.CallOption) (rsp *v11.Comment, err error)
}

type CommentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCommentServiceHTTPClient(client *http.Client) CommentServiceHTTPClient {
	return &CommentServiceHTTPClientImpl{client}
}

func (c *CommentServiceHTTPClientImpl) CreateComment(ctx context.Context, in *v11.CreateCommentRequest, opts ...http.CallOption) (*v11.Comment, error) {
	var out v11.Comment
	pattern := "/admin/v1/comments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentServiceCreateComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommentServiceHTTPClientImpl) DeleteComment(ctx context.Context, in *v11.DeleteCommentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/comments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommentServiceDeleteComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommentServiceHTTPClientImpl) GetComment(ctx context.Context, in *v11.GetCommentRequest, opts ...http.CallOption) (*v11.Comment, error) {
	var out v11.Comment
	pattern := "/admin/v1/comments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommentServiceGetComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommentServiceHTTPClientImpl) ListComment(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListCommentResponse, error) {
	var out v11.ListCommentResponse
	pattern := "/admin/v1/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommentServiceListComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommentServiceHTTPClientImpl) UpdateComment(ctx context.Context, in *v11.UpdateCommentRequest, opts ...http.CallOption) (*v11.Comment, error) {
	var out v11.Comment
	pattern := "/admin/v1/comments/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentServiceUpdateComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Comment, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
