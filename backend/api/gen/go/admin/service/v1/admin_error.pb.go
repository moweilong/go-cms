// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: admin/service/v1/admin_error.proto

package servicev1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdminErrorReason int32

const (
	AdminErrorReason_ADMIN_ERROR_REASON_BAD_REQUEST_UNSPECIFIED AdminErrorReason = 0  // 400
	AdminErrorReason_ADMIN_ERROR_REASON_NOT_LOGGED_IN           AdminErrorReason = 1  // 401
	AdminErrorReason_ADMIN_ERROR_REASON_ACCESS_FORBIDDEN        AdminErrorReason = 2  // 403
	AdminErrorReason_ADMIN_ERROR_REASON_RESOURCE_NOT_FOUND      AdminErrorReason = 3  // 404
	AdminErrorReason_ADMIN_ERROR_REASON_METHOD_NOT_ALLOWED      AdminErrorReason = 4  // 405
	AdminErrorReason_ADMIN_ERROR_REASON_REQUEST_TIMEOUT         AdminErrorReason = 5  // 408
	AdminErrorReason_ADMIN_ERROR_REASON_INTERNAL_SERVER_ERROR   AdminErrorReason = 10 // 500
	AdminErrorReason_ADMIN_ERROR_REASON_NOT_IMPLEMENTED         AdminErrorReason = 11 // 501
	AdminErrorReason_ADMIN_ERROR_REASON_NETWORK_ERROR           AdminErrorReason = 12 // 502
	AdminErrorReason_ADMIN_ERROR_REASON_SERVICE_UNAVAILABLE     AdminErrorReason = 13 // 503
	AdminErrorReason_ADMIN_ERROR_REASON_NETWORK_TIMEOUT         AdminErrorReason = 14 // 504
	AdminErrorReason_ADMIN_ERROR_REASON_REQUEST_NOT_SUPPORT     AdminErrorReason = 15 // 505
	AdminErrorReason_ADMIN_ERROR_REASON_INVALID_USERID          AdminErrorReason = 20 // 用户ID无效
	AdminErrorReason_ADMIN_ERROR_REASON_INVALID_PASSWORD        AdminErrorReason = 21 // 密码无效
	AdminErrorReason_ADMIN_ERROR_REASON_TOKEN_EXPIRED           AdminErrorReason = 22 // token过期
	AdminErrorReason_ADMIN_ERROR_REASON_INVALID_TOKEN           AdminErrorReason = 23 // token无效
	AdminErrorReason_ADMIN_ERROR_REASON_TOKEN_NOT_EXIST         AdminErrorReason = 24 // token不存在
	AdminErrorReason_ADMIN_ERROR_REASON_USER_NOT_EXIST          AdminErrorReason = 25 // 用户不存在
	AdminErrorReason_ADMIN_ERROR_REASON_USER_FREEZE             AdminErrorReason = 26 // 账号冻结
)

// Enum value maps for AdminErrorReason.
var (
	AdminErrorReason_name = map[int32]string{
		0:  "ADMIN_ERROR_REASON_BAD_REQUEST_UNSPECIFIED",
		1:  "ADMIN_ERROR_REASON_NOT_LOGGED_IN",
		2:  "ADMIN_ERROR_REASON_ACCESS_FORBIDDEN",
		3:  "ADMIN_ERROR_REASON_RESOURCE_NOT_FOUND",
		4:  "ADMIN_ERROR_REASON_METHOD_NOT_ALLOWED",
		5:  "ADMIN_ERROR_REASON_REQUEST_TIMEOUT",
		10: "ADMIN_ERROR_REASON_INTERNAL_SERVER_ERROR",
		11: "ADMIN_ERROR_REASON_NOT_IMPLEMENTED",
		12: "ADMIN_ERROR_REASON_NETWORK_ERROR",
		13: "ADMIN_ERROR_REASON_SERVICE_UNAVAILABLE",
		14: "ADMIN_ERROR_REASON_NETWORK_TIMEOUT",
		15: "ADMIN_ERROR_REASON_REQUEST_NOT_SUPPORT",
		20: "ADMIN_ERROR_REASON_INVALID_USERID",
		21: "ADMIN_ERROR_REASON_INVALID_PASSWORD",
		22: "ADMIN_ERROR_REASON_TOKEN_EXPIRED",
		23: "ADMIN_ERROR_REASON_INVALID_TOKEN",
		24: "ADMIN_ERROR_REASON_TOKEN_NOT_EXIST",
		25: "ADMIN_ERROR_REASON_USER_NOT_EXIST",
		26: "ADMIN_ERROR_REASON_USER_FREEZE",
	}
	AdminErrorReason_value = map[string]int32{
		"ADMIN_ERROR_REASON_BAD_REQUEST_UNSPECIFIED": 0,
		"ADMIN_ERROR_REASON_NOT_LOGGED_IN":           1,
		"ADMIN_ERROR_REASON_ACCESS_FORBIDDEN":        2,
		"ADMIN_ERROR_REASON_RESOURCE_NOT_FOUND":      3,
		"ADMIN_ERROR_REASON_METHOD_NOT_ALLOWED":      4,
		"ADMIN_ERROR_REASON_REQUEST_TIMEOUT":         5,
		"ADMIN_ERROR_REASON_INTERNAL_SERVER_ERROR":   10,
		"ADMIN_ERROR_REASON_NOT_IMPLEMENTED":         11,
		"ADMIN_ERROR_REASON_NETWORK_ERROR":           12,
		"ADMIN_ERROR_REASON_SERVICE_UNAVAILABLE":     13,
		"ADMIN_ERROR_REASON_NETWORK_TIMEOUT":         14,
		"ADMIN_ERROR_REASON_REQUEST_NOT_SUPPORT":     15,
		"ADMIN_ERROR_REASON_INVALID_USERID":          20,
		"ADMIN_ERROR_REASON_INVALID_PASSWORD":        21,
		"ADMIN_ERROR_REASON_TOKEN_EXPIRED":           22,
		"ADMIN_ERROR_REASON_INVALID_TOKEN":           23,
		"ADMIN_ERROR_REASON_TOKEN_NOT_EXIST":         24,
		"ADMIN_ERROR_REASON_USER_NOT_EXIST":          25,
		"ADMIN_ERROR_REASON_USER_FREEZE":             26,
	}
)

func (x AdminErrorReason) Enum() *AdminErrorReason {
	p := new(AdminErrorReason)
	*p = x
	return p
}

func (x AdminErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_service_v1_admin_error_proto_enumTypes[0].Descriptor()
}

func (AdminErrorReason) Type() protoreflect.EnumType {
	return &file_admin_service_v1_admin_error_proto_enumTypes[0]
}

func (x AdminErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminErrorReason.Descriptor instead.
func (AdminErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_admin_service_v1_admin_error_proto_rawDescGZIP(), []int{0}
}

var File_admin_service_v1_admin_error_proto protoreflect.FileDescriptor

var file_admin_service_v1_admin_error_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x8b, 0x07, 0x0a, 0x10,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x2a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x2a, 0x0a, 0x20, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x04, 0xa8, 0x45,
	0x91, 0x03, 0x12, 0x2d, 0x0a, 0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x93,
	0x03, 0x12, 0x2f, 0x0a, 0x25, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x04, 0xa8, 0x45,
	0x94, 0x03, 0x12, 0x2f, 0x0a, 0x25, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x04, 0xa8,
	0x45, 0x95, 0x03, 0x12, 0x2c, 0x0a, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0x98,
	0x03, 0x12, 0x32, 0x0a, 0x28, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x1a,
	0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x2c, 0x0a, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x04, 0xa8,
	0x45, 0xf5, 0x03, 0x12, 0x2a, 0x0a, 0x20, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x1a, 0x04, 0xa8, 0x45, 0xf6, 0x03, 0x12,
	0x30, 0x0a, 0x26, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x1a, 0x04, 0xa8, 0x45, 0xf7,
	0x03, 0x12, 0x2c, 0x0a, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0e, 0x1a, 0x04, 0xa8, 0x45, 0xf8, 0x03, 0x12,
	0x30, 0x0a, 0x26, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0f, 0x1a, 0x04, 0xa8, 0x45, 0xf9,
	0x03, 0x12, 0x2a, 0x0a, 0x21, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x10, 0x14, 0x1a, 0x03, 0xa8, 0x45, 0x65, 0x12, 0x2c, 0x0a,
	0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x15, 0x1a, 0x03, 0xa8, 0x45, 0x66, 0x12, 0x29, 0x0a, 0x20, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x16, 0x1a, 0x03, 0xa8, 0x45, 0x67, 0x12, 0x29, 0x0a, 0x20, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x17, 0x1a, 0x03, 0xa8, 0x45,
	0x68, 0x12, 0x2b, 0x0a, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x18, 0x1a, 0x03, 0xa8, 0x45, 0x69, 0x12, 0x2a,
	0x0a, 0x21, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0x19, 0x1a, 0x03, 0xa8, 0x45, 0x6a, 0x12, 0x27, 0x0a, 0x1e, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x1a, 0x1a, 0x03,
	0xa8, 0x45, 0x6b, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x42, 0xb7, 0x01, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x67, 0x6f, 0x2d, 0x63, 0x6d, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_service_v1_admin_error_proto_rawDescOnce sync.Once
	file_admin_service_v1_admin_error_proto_rawDescData = file_admin_service_v1_admin_error_proto_rawDesc
)

func file_admin_service_v1_admin_error_proto_rawDescGZIP() []byte {
	file_admin_service_v1_admin_error_proto_rawDescOnce.Do(func() {
		file_admin_service_v1_admin_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_service_v1_admin_error_proto_rawDescData)
	})
	return file_admin_service_v1_admin_error_proto_rawDescData
}

var file_admin_service_v1_admin_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_admin_service_v1_admin_error_proto_goTypes = []any{
	(AdminErrorReason)(0), // 0: admin.service.v1.AdminErrorReason
}
var file_admin_service_v1_admin_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_admin_service_v1_admin_error_proto_init() }
func file_admin_service_v1_admin_error_proto_init() {
	if File_admin_service_v1_admin_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_service_v1_admin_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_admin_service_v1_admin_error_proto_goTypes,
		DependencyIndexes: file_admin_service_v1_admin_error_proto_depIdxs,
		EnumInfos:         file_admin_service_v1_admin_error_proto_enumTypes,
	}.Build()
	File_admin_service_v1_admin_error_proto = out.File
	file_admin_service_v1_admin_error_proto_rawDesc = nil
	file_admin_service_v1_admin_error_proto_goTypes = nil
	file_admin_service_v1_admin_error_proto_depIdxs = nil
}
